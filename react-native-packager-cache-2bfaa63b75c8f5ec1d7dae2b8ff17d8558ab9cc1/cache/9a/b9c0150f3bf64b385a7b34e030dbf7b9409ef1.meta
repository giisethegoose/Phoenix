["37d8d6fce01427212e52c9e737c2f340dfc5d134","8856761e57f2f123791b21228f4a2c849101d280",["react-native","./class/RNFetchBlobSession","./class/RNFetchBlobWriteStream","./class/RNFetchBlobReadStream","./class/RNFetchBlobFile"],[93,145,300,466,623],{"version":3,"sources":["/home/giise/candidtwo/node_modules/react-native-fetch-blob/fs.js"],"names":["RNFetchBlob","emitter","dirs","DocumentDir","CacheDir","PictureDir","MusicDir","MovieDir","DownloadDir","DCIMDir","SDCardDir","SDCardApplicationDir","MainBundleDir","LibraryDir","session","name","s","getSession","setSession","asset","path","OS","test","createFile","data","encoding","Promise","resolve","reject","handler","err","Error","toLowerCase","Array","isArray","createFileASCII","writeStream","append","streamId","readStream","bufferSize","tick","mkdir","res","pathForAppGroup","groupName","readFile","writeFile","toLocaleLowerCase","writeFileArray","appendFile","stat","size","parseInt","lastModified","scanFile","pairs","cp","dest","mv","lstat","ls","unlink","exists","exist","slice","src","start","end","p","normalize","num","Math","max","then","floor","isDir","df","RNFetchBlobSession"],"mappings":"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","sourcesContent":["// Copyright 2016 wkh237@github. All rights reserved.\n// Use of this source code is governed by a MIT-style license that can be\n// found in the LICENSE file.\n\nimport {\n  NativeModules,\n  DeviceEventEmitter,\n  Platform,\n  NativeAppEventEmitter,\n} from 'react-native'\nimport RNFetchBlobSession from './class/RNFetchBlobSession'\nimport RNFetchBlobWriteStream from './class/RNFetchBlobWriteStream'\nimport RNFetchBlobReadStream from './class/RNFetchBlobReadStream'\nimport RNFetchBlobFile from './class/RNFetchBlobFile'\nimport type {\n  RNFetchBlobNative,\n  RNFetchBlobConfig,\n  RNFetchBlobStream\n} from './types'\n\nconst RNFetchBlob:RNFetchBlobNative = NativeModules.RNFetchBlob\nconst emitter = DeviceEventEmitter\nconst dirs = {\n    DocumentDir :  RNFetchBlob.DocumentDir,\n    CacheDir : RNFetchBlob.CacheDir,\n    PictureDir : RNFetchBlob.PictureDir,\n    MusicDir : RNFetchBlob.MusicDir,\n    MovieDir : RNFetchBlob.MovieDir,\n    DownloadDir : RNFetchBlob.DownloadDir,\n    DCIMDir : RNFetchBlob.DCIMDir,\n    SDCardDir : RNFetchBlob.SDCardDir,\n    SDCardApplicationDir : RNFetchBlob.SDCardApplicationDir,\n    MainBundleDir : RNFetchBlob.MainBundleDir,\n    LibraryDir : RNFetchBlob.LibraryDir\n}\n\n/**\n * Get a file cache session\n * @param  {string} name Stream ID\n * @return {RNFetchBlobSession}\n */\nfunction session(name:string):RNFetchBlobSession {\n  let s = RNFetchBlobSession.getSession(name)\n  if(s)\n    return new RNFetchBlobSession(name)\n  else {\n    RNFetchBlobSession.setSession(name, [])\n    return new RNFetchBlobSession(name, [])\n  }\n}\n\nfunction asset(path:string):string {\n  if(Platform.OS === 'ios') {\n    // path from camera roll\n    if(/^assets-library\\:\\/\\//.test(path))\n      return path\n  }\n  return 'bundle-assets://' + path\n}\n\nfunction createFile(path:string, data:string, encoding: 'base64' | 'ascii' | 'utf8'):Promise {\n  encoding = encoding || 'utf8'\n  return new Promise((resolve, reject) => {\n    let handler = (err) => {\n      if(err)\n        reject(new Error(err))\n      else\n        resolve()\n    }\n    if(encoding.toLowerCase() === 'ascii') {\n      if(Array.isArray(data))\n        RNFetchBlob.createFileASCII(path, data, handler)\n      else\n        reject(new Error('`data` of ASCII file must be an array contains numbers'))\n    }\n    else {\n      RNFetchBlob.createFile(path, data, encoding, handler)\n    }\n  })\n}\n\n/**\n * Create write stream to a file.\n * @param  {string} path Target path of file stream.\n * @param  {string} encoding Encoding of input data.\n * @param  {bool} append  A flag represent if data append to existing ones.\n * @return {Promise<WriteStream>} A promise resolves a `WriteStream` object.\n */\nfunction writeStream(\n  path : string,\n  encoding : 'utf8' | 'ascii' | 'base64',\n  append? : ?bool,\n):Promise<RNFetchBlobWriteStream> {\n  if(!path)\n    throw Error('RNFetchBlob could not open file stream with empty `path`')\n  encoding = encoding || 'utf8'\n  append = append || false\n  return new Promise((resolve, reject) => {\n    RNFetchBlob.writeStream(path, encoding || 'base64', append || false, (err, streamId:string) => {\n      if(err)\n        reject(new Error(err))\n      else\n        resolve(new RNFetchBlobWriteStream(streamId, encoding))\n    })\n  })\n}\n\n/**\n * Create file stream from file at `path`.\n * @param  {string} path   The file path.\n * @param  {string} encoding Data encoding, should be one of `base64`, `utf8`, `ascii`\n * @param  {boolean} bufferSize Size of stream buffer.\n * @return {RNFetchBlobStream} RNFetchBlobStream stream instance.\n */\nfunction readStream(\n  path : string,\n  encoding : 'utf8' | 'ascii' | 'base64',\n  bufferSize? : ?number,\n  tick : ?number = 10\n):Promise<RNFetchBlobReadStream> {\n  return Promise.resolve(new RNFetchBlobReadStream(path, encoding, bufferSize, tick))\n}\n\n/**\n * Create a directory.\n * @param  {string} path Path of directory to be created\n * @return {Promise}\n */\nfunction mkdir(path:string):Promise {\n\n  return new Promise((resolve, reject) => {\n    RNFetchBlob.mkdir(path, (err, res) => {\n      if(err)\n        reject(new Error(err))\n      else\n        resolve()\n    })\n  })\n\n}\n\n/**\n * Returns the path for the app group.\n * @param  {string} groupName Name of app group\n * @return {Promise}\n */\nfunction pathForAppGroup(groupName:string):Promise {\n  return RNFetchBlob.pathForAppGroup(groupName);\n}\n\n/**\n * Wrapper method of readStream.\n * @param  {string} path Path of the file.\n * @param  {'base64' | 'utf8' | 'ascii'} encoding Encoding of read stream.\n * @return {Promise<Array<number> | string>}\n */\nfunction readFile(path:string, encoding:string, bufferSize:?number):Promise<any> {\n  if(typeof path !== 'string')\n    return Promise.reject(new Error('Invalid argument \"path\" '))\n  return RNFetchBlob.readFile(path, encoding)\n}\n\n/**\n * Write data to file.\n * @param  {string} path  Path of the file.\n * @param  {string | number[]} data Data to write to the file.\n * @param  {string} encoding Encoding of data (Optional).\n * @return {Promise}\n */\nfunction writeFile(path:string, data:string | Array<number>, encoding:?string):Promise {\n  encoding = encoding || 'utf8'\n  if(typeof path !== 'string')\n    return Promise.reject('Invalid argument \"path\" ')\n  if(encoding.toLocaleLowerCase() === 'ascii') {\n    if(!Array.isArray(data))\n      return Promise.reject(new Error(`Expected \"data\" is an Array when encoding is \"ascii\", however got ${typeof data}`))\n    else\n      return RNFetchBlob.writeFileArray(path, data, false);\n  } else {\n    if(typeof data !== 'string')\n      return Promise.reject(new Error(`Expected \"data\" is a String when encoding is \"utf8\" or \"base64\", however got ${typeof data}`))\n    else\n      return RNFetchBlob.writeFile(path, encoding, data, false);\n  }\n}\n\nfunction appendFile(path:string, data:string | Array<number>, encoding:?string):Promise {\n  encoding = encoding || 'utf8'\n  if(typeof path !== 'string')\n    return Promise.reject('Invalid argument \"path\" ')\n  if(encoding.toLocaleLowerCase() === 'ascii') {\n    if(!Array.isArray(data))\n      return Promise.reject(new Error(`Expected \"data\" is an Array when encoding is \"ascii\", however got ${typeof data}`))\n    else\n      return RNFetchBlob.writeFileArray(path, data, true);\n  } else {\n    if(typeof data !== 'string')\n      return Promise.reject(new Error(`Expected \"data\" is a String when encoding is \"utf8\" or \"base64\", however got ${typeof data}`))\n    else\n      return RNFetchBlob.writeFile(path, encoding, data, true);\n  }\n}\n\n/**\n * Show statistic data of a path.\n * @param  {string} path Target path\n * @return {RNFetchBlobFile}\n */\nfunction stat(path:string):Promise<RNFetchBlobFile> {\n  return new Promise((resolve, reject) => {\n    RNFetchBlob.stat(path, (err, stat) => {\n      if(err)\n        reject(new Error(err))\n      else {\n        if(stat) {\n          stat.size = parseInt(stat.size)\n          stat.lastModified = parseInt(stat.lastModified)\n        }\n        resolve(stat)\n      }\n    })\n  })\n}\n\n/**\n * Android only method, request media scanner to scan the file.\n * @param  {Array<Object<string, string>>} Array contains Key value pairs with key `path` and `mime`.\n * @return {Promise}\n */\nfunction scanFile(pairs:any):Promise {\n  return new Promise((resolve, reject) => {\n    RNFetchBlob.scanFile(pairs, (err) => {\n      if(err)\n        reject(new Error(err))\n      else\n        resolve()\n    })\n  })\n}\n\nfunction cp(path:string, dest:string):Promise<boolean> {\n  return new Promise((resolve, reject) => {\n    RNFetchBlob.cp(path, dest, (err, res) => {\n      if(err)\n        reject(new Error(err))\n      else\n        resolve(res)\n    })\n  })\n}\n\nfunction mv(path:string, dest:string):Promise<boolean> {\n  return new Promise((resolve, reject) => {\n    RNFetchBlob.mv(path, dest, (err, res) => {\n      if(err)\n        reject(new Error(err))\n      else\n        resolve(res)\n    })\n  })\n}\n\nfunction lstat(path:string):Promise<Array<RNFetchBlobFile>> {\n  return new Promise((resolve, reject) => {\n    RNFetchBlob.lstat(path, (err, stat) => {\n      if(err)\n        reject(new Error(err))\n      else\n        resolve(stat)\n    })\n  })\n}\n\nfunction ls(path:string):Promise<Array<String>> {\n  return new Promise((resolve, reject) => {\n    RNFetchBlob.ls(path, (err, res) => {\n      if(err)\n        reject(new Error(err))\n      else\n        resolve(res)\n    })\n  })\n}\n\n/**\n * Remove file at path.\n * @param  {string}   path:string Path of target file.\n * @return {Promise}\n */\nfunction unlink(path:string):Promise {\n  return new Promise((resolve, reject) => {\n    RNFetchBlob.unlink(path, (err) => {\n      if(err) {\n        reject(new Error(err))\n      }\n      else\n        resolve()\n    })\n  })\n}\n\n/**\n * Check if file exists and if it is a folder.\n * @param  {string} path Path to check\n * @return {Promise<bool, bool>}\n */\nfunction exists(path:string):Promise<bool, bool> {\n\n  return new Promise((resolve, reject) => {\n    try {\n      RNFetchBlob.exists(path, (exist) => {\n        resolve(exist)\n      })\n    } catch(err) {\n      reject(new Error(err))\n    }\n  })\n\n}\n\nfunction slice(src:string, dest:string, start:number, end:number):Promise {\n  let p = Promise.resolve()\n  let size = 0\n  function normalize(num, size) {\n    if(num < 0)\n      return Math.max(0, size + num)\n    if(!num && num !== 0)\n      return size\n    return num\n  }\n  if(start < 0 || end < 0 || !start || !end) {\n    p = p.then(() => stat(src))\n         .then((stat) => {\n           size = Math.floor(stat.size)\n           start = normalize(start || 0, size)\n           end = normalize(end, size)\n           return Promise.resolve()\n         })\n  }\n  return p.then(() => RNFetchBlob.slice(src, dest, start, end))\n}\n\nfunction isDir(path:string):Promise<bool, bool> {\n\n  return new Promise((resolve, reject) => {\n    try {\n      RNFetchBlob.exists(path, (exist, isDir) => {\n        resolve(isDir)\n      })\n    } catch(err) {\n      reject(new Error(err))\n    }\n  })\n\n}\n\nfunction df():Promise<{ free : number, total : number }> {\n  return new Promise((resolve, reject) => {\n    RNFetchBlob.df((err, stat) => {\n      if(err)\n        reject(err)\n      else\n        resolve(stat)\n    })\n  })\n}\n\nexport default {\n  RNFetchBlobSession,\n  unlink,\n  mkdir,\n  session,\n  ls,\n  readStream,\n  mv,\n  cp,\n  writeStream,\n  writeFile,\n  appendFile,\n  pathForAppGroup,\n  readFile,\n  exists,\n  createFile,\n  isDir,\n  stat,\n  lstat,\n  scanFile,\n  dirs,\n  slice,\n  asset,\n  df\n}\n"]}]