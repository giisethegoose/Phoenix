["8d4fb3183faed991b5e4150c954c89054a581228","30776c894dc87a6aa8792f2638ba5ac6adfc8716",["./NavigationActions","./utils/invariant"],[1358,1479],{"version":3,"sources":["/home/giise/candidtwo/node_modules/react-navigation/src/addNavigationHelpers.js"],"names":["navigation","goBack","key","actualizedKey","undefined","state","dispatch","back","navigate","routeName","params","action","setParams"],"mappings":";;;;;;kBAgBe,UACbA,UADa,EAEY;AACzB,sBACKA,UADL;AAEEC,YAAQ,gBAACC,GAAD,EAA4B;AAClC,UAAIC,gBAAyBD,GAA7B;AACA,UAAIA,QAAQE,SAAR,IAAqBJ,WAAWK,KAAX,CAAiBH,GAA1C,EAA+C;AAC7C,iCACE,OAAOF,WAAWK,KAAX,CAAiBH,GAAxB,KAAgC,QADlC,EAEE,wBAFF;AAIAC,wBAAgBH,WAAWK,KAAX,CAAiBH,GAAjC;AACD;AACD,aAAOF,WAAWM,QAAX,CACL,4BAAkBC,IAAlB,CAAuB,EAAEL,KAAKC,aAAP,EAAvB,CADK,CAAP;AAGD,KAdH;AAeEK,cAAU,kBACRC,SADQ,EAERC,MAFQ,EAGRC,MAHQ;AAAA,aAKRX,WAAWM,QAAX,CACE,4BAAkBE,QAAlB,CAA2B,EAAEC,oBAAF,EAAaC,cAAb,EAAqBC,cAArB,EAA3B,CADF,CALQ;AAAA,KAfZ;;AA4BEC,eAAW,mBAACF,MAAD,EAAuC;AAChD,+BACEV,WAAWK,KAAX,CAAiBH,GAAjB,IAAwB,OAAOF,WAAWK,KAAX,CAAiBH,GAAxB,KAAgC,QAD1D,EAEE,8CAFF;AAIA,UAAMA,MAAMF,WAAWK,KAAX,CAAiBH,GAA7B;AACA,aAAOF,WAAWM,QAAX,CAAoB,4BAAkBM,SAAlB,CAA4B,EAAEF,cAAF,EAAUR,QAAV,EAA5B,CAApB,CAAP;AACD;AAnCH;AAqCD,C;;AA3CD;;;;AACA","sourcesContent":["/**\n * @flow\n *\n * Helpers for navigation.\n */\n\nimport type {\n  NavigationProp,\n  NavigationParams,\n  NavigationScreenProp,\n  NavigationNavigateAction,\n} from './TypeDefinition';\n\nimport NavigationActions from './NavigationActions';\nimport invariant from './utils/invariant';\n\nexport default function<S: {}>(\n  navigation: NavigationProp<S>\n): NavigationScreenProp<S> {\n  return {\n    ...navigation,\n    goBack: (key?: ?string): boolean => {\n      let actualizedKey: ?string = key;\n      if (key === undefined && navigation.state.key) {\n        invariant(\n          typeof navigation.state.key === 'string',\n          'key should be a string'\n        );\n        actualizedKey = navigation.state.key;\n      }\n      return navigation.dispatch(\n        NavigationActions.back({ key: actualizedKey })\n      );\n    },\n    navigate: (\n      routeName: string,\n      params?: NavigationParams,\n      action?: NavigationNavigateAction\n    ): boolean =>\n      navigation.dispatch(\n        NavigationActions.navigate({ routeName, params, action })\n      ),\n    /**\n     * For updating current route params. For example the nav bar title and\n     * buttons are based on the route params.\n     * This means `setParams` can be used to update nav bar for example.\n     */\n    setParams: (params: NavigationParams): boolean => {\n      invariant(\n        navigation.state.key && typeof navigation.state.key === 'string',\n        'setParams cannot be called by root navigator'\n      );\n      const key = navigation.state.key;\n      return navigation.dispatch(NavigationActions.setParams({ params, key }));\n    },\n  };\n}\n"]}]