["c2be77c75a830d75b7f51ac373f6ac2e7b547d48","e8d51ad6759648cf6b26f40452b483e63cdeb7c7",["react","./../../../../react-transform-hmr/lib/index.js","react-native","./CardStack","./CardStackStyleInterpolator","../Transitioner","./TransitionConfigs"],[88,167,1139,1182,1296,1447,1562],{"version":3,"sources":["/home/giise/candidtwo/node_modules/react-navigation/src/views/CardStack/CardStackTransitioner.js"],"names":["React","NativeAnimatedModule","_configureTransition","transitionProps","prevTransitionProps","isModal","props","mode","transitionSpec","getTransitionConfig","transitionConfig","canUseNativeDriver","useNativeDriver","_render","screenProps","headerMode","router","cardStyle","navigation","onTransitionStart","onTransitionEnd","Component","defaultProps","CardStackTransitioner"],"mappings":";;;;;;IAEYA,K;;;;;;;;;;;;AACZ;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;YANYA,K;;;;;;;;;AAqBZ,IAAMC,uBACJ,8BAAiB,2BAAcA,oBADjC;;;;;;;;;;;;;;;;oNAyCEC,oB,GAAuB,UAErBC,eAFqB,EAIrBC,mBAJqB,EAKlB;AACH,UAAMC,UAAU,MAAKC,KAAL,CAAWC,IAAX,KAAoB,OAApC;;AAGA,UAAMC,8BACD,4BAAkBC,mBAAlB,CACD,MAAKH,KAAL,CAAWI,gBADV,EAEDP,eAFC,EAGDC,mBAHC,EAIDC,OAJC,EAKDG,cANE,CAAN;AAQA,UACE,CAAC,CAACP,oBAAF,IAEA,qCAA2BU,kBAA3B,EAHF,EAIE;AAEAH,uBAAeI,eAAf,GAAiC,IAAjC;AACD;AACD,aAAOJ,cAAP;AACD,K,QAEDK,O,GAAU,UAACP,KAAD,EAAkD;AAAA,wBAQtD,MAAKA,KARiD;AAAA,UAExDQ,WAFwD,eAExDA,WAFwD;AAAA,UAGxDC,UAHwD,eAGxDA,UAHwD;AAAA,UAIxDR,IAJwD,eAIxDA,IAJwD;AAAA,UAKxDS,MALwD,eAKxDA,MALwD;AAAA,UAMxDC,SANwD,eAMxDA,SANwD;AAAA,UAOxDP,gBAPwD,eAOxDA,gBAPwD;;AAS1D,aACE;AACE,qBAAaI,WADf;AAEE,oBAAYC,UAFd;AAGE,cAAMR,IAHR;AAIE,gBAAQS,MAJV;AAKE,mBAAWC,SALb;AAME,0BAAkBP;AANpB,SAOMJ,KAPN,EADF;AAWD,K;;;;;6BA5DQ;AACP,aACE;AACE,6BAAqB,KAAKJ,oBAD5B;AAEE,oBAAY,KAAKI,KAAL,CAAWY,UAFzB;AAGE,gBAAQ,KAAKL,OAHf;AAIE,2BAAmB,KAAKP,KAAL,CAAWa,iBAJhC;AAKE,yBAAiB,KAAKb,KAAL,CAAWc;AAL9B,QADF;AASD;;;;EAjBiCpB,MAAMqB,S,UAGjCC,Y,GAAe;AACpBf,QAAM;AADc,C;;kBAmETgB,qB","sourcesContent":["/* @flow */\n\nimport * as React from 'react';\nimport { NativeModules } from 'react-native';\n\nimport CardStack from './CardStack';\nimport CardStackStyleInterpolator from './CardStackStyleInterpolator';\nimport Transitioner from '../Transitioner';\nimport TransitionConfigs from './TransitionConfigs';\n\nimport type {\n  NavigationSceneRenderer,\n  NavigationScreenProp,\n  NavigationStackScreenOptions,\n  NavigationState,\n  NavigationTransitionProps,\n  NavigationRouter,\n  HeaderMode,\n  ViewStyleProp,\n  TransitionConfig,\n  NavigationStackAction,\n} from '../../TypeDefinition';\n\nconst NativeAnimatedModule =\n  NativeModules && NativeModules.NativeAnimatedModule;\n\ntype Props = {\n  screenProps?: {},\n  headerMode: HeaderMode,\n  mode: 'card' | 'modal',\n  navigation: NavigationScreenProp<NavigationState>,\n  router: NavigationRouter<\n    NavigationState,\n    NavigationStackAction,\n    NavigationStackScreenOptions\n  >,\n  cardStyle?: ViewStyleProp,\n  onTransitionStart?: () => void,\n  onTransitionEnd?: () => void,\n  /**\n   * Optional custom animation when transitioning between screens.\n   */\n  transitionConfig?: () => TransitionConfig,\n};\n\nclass CardStackTransitioner extends React.Component<Props> {\n  _render: NavigationSceneRenderer;\n\n  static defaultProps = {\n    mode: 'card',\n  };\n\n  render() {\n    return (\n      <Transitioner\n        configureTransition={this._configureTransition}\n        navigation={this.props.navigation}\n        render={this._render}\n        onTransitionStart={this.props.onTransitionStart}\n        onTransitionEnd={this.props.onTransitionEnd}\n      />\n    );\n  }\n\n  _configureTransition = (\n    // props for the new screen\n    transitionProps: NavigationTransitionProps,\n    // props for the old screen\n    prevTransitionProps: ?NavigationTransitionProps\n  ) => {\n    const isModal = this.props.mode === 'modal';\n    // Copy the object so we can assign useNativeDriver below\n    // (avoid Flow error, transitionSpec is of type NavigationTransitionSpec).\n    const transitionSpec = {\n      ...TransitionConfigs.getTransitionConfig(\n        this.props.transitionConfig,\n        transitionProps,\n        prevTransitionProps,\n        isModal\n      ).transitionSpec,\n    };\n    if (\n      !!NativeAnimatedModule &&\n      // Native animation support also depends on the transforms used:\n      CardStackStyleInterpolator.canUseNativeDriver()\n    ) {\n      // Internal undocumented prop\n      transitionSpec.useNativeDriver = true;\n    }\n    return transitionSpec;\n  };\n\n  _render = (props: NavigationTransitionProps): React.Node => {\n    const {\n      screenProps,\n      headerMode,\n      mode,\n      router,\n      cardStyle,\n      transitionConfig,\n    } = this.props;\n    return (\n      <CardStack\n        screenProps={screenProps}\n        headerMode={headerMode}\n        mode={mode}\n        router={router}\n        cardStyle={cardStyle}\n        transitionConfig={transitionConfig}\n        {...props}\n      />\n    );\n  };\n}\n\nexport default CardStackTransitioner;\n"]}]