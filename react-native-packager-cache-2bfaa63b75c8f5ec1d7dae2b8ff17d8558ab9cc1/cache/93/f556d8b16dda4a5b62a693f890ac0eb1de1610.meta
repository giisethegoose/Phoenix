["839e746461e9e171123cb45bb90ee8ab8fafdb72","ba6691b8c3a53d3c80720d02f03084298f0d1f3a",["react-native","./utils/uri","./class/StatefulPromise.js","./fs","./utils/uuid","base-64","./polyfill","lodash","./android","./ios","./json-stream"],[93,130,233,362,445,540,634,737,833,930,1022],{"version":3,"sources":["/home/giise/candidtwo/node_modules/react-native-fetch-blob/index.js"],"names":["RNFetchBlobSession","readStream","createFile","unlink","exists","mkdir","session","writeStream","readFile","ls","isDir","mv","cp","Blob","emitter","RNFetchBlob","OS","addEventListener","e","emitExpiredEvent","addListener","event","console","warn","detail","log","fetchBlobForm","fetchBlob","wrap","path","config","options","fetch","bind","fetchFile","method","url","headers","body","isFileURI","unwrapFileURI","promise","cursor","total","cacheData","info","_progress","_uploadProgress","_stateChange","toLowerCase","stat","then","size","encoding","Math","floor","bufferSize","interval","stream","Promise","resolve","reject","open","state","status","respType","rnfbEncode","onData","chunk","noCache","onError","err","onEnd","FetchBlobResponse","progress","fn","stateChange","uploadProgress","args","taskId","subscription","subscriptionUpload","stateEvent","partEvent","respInfo","reduce","result","value","key","nativeMethodName","Array","isArray","onProgress","written","onUploadProgress","onStateChange","onExpire","onPartData","isRNFetchBlobPolyfill","getRNFetchBlobRef","req","rawType","data","remove","cancel","Error","fileCache","addAndroidDownloads","auto","add","count","length","enableProgressReport","enableUploadProgressReport","part","expire","cancelRequest","type","array","cType","blob","build","text","res","decode","b64","json","JSON","parse","base64","encode","flush","name","android","ios","fs","polyfill","JSONStream"],"mappings":"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","sourcesContent":["// Copyright 2016 wkh237@github. All rights reserved.\n// Use of this source code is governed by a MIT-style license that can be\n// found in the LICENSE file.\n\nimport {\n  NativeModules,\n  DeviceEventEmitter,\n  NativeAppEventEmitter,\n  Platform,\n  AsyncStorage,\n  AppState,\n} from 'react-native'\nimport type {\n  RNFetchBlobNative,\n  RNFetchBlobConfig,\n  RNFetchBlobStream,\n  RNFetchBlobResponseInfo\n} from './types'\nimport URIUtil from './utils/uri'\nimport StatefulPromise from './class/StatefulPromise.js'\nimport fs from './fs'\nimport getUUID from './utils/uuid'\nimport base64 from 'base-64'\nimport polyfill from './polyfill'\nimport _ from 'lodash'\nimport android from './android'\nimport ios from './ios'\nimport JSONStream from './json-stream'\nconst {\n  RNFetchBlobSession,\n  readStream,\n  createFile,\n  unlink,\n  exists,\n  mkdir,\n  session,\n  writeStream,\n  readFile,\n  ls,\n  isDir,\n  mv,\n  cp\n} = fs\n\nconst Blob = polyfill.Blob\nconst emitter = DeviceEventEmitter\nconst RNFetchBlob = NativeModules.RNFetchBlob\n\n// when app resumes, check if there's any expired network task and trigger\n// their .expire event\nif(Platform.OS === 'ios') {\n  AppState.addEventListener('change', (e) => {\n    if(e === 'active')\n      RNFetchBlob.emitExpiredEvent(()=>{})\n  })\n}\n\n// register message channel event handler.\nemitter.addListener(\"RNFetchBlobMessage\", (e) => {\n\n  if(e.event === 'warn') {\n    console.warn(e.detail)\n  }\n  else if (e.event === 'error') {\n    throw e.detail\n  }\n  else {\n    console.log(\"RNFetchBlob native message\", e.detail)\n  }\n})\n\n// Show warning if native module not detected\nif(!RNFetchBlob || !RNFetchBlob.fetchBlobForm || !RNFetchBlob.fetchBlob) {\n  console.warn(\n    'react-native-fetch-blob could not find valid native module.',\n    'please make sure you have linked native modules using `rnpm link`,',\n    'and restart RN packager or manually compile IOS/Android project.'\n  )\n}\n\nfunction wrap(path:string):string {\n  return 'RNFetchBlob-file://' + path\n}\n\n/**\n * Calling this method will inject configurations into followed `fetch` method.\n * @param  {RNFetchBlobConfig} options\n *         Fetch API configurations, contains the following options :\n *         @property {boolean} fileCache\n *                   When fileCache is `true`, response data will be saved in\n *                   storage with a random generated file name, rather than\n *                   a BASE64 encoded string.\n *         @property {string} appendExt\n *                   Set this property to change file extension of random-\n *                   generated file name.\n *         @property {string} path\n *                   If this property has a valid string format, resonse data\n *                   will be saved to specific file path. Default string format\n *                   is : `RNFetchBlob-file://path-to-file`\n *         @property {string} key\n *                   If this property is set, it will be converted to md5, to\n *                   check if a file with this name exists.\n *                   If it exists, the absolute path is returned (no network\n *                   activity takes place )\n *                   If it doesn't exist, the file is downloaded as usual\n *         @property {number} timeout\n *                   Request timeout in millionseconds, by default it's 30000ms.\n *\n * @return {function} This method returns a `fetch` method instance.\n */\nfunction config (options:RNFetchBlobConfig) {\n  return { fetch : fetch.bind(options) }\n}\n\n/**\n * Fetch from file system, use the same interface as RNFB.fetch\n * @param  {RNFetchBlobConfig} [options={}] Fetch configurations\n * @param  {string} method     Should be one of `get`, `post`, `put`\n * @param  {string} url        A file URI string\n * @param  {string} headers    Arguments of file system API\n * @param  {any} body       Data to put or post to file systen.\n * @return {Promise}\n */\nfunction fetchFile(options = {}, method, url, headers = {}, body):Promise {\n\n  if(!URIUtil.isFileURI(url)) {\n    throw `could not fetch file from an invalid URI : ${url}`\n  }\n\n  url = URIUtil.unwrapFileURI(url)\n\n  let promise = null\n  let cursor = 0\n  let total = -1\n  let cacheData = ''\n  let info = null\n  let _progress, _uploadProgress, _stateChange\n\n  switch(method.toLowerCase()) {\n\n    case 'post':\n    break\n\n    case 'put':\n    break\n\n    // read data from file system\n    default:\n      promise = fs.stat(url)\n      .then((stat) => {\n        total = stat.size\n        return fs.readStream(url,\n          headers.encoding || 'utf8',\n          Math.floor(headers.bufferSize) || 409600,\n          Math.floor(headers.interval) || 100\n        )\n      })\n      .then((stream) => new Promise((resolve, reject) => {\n        stream.open()\n        info = {\n          state : \"2\",\n          headers : { 'source' : 'system-fs' },\n          status : 200,\n          respType : 'text',\n          rnfbEncode : headers.encoding || 'utf8'\n        }\n        _stateChange(info)\n        stream.onData((chunk) => {\n          _progress && _progress(cursor, total, chunk)\n          if(headers.noCache)\n            return\n          cacheData += chunk\n        })\n        stream.onError((err) => { reject(err) })\n        stream.onEnd(() => {\n          resolve(new FetchBlobResponse(null, info, cacheData))\n        })\n      }))\n    break\n  }\n\n  promise.progress = (fn) => {\n    _progress = fn\n    return promise\n  }\n  promise.stateChange = (fn) => {\n    _stateChange = fn\n    return promise\n  }\n  promise.uploadProgress = (fn) => {\n    _uploadProgress = fn\n    return promise\n  }\n\n  return promise\n}\n\n/**\n * Create a HTTP request by settings, the `this` context is a `RNFetchBlobConfig` object.\n * @param  {string} method HTTP method, should be `GET`, `POST`, `PUT`, `DELETE`\n * @param  {string} url Request target url string.\n * @param  {object} headers HTTP request headers.\n * @param  {string} body\n *         Request body, can be either a BASE64 encoded data string,\n *         or a file path with prefix `RNFetchBlob-file://` (can be changed)\n * @return {Promise}\n *         This promise instance also contains a Customized method `progress`for\n *         register progress event handler.\n */\nfunction fetch(...args:any):Promise {\n\n  // create task ID for receiving progress event\n  let taskId = getUUID()\n  let options = this || {}\n  let subscription, subscriptionUpload, stateEvent, partEvent\n  let respInfo = {}\n  let [method, url, headers, body] = [...args]\n\n  // # 241 normalize null or undefined headers, in case nil or null string\n  // pass to native context\n  headers = _.reduce(headers, (result, value, key) => {\n    result[key] = value || ''\n    return result\n  }, {});\n\n  // fetch from file system\n  if(URIUtil.isFileURI(url)) {\n    return fetchFile(options, method, url, headers, body)\n  }\n\n  // from remote HTTP(S)\n  let promise = new Promise((resolve, reject) => {\n    let nativeMethodName = Array.isArray(body) ? 'fetchBlobForm' : 'fetchBlob'\n\n    // on progress event listener\n    subscription = emitter.addListener('RNFetchBlobProgress', (e) => {\n      if(e.taskId === taskId && promise.onProgress) {\n        promise.onProgress(e.written, e.total, e.chunk)\n      }\n    })\n\n    subscriptionUpload = emitter.addListener('RNFetchBlobProgress-upload', (e) => {\n      if(e.taskId === taskId && promise.onUploadProgress) {\n        promise.onUploadProgress(e.written, e.total)\n      }\n    })\n\n    stateEvent = emitter.addListener('RNFetchBlobState', (e) => {\n      if(e.taskId === taskId)\n        respInfo = e\n      promise.onStateChange && promise.onStateChange(e)\n    })\n\n    subscription = emitter.addListener('RNFetchBlobExpire', (e) => {\n      if(e.taskId === taskId && promise.onExpire) {\n        promise.onExpire(e)\n      }\n    })\n\n    partEvent = emitter.addListener('RNFetchBlobServerPush', (e) => {\n      if(e.taskId === taskId && promise.onPartData) {\n        promise.onPartData(e.chunk)\n      }\n    })\n\n    // When the request body comes from Blob polyfill, we should use special its ref\n    // as the request body\n    if( body instanceof Blob && body.isRNFetchBlobPolyfill) {\n      body = body.getRNFetchBlobRef()\n    }\n\n    let req = RNFetchBlob[nativeMethodName]\n\n    /**\n     * Send request via native module, the response callback accepts three arguments\n     * @callback\n     * @param err {any} Error message or object, when the request success, this\n     *                  parameter should be `null`.\n     * @param rawType { 'utf8' | 'base64' | 'path'} RNFB request will be stored\n     *                  as UTF8 string, BASE64 string, or a file path reference\n     *                  in JS context, and this parameter indicates which one\n     *                  dose the response data presents.\n     * @param data {string} Response data or its reference.\n     */\n    req(options, taskId, method, url, headers || {}, body, (err, rawType, data) => {\n\n      // task done, remove event listeners\n      subscription.remove()\n      subscriptionUpload.remove()\n      stateEvent.remove()\n      partEvent.remove()\n      delete promise['progress']\n      delete promise['uploadProgress']\n      delete promise['stateChange']\n      delete promise['part']\n      delete promise['cancel']\n      // delete promise['expire']\n      promise.cancel = () => {}\n\n      if(err)\n        reject(new Error(err, respInfo))\n      else {\n        // response data is saved to storage, create a session for it\n        if(options.path || options.fileCache || options.addAndroidDownloads\n          || options.key || options.auto && respInfo.respType === 'blob') {\n          if(options.session)\n            session(options.session).add(data)\n        }\n        respInfo.rnfbEncode = rawType\n        resolve(new FetchBlobResponse(taskId, respInfo, data))\n      }\n\n    })\n\n  })\n\n  // extend Promise object, add `progress`, `uploadProgress`, and `cancel`\n  // method for register progress event handler and cancel request.\n  // Add second parameter for performance purpose #140\n  // When there's only one argument pass to this method, use default `interval`\n  // and `count`, otherwise use the given on.\n  // TODO : code refactor, move `uploadProgress` and `progress` to StatefulPromise\n  promise.progress = (...args) => {\n    let interval = 250\n    let count = -1\n    let fn = () => {}\n    if(args.length === 2) {\n      interval = args[0].interval || interval\n      count = args[0].count || count\n      fn = args[1]\n    }\n    else {\n      fn = args[0]\n    }\n    promise.onProgress = fn\n    RNFetchBlob.enableProgressReport(taskId, interval, count)\n    return promise\n  }\n  promise.uploadProgress = (...args) => {\n    let interval = 250\n    let count = -1\n    let fn = () => {}\n    if(args.length === 2) {\n      interval = args[0].interval || interval\n      count = args[0].count || count\n      fn = args[1]\n    }\n    else {\n      fn = args[0]\n    }\n    promise.onUploadProgress = fn\n    RNFetchBlob.enableUploadProgressReport(taskId, interval, count)\n    return promise\n  }\n  promise.part = (fn) => {\n    promise.onPartData = fn\n    return promise\n  }\n  promise.stateChange = (fn) => {\n    promise.onStateChange = fn\n    return promise\n  }\n  promise.expire = (fn) => {\n    promise.onExpire = fn\n    return promise\n  }\n  promise.cancel = (fn) => {\n    fn = fn || function(){}\n    subscription.remove()\n    subscriptionUpload.remove()\n    stateEvent.remove()\n    RNFetchBlob.cancelRequest(taskId, fn)\n  }\n  promise.taskId = taskId\n\n  return promise\n\n}\n\n/**\n * RNFetchBlob response object class.\n */\nclass FetchBlobResponse {\n\n  taskId : string;\n  path : () => string | null;\n  type : 'base64' | 'path' | 'utf8';\n  data : any;\n  blob : (contentType:string, sliceSize:number) => Promise<Blob>;\n  text : () => string | Promise<any>;\n  json : () => any;\n  base64 : () => any;\n  flush : () => void;\n  respInfo : RNFetchBlobResponseInfo;\n  session : (name:string) => RNFetchBlobSession | null;\n  readFile : (encode: 'base64' | 'utf8' | 'ascii') => ?Promise<any>;\n  readStream : (\n    encode: 'utf8' | 'ascii' | 'base64',\n  ) => RNFetchBlobStream | null;\n\n  constructor(taskId:string, info:RNFetchBlobResponseInfo, data:any) {\n    this.data = data\n    this.taskId = taskId\n    this.type = info.rnfbEncode\n    this.respInfo = info\n\n    this.info = ():RNFetchBlobResponseInfo => {\n      return this.respInfo\n    }\n\n    this.array = ():Promise<Array> => {\n      let cType = info.headers['Content-Type'] || info.headers['content-type']\n      return new Promise((resolve, reject) => {\n        switch(this.type) {\n          case 'base64':\n            // TODO : base64 to array buffer\n          break\n          case 'path':\n            fs.readFile(this.data, 'ascii').then(resolve)\n          break\n          default:\n            // TODO : text to array buffer\n          break\n        }\n      })\n    }\n\n    /**\n     * Convert result to javascript RNFetchBlob object.\n     * @return {Promise<Blob>} Return a promise resolves Blob object.\n     */\n    this.blob = ():Promise<Blob> => {\n      let Blob = polyfill.Blob\n      let cType = info.headers['Content-Type'] || info.headers['content-type']\n      return new Promise((resolve, reject) => {\n        switch(this.type) {\n          case 'base64':\n            Blob.build(this.data, { type : cType + ';BASE64' }).then(resolve)\n          break\n          case 'path':\n            polyfill.Blob.build(wrap(this.data), { type : cType }).then(resolve)\n          break\n          default:\n            polyfill.Blob.build(this.data, { type : 'text/plain' }).then(resolve)\n          break\n        }\n      })\n    }\n    /**\n     * Convert result to text.\n     * @return {string} Decoded base64 string.\n     */\n    this.text = ():string | Promise<any> => {\n      let res = this.data\n      switch(this.type) {\n        case 'base64':\n          return base64.decode(this.data)\n        case 'path':\n          return fs.readFile(this.data, 'base64').then((b64) => Promise.resolve(base64.decode(b64)))\n        default:\n          return this.data\n      }\n    }\n    /**\n     * Convert result to JSON object.\n     * @return {object} Parsed javascript object.\n     */\n    this.json = ():any => {\n      switch(this.type) {\n        case 'base64':\n          return JSON.parse(base64.decode(this.data))\n        case 'path':\n          return fs.readFile(this.data, 'utf8')\n                   .then((text) => Promise.resolve(JSON.parse(text)))\n        default:\n          return JSON.parse(this.data)\n      }\n    }\n    /**\n     * Return BASE64 string directly.\n     * @return {string} BASE64 string of response body.\n     */\n    this.base64 = ():string | Promise<any> => {\n      switch(this.type) {\n        case 'base64':\n          return this.data\n        case 'path':\n          return fs.readFile(this.data, 'base64')\n        default:\n          return base64.encode(this.data)\n      }\n    }\n    /**\n     * Remove cahced file\n     * @return {Promise}\n     */\n    this.flush = () => {\n      let path = this.path()\n      if(!path || this.type !== 'path')\n        return\n      return unlink(path)\n    }\n    /**\n     * get path of response temp file\n     * @return {string} File path of temp file.\n     */\n    this.path = () => {\n      if(this.type === 'path')\n        return this.data\n      return null\n    }\n\n    this.session = (name:string):RNFetchBlobSession | null => {\n      if(this.type === 'path')\n        return session(name).add(this.data)\n      else {\n        console.warn('only file paths can be add into session.')\n        return null\n      }\n    }\n    /**\n     * Start read stream from cached file\n     * @param  {String} encoding Encode type, should be one of `base64`, `ascrii`, `utf8`.\n     * @param  {Function} fn On data event handler\n     * @return {void}\n     */\n    this.readStream = (encode: 'base64' | 'utf8' | 'ascii'):RNFetchBlobStream | null => {\n      if(this.type === 'path') {\n        return readStream(this.data, encode)\n      }\n      else {\n        console.warn('RNFetchblob', 'this response data does not contains any available stream')\n        return null\n      }\n    }\n    /**\n     * Read file content with given encoding, if the response does not contains\n     * a file path, show warning message\n     * @param  {String} encoding Encode type, should be one of `base64`, `ascrii`, `utf8`.\n     * @return {String}\n     */\n    this.readFile = (encode: 'base64' | 'utf8' | 'ascii') => {\n      if(this.type === 'path') {\n        encode = encode || 'utf8'\n        return readFile(this.data, encode)\n      }\n      else {\n        console.warn('RNFetchblob', 'this response does not contains a readable file')\n        return null\n      }\n    }\n  }\n\n}\n\nexport default {\n  fetch,\n  base64,\n  android,\n  ios,\n  config,\n  session,\n  fs,\n  wrap,\n  polyfill,\n  JSONStream\n}\n"]}]