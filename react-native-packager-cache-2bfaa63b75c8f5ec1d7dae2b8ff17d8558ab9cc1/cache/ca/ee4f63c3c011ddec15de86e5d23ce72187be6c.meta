["0b2a33902f95424414e7fe5b04ca38e817c5799e","539c58f8b945a664677b2848e078ba4f7206cf0d",["react-native"],[122],{"version":3,"sources":["/home/giise/candidtwo/node_modules/react-native-fetch-blob/class/RNFetchBlobWriteStream.js"],"names":["RNFetchBlob","emitter","RNFetchBlobWriteStream","streamId","encoding","append","id","data","Promise","resolve","reject","method","toLocaleLowerCase","Array","isArray","error","err","closeStream"],"mappings":";;;;;AAIA;;AAMA,IAAMA,cAAc,2BAAcA,WAAlC;AACA,IAAMC,yCAAN;;IAEqBC,sB;AAMnB,kCAAYC,QAAZ,EAA6BC,QAA7B,EAA8CC,MAA9C,EAA6D;AAAA;;AAC3D,SAAKC,EAAL,GAAUH,QAAV;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACA,SAAKC,MAAL,GAAcA,MAAd;AACD;;;;0BAEKE,I,EAAa;AAAA;;AACjB,aAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,YAAI;AACF,cAAIC,SAAS,MAAKP,QAAL,KAAkB,OAAlB,GAA4B,iBAA5B,GAAgD,YAA7D;AACA,cAAG,MAAKA,QAAL,CAAcQ,iBAAd,OAAsC,OAAtC,IAAiD,CAACC,MAAMC,OAAN,CAAcP,IAAd,CAArD,EAA0E;AACtEG,mBAAO,mCAAP;AACA;AACH;AACDV,sBAAYW,MAAZ,EAAoB,MAAKL,EAAzB,EAA6BC,IAA7B,EAAmC,UAACQ,KAAD,EAAW;AAC5C,gBAAGA,KAAH,EACEL,OAAOK,KAAP,EADF,KAGEN;AACH,WALD;AAMD,SAZD,CAYE,OAAMO,GAAN,EAAW;AACXN,iBAAOM,GAAP;AACD;AACF,OAhBM,CAAP;AAiBD;;;4BAEO;AAAA;;AACN,aAAO,IAAIR,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,YAAI;AACFV,sBAAYiB,WAAZ,CAAwB,OAAKX,EAA7B,EAAiC,YAAM;AACrCG;AACD,WAFD;AAGD,SAJD,CAIE,OAAOO,GAAP,EAAY;AACZN,iBAAOM,GAAP;AACD;AACF,OARM,CAAP;AASD;;;;;kBA1CkBd,sB","sourcesContent":["// Copyright 2016 wkh237@github. All rights reserved.\n// Use of this source code is governed by a MIT-style license that can be\n// found in the LICENSE file.\n\nimport {\n NativeModules,\n DeviceEventEmitter,\n NativeAppEventEmitter,\n} from 'react-native'\n\nconst RNFetchBlob = NativeModules.RNFetchBlob\nconst emitter = DeviceEventEmitter\n\nexport default class RNFetchBlobWriteStream {\n\n  id : string;\n  encoding : string;\n  append : bool;\n\n  constructor(streamId:string, encoding:string, append:string) {\n    this.id = streamId\n    this.encoding = encoding\n    this.append = append\n  }\n\n  write(data:string) {\n    return new Promise((resolve, reject) => {\n      try {\n        let method = this.encoding === 'ascii' ? 'writeArrayChunk' : 'writeChunk'\n        if(this.encoding.toLocaleLowerCase() === 'ascii' && !Array.isArray(data)) {\n            reject('ascii input data must be an Array')\n            return\n        }\n        RNFetchBlob[method](this.id, data, (error) => {\n          if(error)\n            reject(error)\n          else\n            resolve()\n        })\n      } catch(err) {\n        reject(err)\n      }\n    })\n  }\n\n  close() {\n    return new Promise((resolve, reject) => {\n      try {\n        RNFetchBlob.closeStream(this.id, () => {\n          resolve()\n        })\n      } catch (err) {\n        reject(err)\n      }\n    })\n  }\n\n}\n"]}]