["2a8da7fa387bdf92304f2b2edab68b5a37dd9d82","b7bc953d66c5de563dcec8222a889c631e6d4649",[],[],{"version":3,"sources":["/home/giise/candidtwo/node_modules/react-navigation/src/utils/getSceneIndicesForInterpolationInputRange.js"],"names":["getSceneIndicesForInterpolationInputRange","props","scene","scenes","index","lastSceneIndexInScenes","length","isBack","isActive","currentSceneIndexInScenes","findIndex","item","targetSceneIndexInScenes","targetSceneIndex","lastSceneIndex","first","Math","min","last","max"],"mappings":";;;;;AAQA,SAASA,yCAAT,CACEC,KADF,EAEiD;AAAA,MACvCC,KADuC,GACrBD,KADqB,CACvCC,KADuC;AAAA,MAChCC,MADgC,GACrBF,KADqB,CAChCE,MADgC;;AAE/C,MAAMC,QAAQF,MAAME,KAApB;AACA,MAAMC,yBAAyBF,OAAOG,MAAP,GAAgB,CAA/C;AACA,MAAMC,SAAS,CAACJ,OAAOE,sBAAP,EAA+BG,QAA/C;;AAEA,MAAID,MAAJ,EAAY;AACV,QAAME,4BAA4BN,OAAOO,SAAP,CAChC,UAACC,IAAD;AAAA,aAA2BA,SAAST,KAApC;AAAA,KADgC,CAAlC;AAGA,QAAMU,2BAA2BT,OAAOO,SAAP,CAC/B,UAACC,IAAD;AAAA,aAA2BA,KAAKH,QAAhC;AAAA,KAD+B,CAAjC;AAGA,QAAMK,mBAAmBV,OAAOS,wBAAP,EAAiCR,KAA1D;AACA,QAAMU,iBAAiBX,OAAOE,sBAAP,EAA+BD,KAAtD;;AAEA,QACEA,UAAUS,gBAAV,IACAJ,8BAA8BJ,sBAFhC,EAGE;AACA,aAAO;AACLU,eAAOC,KAAKC,GAAL,CAASJ,gBAAT,EAA2BT,QAAQ,CAAnC,CADF;AAELc,cAAMd,QAAQ;AAFT,OAAP;AAID,KARD,MAQO,IACLA,UAAUS,gBAAV,IACAJ,8BAA8BG,wBAFzB,EAGL;AACA,aAAO;AACLG,eAAOX,QAAQ,CADV;AAELc,cAAMF,KAAKG,GAAL,CAASL,cAAT,EAAyBV,QAAQ,CAAjC;AAFD,OAAP;AAID,KARM,MAQA,IACLA,UAAUS,gBAAV,IACAJ,4BAA4BG,wBAFvB,EAGL;AACA,aAAO,IAAP;AACD,KALM,MAKA;AACL,aAAO,EAAEG,OAAOX,QAAQ,CAAjB,EAAoBc,MAAMd,QAAQ,CAAlC,EAAP;AACD;AACF,GAlCD,MAkCO;AACL,WAAO,EAAEW,OAAOX,QAAQ,CAAjB,EAAoBc,MAAMd,QAAQ,CAAlC,EAAP;AACD;AACF;;kBAEcJ,yC","sourcesContent":["/* @flow */\n\nimport type {\n  NavigationSceneRendererProps,\n  NavigationScene,\n  SceneIndicesForInterpolationInputRange,\n} from '../TypeDefinition';\n\nfunction getSceneIndicesForInterpolationInputRange(\n  props: NavigationSceneRendererProps\n): SceneIndicesForInterpolationInputRange | null {\n  const { scene, scenes } = props;\n  const index = scene.index;\n  const lastSceneIndexInScenes = scenes.length - 1;\n  const isBack = !scenes[lastSceneIndexInScenes].isActive;\n\n  if (isBack) {\n    const currentSceneIndexInScenes = scenes.findIndex(\n      (item: NavigationScene) => item === scene\n    );\n    const targetSceneIndexInScenes = scenes.findIndex(\n      (item: NavigationScene) => item.isActive\n    );\n    const targetSceneIndex = scenes[targetSceneIndexInScenes].index;\n    const lastSceneIndex = scenes[lastSceneIndexInScenes].index;\n\n    if (\n      index !== targetSceneIndex &&\n      currentSceneIndexInScenes === lastSceneIndexInScenes\n    ) {\n      return {\n        first: Math.min(targetSceneIndex, index - 1),\n        last: index + 1,\n      };\n    } else if (\n      index === targetSceneIndex &&\n      currentSceneIndexInScenes === targetSceneIndexInScenes\n    ) {\n      return {\n        first: index - 1,\n        last: Math.max(lastSceneIndex, index + 1),\n      };\n    } else if (\n      index === targetSceneIndex ||\n      currentSceneIndexInScenes > targetSceneIndexInScenes\n    ) {\n      return null;\n    } else {\n      return { first: index - 1, last: index + 1 };\n    }\n  } else {\n    return { first: index - 1, last: index + 1 };\n  }\n}\n\nexport default getSceneIndicesForInterpolationInputRange;\n"]}]