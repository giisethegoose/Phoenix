["b39b17ab273bbf31ca93c759a7030e6b34eab2e1","cd217079f3b20e81a31da2388e6da6336890120b",["react-native","base-64","utf8"],[43,123,195,252,283,312],{"version":3,"sources":["/home/giise/candidtwo/node_modules/react-native-fs/FS.common.js"],"names":["RNFSManager","require","NativeModules","NativeAppEventEmitter","DeviceEventEmitter","base64","utf8","isIOS","Platform","OS","RNFSFileTypeRegular","RNFSFileTypeDirectory","jobId","getJobId","normalizeFilePath","path","startsWith","slice","readFileGeneric","filepath","encodingOrOptions","command","options","encoding","then","b64","contents","decode","Error","String","readDirGeneric","dirpath","files","map","ctime","file","Date","mtime","name","size","isFile","type","isDirectory","RNFS","mkdir","moveFile","destPath","copyFile","pathForBundle","bundleNamed","pathForGroup","groupName","getFSInfo","getAllExternalFilesDirs","unlink","exists","stopDownload","resumeDownload","isResumable","stopUpload","completeHandlerIOS","readDir","readDirAssets","existsAssets","readdir","setReadable","readable","ownerOnly","result","stat","mode","readFile","read","length","position","readFileAssets","hash","algorithm","copyFileAssets","copyAssetsFileIOS","imageUri","width","height","scale","compression","resizeMode","copyAssetsVideoIOS","writeFile","encode","appendFile","write","undefined","downloadFile","fromUrl","toFile","headers","background","progressDivider","readTimeout","connectionTimeout","subscriptions","begin","push","addListener","progress","resumable","bridgeOptions","promise","forEach","sub","remove","res","uploadFiles","Promise","reject","toUrl","Array","isArray","fields","method","beginCallback","Function","progressCallback","touch","ctimeTime","getTime","MainBundlePath","RNFSMainBundlePath","CachesDirectoryPath","RNFSCachesDirectoryPath","DocumentDirectoryPath","RNFSDocumentDirectoryPath","ExternalDirectoryPath","RNFSExternalDirectoryPath","ExternalStorageDirectoryPath","RNFSExternalStorageDirectoryPath","TemporaryDirectoryPath","RNFSTemporaryDirectoryPath","LibraryDirectoryPath","RNFSLibraryDirectoryPath","PicturesDirectoryPath","RNFSPicturesDirectoryPath","module","exports"],"mappings":"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","sourcesContent":["/**\n * React Native FS\n * @flow\n */\n\n'use strict';\n\n// This file supports both iOS and Android\n\nvar RNFSManager = require('react-native').NativeModules.RNFSManager;\n\nvar NativeAppEventEmitter = require('react-native').NativeAppEventEmitter;  // iOS\nvar DeviceEventEmitter = require('react-native').DeviceEventEmitter;        // Android\nvar base64 = require('base-64');\nvar utf8 = require('utf8');\nvar isIOS = require('react-native').Platform.OS === 'ios';\n\nvar RNFSFileTypeRegular = RNFSManager.RNFSFileTypeRegular;\nvar RNFSFileTypeDirectory = RNFSManager.RNFSFileTypeDirectory;\n\nvar jobId = 0;\n\nvar getJobId = () => {\n  jobId += 1;\n  return jobId;\n};\n\nvar normalizeFilePath = (path: string) => (path.startsWith('file://') ? path.slice(7) : path);\n\ntype MkdirOptions = {\n  NSURLIsExcludedFromBackupKey?: boolean; // iOS only\n};\n\ntype ReadDirItem = {\n  ctime: ?Date;    // The creation date of the file (iOS only)\n  mtime: ?Date;    // The last modified date of the file\n  name: string;     // The name of the item\n  path: string;     // The absolute path to the item\n  size: string;     // Size in bytes\n  isFile: () => boolean;        // Is the file just a file?\n  isDirectory: () => boolean;   // Is the file a directory?\n};\n\ntype StatResult = {\n  name: string;     // The name of the item\n  path: string;     // The absolute path to the item\n  size: string;     // Size in bytes\n  mode: number;     // UNIX file mode\n  ctime: number;    // Created date\n  mtime: number;    // Last modified date\n  isFile: () => boolean;        // Is the file just a file?\n  isDirectory: () => boolean;   // Is the file a directory?\n};\n\ntype Headers = { [name: string]: string };\ntype Fields = { [name: string]: string };\n\ntype DownloadFileOptions = {\n  fromUrl: string;          // URL to download file from\n  toFile: string;           // Local filesystem path to save the file to\n  headers?: Headers;        // An object of headers to be passed to the server\n  background?: boolean;     // Continue the download in the background after the app terminates (iOS only)\n  discretionary?: boolean;  // Allow the OS to control the timing and speed of the download to improve perceived performance  (iOS only)\n  progressDivider?: number;\n  begin?: (res: DownloadBeginCallbackResult) => void;\n  progress?: (res: DownloadProgressCallbackResult) => void;\n  resumable?: () => void;    // only supported on iOS yet\n  connectionTimeout?: number; // only supported on Android yet\n  readTimeout?: number;       // supported on Android and iOS\n};\n\ntype DownloadBeginCallbackResult = {\n  jobId: number;          // The download job ID, required if one wishes to cancel the download. See `stopDownload`.\n  statusCode: number;     // The HTTP status code\n  contentLength: number;  // The total size in bytes of the download resource\n  headers: Headers;       // The HTTP response headers from the server\n};\n\ntype DownloadProgressCallbackResult = {\n  jobId: number;          // The download job ID, required if one wishes to cancel the download. See `stopDownload`.\n  contentLength: number;  // The total size in bytes of the download resource\n  bytesWritten: number;   // The number of bytes written to the file so far\n};\n\ntype DownloadResult = {\n  jobId: number;          // The download job ID, required if one wishes to cancel the download. See `stopDownload`.\n  statusCode: number;     // The HTTP status code\n  bytesWritten: number;   // The number of bytes written to the file\n};\n\ntype UploadFileOptions = {\n  toUrl: string;            // URL to upload file to\n  files: UploadFileItem[];  // An array of objects with the file information to be uploaded.\n  headers?: Headers;        // An object of headers to be passed to the server\n  fields?: Fields;          // An object of fields to be passed to the server\n  method?: string;          // Default is 'POST', supports 'POST' and 'PUT'\n  begin?: (res: UploadBeginCallbackResult) => void;\n  progress?: (res: UploadProgressCallbackResult) => void;\n};\n\ntype UploadFileItem = {\n  name: string;       // Name of the file, if not defined then filename is used\n  filename: string;   // Name of file\n  filepath: string;   // Path to file\n  filetype: string;   // The mimetype of the file to be uploaded, if not defined it will get mimetype from `filepath` extension\n};\n\ntype UploadBeginCallbackResult = {\n  jobId: number;        // The upload job ID, required if one wishes to cancel the upload. See `stopUpload`.\n};\n\ntype UploadProgressCallbackResult = {\n  jobId: number;                      // The upload job ID, required if one wishes to cancel the upload. See `stopUpload`.\n  totalBytesExpectedToSend: number;   // The total number of bytes that will be sent to the server\n  totalBytesSent: number;             // The number of bytes sent to the server\n};\n\ntype UploadResult = {\n  jobId: number;        // The upload job ID, required if one wishes to cancel the upload. See `stopUpload`.\n  statusCode: number;   // The HTTP status code\n  headers: Headers;     // The HTTP response headers from the server\n  body: string;         // The HTTP response body\n};\n\ntype FSInfoResult = {\n  totalSpace: number;   // The total amount of storage space on the device (in bytes).\n  freeSpace: number;    // The amount of available storage space on the device (in bytes).\n};\n\n/**\n * Generic function used by readFile and readFileAssets\n */\nfunction readFileGeneric(filepath: string, encodingOrOptions:?string, command: Function) {\n  var options = {\n    encoding: 'utf8'\n  };\n\n  if (encodingOrOptions) {\n    if (typeof encodingOrOptions === 'string') {\n      options.encoding = encodingOrOptions;\n    } else if (typeof encodingOrOptions === 'object') {\n      options = encodingOrOptions;\n    }\n  }\n\n  return command(normalizeFilePath(filepath)).then((b64) => {\n    var contents;\n\n    if (options.encoding === 'utf8') {\n      contents = utf8.decode(base64.decode(b64));\n    } else if (options.encoding === 'ascii') {\n      contents = base64.decode(b64);\n    } else if (options.encoding === 'base64') {\n      contents = b64;\n    } else {\n      throw new Error('Invalid encoding type \"' + String(options.encoding) + '\"');\n    }\n\n    return contents;\n  });\n}\n\n/**\n * Generic function used by readDir and readDirAssets\n */\nfunction readDirGeneric(dirpath: string, command: Function) {\n  return command(normalizeFilePath(dirpath)).then(files => {\n    return files.map(file => ({\n      ctime: file.ctime && new Date(file.ctime * 1000) || null,\n      mtime: file.mtime && new Date(file.mtime * 1000) || null,\n      name: file.name,\n      path: file.path,\n      size: file.size,\n      isFile: () => file.type === RNFSFileTypeRegular,\n      isDirectory: () => file.type === RNFSFileTypeDirectory,\n    }));\n  });\n}\n\nvar RNFS = {\n\n  mkdir(filepath: string, options: MkdirOptions = {}): Promise<void> {\n    return RNFSManager.mkdir(normalizeFilePath(filepath), options).then(() => void 0);\n  },\n\n  moveFile(filepath: string, destPath: string): Promise<void> {\n    return RNFSManager.moveFile(normalizeFilePath(filepath), normalizeFilePath(destPath)).then(() => void 0);\n  },\n\n  copyFile(filepath: string, destPath: string): Promise<void> {\n    return RNFSManager.copyFile(normalizeFilePath(filepath), normalizeFilePath(destPath)).then(() => void 0);\n  },\n\n  pathForBundle(bundleNamed: string): Promise<string> {\n    return RNFSManager.pathForBundle(bundleNamed);\n  },\n\n  pathForGroup(groupName: string): Promise<string> {\n    return RNFSManager.pathForGroup(groupName);\n  },\n\n  getFSInfo(): Promise<FSInfoResult> {\n    return RNFSManager.getFSInfo();\n  },\n\n  getAllExternalFilesDirs(): Promise<string> {\n    return RNFSManager.getAllExternalFilesDirs();\n  },\n\n  unlink(filepath: string): Promise<void> {\n    return RNFSManager.unlink(normalizeFilePath(filepath)).then(() => void 0);\n  },\n\n  exists(filepath: string): Promise<boolean> {\n    return RNFSManager.exists(normalizeFilePath(filepath));\n  },\n\n  stopDownload(jobId: number): void {\n    RNFSManager.stopDownload(jobId);\n  },\n\n  resumeDownload(jobId: number): void {\n      RNFSManager.resumeDownload(jobId);\n  },\n\n  isResumable(jobId: number): Promise<bool> {\n      return RNFSManager.isResumable(jobId);\n  },\n\n  stopUpload(jobId: number): void {\n    RNFSManager.stopUpload(jobId);\n  },\n\n  completeHandlerIOS(jobId: number): void {\n    return RNFSManager.completeHandlerIOS(jobId);\n  },\n\n  readDir(dirpath: string): Promise<ReadDirItem[]> {\n    return readDirGeneric(dirpath, RNFSManager.readDir);\n  },\n\n  // Android-only\n  readDirAssets(dirpath: string): Promise<ReadDirItem[]> {\n    if (!RNFSManager.readDirAssets) {\n      throw new Error('readDirAssets is not available on this platform');\n    }\n    return readDirGeneric(dirpath, RNFSManager.readDirAssets);\n  },\n\n  // Android-only\n  existsAssets(filepath: string) {\n    if (!RNFSManager.existsAssets) {\n      throw new Error('existsAssets is not available on this platform');\n    }\n    return RNFSManager.existsAssets(filepath);\n  },\n\n  // Node style version (lowercase d). Returns just the names\n  readdir(dirpath: string): Promise<string[]> {\n    return RNFS.readDir(normalizeFilePath(dirpath)).then(files => {\n      return files.map(file => file.name);\n    });\n  },\n\n  // setReadable for Android\n  setReadable(filepath : string, readable: boolean, ownerOnly: boolean) : Promise<boolean> {\n    return RNFSManager.setReadable(filepath, readable, ownerOnly).then( (result) => {\n      return result;\n    })\n  },\n\n  stat(filepath: string): Promise<StatResult> {\n    return RNFSManager.stat(normalizeFilePath(filepath)).then((result) => {\n      return {\n        'ctime': new Date(result.ctime * 1000),\n        'mtime': new Date(result.mtime * 1000),\n        'size': result.size,\n        'mode': result.mode,\n        isFile: () => result.type === RNFSFileTypeRegular,\n        isDirectory: () => result.type === RNFSFileTypeDirectory,\n      };\n    });\n  },\n\n  readFile(filepath: string, encodingOrOptions?: any): Promise<string> {\n    return readFileGeneric(filepath, encodingOrOptions, RNFSManager.readFile);\n  },\n\n  read(filepath: string, length: number = 0, position: number = 0, encodingOrOptions?: any): Promise<string> {\n  \tvar options = {\n      encoding: 'utf8'\n    };\n\n    if (encodingOrOptions) {\n      if (typeof encodingOrOptions === 'string') {\n        options.encoding = encodingOrOptions;\n      } else if (typeof encodingOrOptions === 'object') {\n        options = encodingOrOptions;\n      }\n    }\n\n    return RNFSManager.read(normalizeFilePath(filepath), length, position).then((b64) => {\n      var contents;\n\n      if (options.encoding === 'utf8') {\n        contents = utf8.decode(base64.decode(b64));\n      } else if (options.encoding === 'ascii') {\n        contents = base64.decode(b64);\n      } else if (options.encoding === 'base64') {\n        contents = b64;\n      } else {\n        throw new Error('Invalid encoding type \"' + String(options.encoding) + '\"');\n      }\n\n      return contents;\n    });\n  },\n\n  // Android only\n  readFileAssets(filepath: string, encodingOrOptions?: any): Promise<string> {\n    if (!RNFSManager.readFileAssets) {\n      throw new Error('readFileAssets is not available on this platform');\n    }\n    return readFileGeneric(filepath, encodingOrOptions, RNFSManager.readFileAssets);\n  },\n\n  hash(filepath: string, algorithm: string): Promise<string> {\n    return RNFSManager.hash(filepath, algorithm);\n  },\n\n  // Android only\n  copyFileAssets(filepath: string, destPath:string) {\n    if (!RNFSManager.copyFileAssets) {\n      throw new Error('copyFileAssets is not available on this platform');\n    }\n    return RNFSManager.copyFileAssets(normalizeFilePath(filepath), normalizeFilePath(destPath)).then(() => void 0);\n  },\n\n  // iOS only\n  // Copies fotos from asset-library (camera-roll) to a specific location\n  // with a given width or height\n  // @see: https://developer.apple.com/reference/photos/phimagemanager/1616964-requestimageforasset\n  copyAssetsFileIOS(imageUri: string, destPath: string, width: number, height: number,\n    scale : number = 1.0, compression : number = 1.0, resizeMode : string = 'contain'  ): Promise<string> {\n    return RNFSManager.copyAssetsFileIOS(imageUri, destPath, width, height, scale, compression, resizeMode );\n  },\n\n  // iOS only\n  // Copies fotos from asset-library (camera-roll) to a specific location\n  // with a given width or height\n  // @see: https://developer.apple.com/reference/photos/phimagemanager/1616964-requestimageforasset\n  copyAssetsVideoIOS(imageUri: string, destPath: string): Promise<string> {\n    return RNFSManager.copyAssetsVideoIOS(imageUri, destPath);\n  },\n\n  writeFile(filepath: string, contents: string, encodingOrOptions?: any): Promise<void> {\n    var b64;\n\n    var options = {\n      encoding: 'utf8'\n    };\n\n    if (encodingOrOptions) {\n      if (typeof encodingOrOptions === 'string') {\n        options.encoding = encodingOrOptions;\n      } else if (typeof encodingOrOptions === 'object') {\n        options = encodingOrOptions;\n      }\n    }\n\n    if (options.encoding === 'utf8') {\n      b64 = base64.encode(utf8.encode(contents));\n    } else if (options.encoding === 'ascii') {\n      b64 = base64.encode(contents);\n    } else if (options.encoding === 'base64') {\n      b64 = contents;\n    } else {\n      throw new Error('Invalid encoding type \"' + options.encoding + '\"');\n    }\n\n    return RNFSManager.writeFile(normalizeFilePath(filepath), b64).then(() => void 0);\n  },\n\n  appendFile(filepath: string, contents: string, encodingOrOptions?: any): Promise<void> {\n    var b64;\n\n    var options = {\n      encoding: 'utf8'\n    };\n\n    if (encodingOrOptions) {\n      if (typeof encodingOrOptions === 'string') {\n        options.encoding = encodingOrOptions;\n      } else if (typeof encodingOrOptions === 'object') {\n        options = encodingOrOptions;\n      }\n    }\n\n    if (options.encoding === 'utf8') {\n      b64 = base64.encode(utf8.encode(contents));\n    } else if (options.encoding === 'ascii') {\n      b64 = base64.encode(contents);\n    } else if (options.encoding === 'base64') {\n      b64 = contents;\n    } else {\n      throw new Error('Invalid encoding type \"' + options.encoding + '\"');\n    }\n\n    return RNFSManager.appendFile(normalizeFilePath(filepath), b64);\n  },\n\n  write(filepath: string, contents: string, position?: number, encodingOrOptions?: any): Promise<void> {\n    var b64;\n\n    var options = {\n      encoding: 'utf8'\n    };\n\n    if (encodingOrOptions) {\n      if (typeof encodingOrOptions === 'string') {\n        options.encoding = encodingOrOptions;\n      } else if (typeof encodingOrOptions === 'object') {\n        options = encodingOrOptions;\n      }\n    }\n\n    if (options.encoding === 'utf8') {\n      b64 = base64.encode(utf8.encode(contents));\n    } else if (options.encoding === 'ascii') {\n      b64 = base64.encode(contents);\n    } else if (options.encoding === 'base64') {\n      b64 = contents;\n    } else {\n      throw new Error('Invalid encoding type \"' + options.encoding + '\"');\n    }\n\n    if (position === undefined) {\n      position = -1;\n    }\n\n    return RNFSManager.write(normalizeFilePath(filepath), b64, position).then(() => void 0);\n  },\n\n  downloadFile(options: DownloadFileOptions): { jobId: number, promise: Promise<DownloadResult> } {\n    if (typeof options !== 'object') throw new Error('downloadFile: Invalid value for argument `options`');\n    if (typeof options.fromUrl !== 'string') throw new Error('downloadFile: Invalid value for property `fromUrl`');\n    if (typeof options.toFile !== 'string') throw new Error('downloadFile: Invalid value for property `toFile`');\n    if (options.headers && typeof options.headers !== 'object') throw new Error('downloadFile: Invalid value for property `headers`');\n    if (options.background && typeof options.background !== 'boolean') throw new Error('downloadFile: Invalid value for property `background`');\n    if (options.progressDivider && typeof options.progressDivider !== 'number') throw new Error('downloadFile: Invalid value for property `progressDivider`');\n    if (options.readTimeout && typeof options.readTimeout !== 'number') throw new Error('downloadFile: Invalid value for property `readTimeout`');\n    if (options.connectionTimeout && typeof options.connectionTimeout !== 'number') throw new Error('downloadFile: Invalid value for property `connectionTimeout`');\n\n    var jobId = getJobId();\n    var subscriptions = [];\n\n    if (options.begin) {\n      subscriptions.push(NativeAppEventEmitter.addListener('DownloadBegin-' + jobId, options.begin));\n    }\n\n    if (options.progress) {\n      subscriptions.push(NativeAppEventEmitter.addListener('DownloadProgress-' + jobId, options.progress));\n    }\n\n    if (options.resumable) {\n      subscriptions.push(NativeAppEventEmitter.addListener('DownloadResumable-' + jobId, options.resumable));\n    }\n\n    var bridgeOptions = {\n      jobId: jobId,\n      fromUrl: options.fromUrl,\n      toFile: normalizeFilePath(options.toFile),\n      headers: options.headers || {},\n      background: !!options.background,\n      progressDivider: options.progressDivider || 0,\n      readTimeout: options.readTimeout || 15000,\n      connectionTimeout: options.connectionTimeout || 5000\n    };\n\n    return {\n      jobId,\n      promise: RNFSManager.downloadFile(bridgeOptions).then(res => {\n        subscriptions.forEach(sub => sub.remove());\n        return res;\n      })\n    };\n  },\n\n  uploadFiles(options: UploadFileOptions): { jobId: number, promise: Promise<UploadResult> } {\n    if (!RNFSManager.uploadFiles) {\n      return {\n        jobId: -1,\n        promise: Promise.reject(new Error('`uploadFiles` is unsupported on this platform'))\n      };\n    }\n\n    var jobId = getJobId();\n    var subscriptions = [];\n\n    if (typeof options !== 'object') throw new Error('uploadFiles: Invalid value for argument `options`');\n    if (typeof options.toUrl !== 'string') throw new Error('uploadFiles: Invalid value for property `toUrl`');\n    if (!Array.isArray(options.files)) throw new Error('uploadFiles: Invalid value for property `files`');\n    if (options.headers && typeof options.headers !== 'object') throw new Error('uploadFiles: Invalid value for property `headers`');\n    if (options.fields && typeof options.fields !== 'object') throw new Error('uploadFiles: Invalid value for property `fields`');\n    if (options.method && typeof options.method !== 'string') throw new Error('uploadFiles: Invalid value for property `method`');\n\n    if (options.begin) {\n      subscriptions.push(NativeAppEventEmitter.addListener('UploadBegin-' + jobId, options.begin));\n    }\n    if (options.beginCallback && options.beginCallback instanceof Function) {\n      // Deprecated\n      subscriptions.push(NativeAppEventEmitter.addListener('UploadBegin-' + jobId, options.beginCallback));\n    }\n\n    if (options.progress) {\n      subscriptions.push(NativeAppEventEmitter.addListener('UploadProgress-' + jobId, options.progress));\n    }\n    if (options.progressCallback && options.progressCallback instanceof Function) {\n      // Deprecated\n      subscriptions.push(NativeAppEventEmitter.addListener('UploadProgress-' + jobId, options.progressCallback));\n    }\n\n    var bridgeOptions = {\n      jobId: jobId,\n      toUrl: options.toUrl,\n      files: options.files,\n      headers: options.headers || {},\n      fields: options.fields || {},\n      method: options.method || 'POST'\n    };\n\n    return {\n      jobId,\n      promise: RNFSManager.uploadFiles(bridgeOptions).then(res => {\n        subscriptions.forEach(sub => sub.remove());\n        return res;\n      })\n    };\n  },\n\n  touch(filepath: string, mtime?: Date, ctime?: Date): Promise<void> {\n    if (ctime && !(ctime instanceof Date)) throw new Error('touch: Invalid value for argument `ctime`');\n    if (mtime && !(mtime instanceof Date)) throw new Error('touch: Invalid value for argument `mtime`');\n    var ctimeTime = 0;\n    if (isIOS) {\n      ctimeTime = ctime && ctime.getTime();\n    }\n    return RNFSManager.touch(\n      normalizeFilePath(filepath),\n      mtime && mtime.getTime(),\n      ctimeTime\n    );\n  },\n\n  MainBundlePath: RNFSManager.RNFSMainBundlePath,\n  CachesDirectoryPath: RNFSManager.RNFSCachesDirectoryPath,\n  DocumentDirectoryPath: RNFSManager.RNFSDocumentDirectoryPath,\n  ExternalDirectoryPath: RNFSManager.RNFSExternalDirectoryPath,\n  ExternalStorageDirectoryPath: RNFSManager.RNFSExternalStorageDirectoryPath,\n  TemporaryDirectoryPath: RNFSManager.RNFSTemporaryDirectoryPath,\n  LibraryDirectoryPath: RNFSManager.RNFSLibraryDirectoryPath,\n  PicturesDirectoryPath: RNFSManager.RNFSPicturesDirectoryPath\n\n};\n\nmodule.exports = RNFS;\n"]}]