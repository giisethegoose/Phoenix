["77b61b36a8b8362350a1b062963868af59d6d742","bcb5b063665c7ef378a7d924229d2701e6f49edc",["react","./../../../../react-transform-hmr/lib/index.js","../../utils/invariant","../AnimatedValueSubscription"],[88,167,1143,1266],{"version":3,"sources":["/home/giise/candidtwo/node_modules/react-navigation/src/views/CardStack/PointerEventsContainer.js"],"names":["React","create","MIN_POSITION_OFFSET","Component","props","context","_pointerEvents","_computePointerEvents","_onPositionChange","bind","_onComponentRef","_bindPosition","_positionListener","remove","nextProps","component","_component","setNativeProps","position","pointerEvents","navigation","scene","isStale","state","index","offset","__getAnimatedValue","Math","abs","Container"],"mappings":";;;;;;IAEYA,K;;;;;;;;;;kBAiBYC,M;;AAfxB;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;YAJYD,K;;;;;;;;;AAUZ,IAAME,sBAAsB,IAA5B;;AAOe,SAASD,MAAT,CACbE,SADa,EAEW;AAAA;AAAA;;AAQtB,uBAAYC,KAAZ,EAA0BC,OAA1B,EAAwC;AAAA;;AAAA,wHAChCD,KADgC,EACzBC,OADyB;;AAEtC,YAAKC,cAAL,GAAsB,MAAKC,qBAAL,EAAtB;AAFsC;AAGvC;;AAXqB;AAAA;AAAA,2CAaK;AACzB,aAAKC,iBAAL,GAAyB,KAAKA,iBAAL,CAAuBC,IAAvB,CAA4B,IAA5B,CAAzB;AACA,aAAKC,eAAL,GAAuB,KAAKA,eAAL,CAAqBD,IAArB,CAA0B,IAA1B,CAAvB;AACD;AAhBqB;AAAA;AAAA,0CAkBI;AACxB,aAAKE,aAAL,CAAmB,KAAKP,KAAxB;AACD;AApBqB;AAAA;AAAA,6CAsBO;AAC3B,aAAKQ,iBAAL,IAA0B,KAAKA,iBAAL,CAAuBC,MAAvB,EAA1B;AACD;AAxBqB;AAAA;AAAA,gDA0BIC,SA1BJ,EA0B4B;AAChD,aAAKH,aAAL,CAAmBG,SAAnB;AACD;AA5BqB;AAAA;AAAA,+BA8Bb;AACP,aAAKR,cAAL,GAAsB,KAAKC,qBAAL,EAAtB;AACA,eACE,oBAAC,SAAD,eACM,KAAKH,KADX;AAEE,yBAAe,KAAKE,cAFtB;AAGE,0BAAgB,KAAKI;AAHvB,WADF;AAOD;AAvCqB;AAAA;AAAA,sCAyCNK,SAzCM,EAyCgB;AACpC,aAAKC,UAAL,GAAkBD,SAAlB;AACA,YAAIA,SAAJ,EAAe;AACb,mCACE,OAAOA,UAAUE,cAAjB,KAAoC,UADtC,EAEE,kDAFF;AAID;AACF;AAjDqB;AAAA;AAAA,oCAmDRb,KAnDQ,EAmDmC;AACvD,aAAKQ,iBAAL,IAA0B,KAAKA,iBAAL,CAAuBC,MAAvB,EAA1B;AACA,aAAKD,iBAAL,GAAyB,wCACvBR,MAAMc,QADiB,EAEvB,KAAKV,iBAFkB,CAAzB;AAID;AAzDqB;AAAA;AAAA,0CA2DI;AACxB,YAAI,KAAKQ,UAAT,EAAqB;AACnB,cAAMG,gBAAgB,KAAKZ,qBAAL,EAAtB;AACA,cAAI,KAAKD,cAAL,KAAwBa,aAA5B,EAA2C;AACzC,iBAAKb,cAAL,GAAsBa,aAAtB;AACA,iBAAKH,UAAL,CAAgBC,cAAhB,CAA+B,EAAEE,4BAAF,EAA/B;AACD;AACF;AACF;AAnEqB;AAAA;AAAA,8CAqEU;AAAA,qBACU,KAAKf,KADf;AAAA,YACtBgB,UADsB,UACtBA,UADsB;AAAA,YACVF,QADU,UACVA,QADU;AAAA,YACAG,KADA,UACAA,KADA;;;AAG9B,YAAIA,MAAMC,OAAN,IAAiBF,WAAWG,KAAX,CAAiBC,KAAjB,KAA2BH,MAAMG,KAAtD,EAA6D;AAE3D,iBAAOH,MAAMG,KAAN,GAAcJ,WAAWG,KAAX,CAAiBC,KAA/B,GAAuC,UAAvC,GAAoD,MAA3D;AACD;;AAED,YAAMC,SAASP,SAASQ,kBAAT,KAAgCN,WAAWG,KAAX,CAAiBC,KAAhE;AACA,YAAIG,KAAKC,GAAL,CAASH,MAAT,IAAmBvB,mBAAvB,EAA4C;AAI1C,iBAAO,UAAP;AACD;;AAED,eAAO,MAAP;AACD;AAtFqB;;AAAA;AAAA,IACAF,MAAMG,SADN;;AAwFxB,SAAO0B,SAAP;AACD","sourcesContent":["/* @flow */\n\nimport * as React from 'react';\n\nimport invariant from '../../utils/invariant';\n\nimport AnimatedValueSubscription from '../AnimatedValueSubscription';\n\nimport type { NavigationSceneRendererProps } from '../../TypeDefinition';\n\ntype Props = NavigationSceneRendererProps;\n\nconst MIN_POSITION_OFFSET = 0.01;\n\n/**\n * Create a higher-order component that automatically computes the\n * `pointerEvents` property for a component whenever navigation position\n * changes.\n */\nexport default function create(\n  Component: React.ComponentType<*>\n): React.ComponentType<*> {\n  class Container extends React.Component<Props> {\n    _component: any;\n    _onComponentRef: (view: any) => void;\n    _onPositionChange: (data: { value: number }) => void;\n    _pointerEvents: string;\n    _positionListener: ?AnimatedValueSubscription;\n\n    constructor(props: Props, context: any) {\n      super(props, context);\n      this._pointerEvents = this._computePointerEvents();\n    }\n\n    componentWillMount(): void {\n      this._onPositionChange = this._onPositionChange.bind(this);\n      this._onComponentRef = this._onComponentRef.bind(this);\n    }\n\n    componentDidMount(): void {\n      this._bindPosition(this.props);\n    }\n\n    componentWillUnmount(): void {\n      this._positionListener && this._positionListener.remove();\n    }\n\n    componentWillReceiveProps(nextProps: Props): void {\n      this._bindPosition(nextProps);\n    }\n\n    render() {\n      this._pointerEvents = this._computePointerEvents();\n      return (\n        <Component\n          {...this.props}\n          pointerEvents={this._pointerEvents}\n          onComponentRef={this._onComponentRef}\n        />\n      );\n    }\n\n    _onComponentRef(component: any): void {\n      this._component = component;\n      if (component) {\n        invariant(\n          typeof component.setNativeProps === 'function',\n          'component must implement method `setNativeProps`'\n        );\n      }\n    }\n\n    _bindPosition(props: NavigationSceneRendererProps): void {\n      this._positionListener && this._positionListener.remove();\n      this._positionListener = new AnimatedValueSubscription(\n        props.position,\n        this._onPositionChange\n      );\n    }\n\n    _onPositionChange(): void {\n      if (this._component) {\n        const pointerEvents = this._computePointerEvents();\n        if (this._pointerEvents !== pointerEvents) {\n          this._pointerEvents = pointerEvents;\n          this._component.setNativeProps({ pointerEvents });\n        }\n      }\n    }\n\n    _computePointerEvents(): string {\n      const { navigation, position, scene } = this.props;\n\n      if (scene.isStale || navigation.state.index !== scene.index) {\n        // The scene isn't focused.\n        return scene.index > navigation.state.index ? 'box-only' : 'none';\n      }\n\n      const offset = position.__getAnimatedValue() - navigation.state.index;\n      if (Math.abs(offset) > MIN_POSITION_OFFSET) {\n        // The positon is still away from scene's index.\n        // Scene's children should not receive touches until the position\n        // is close enough to scene's index.\n        return 'box-only';\n      }\n\n      return 'auto';\n    }\n  }\n  return Container;\n}\n"]}]