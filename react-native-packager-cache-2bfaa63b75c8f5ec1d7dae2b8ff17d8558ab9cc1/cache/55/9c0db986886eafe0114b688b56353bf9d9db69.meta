["278e25abf3ca40ffac7f75a6170d11e3dedf40ca","91e369842506f6253b4d87d152806ac9b9204487",["react","./../../../../react-transform-hmr/lib/index.js","ColorPropType","Image","React","prop-types","StaticContainer.react","StyleSheet","View","ViewPropTypes","requireNativeComponent"],[38,118,2765,2803,2833,2867,2912,2963,2997,3035,3091],{"version":3,"sources":["/home/giise/candidtwo/node_modules/react-native/Libraries/Components/TabBarIOS/TabBarItemIOS.ios.js"],"names":["ColorPropType","require","Image","React","PropTypes","StaticContainer","StyleSheet","View","ViewPropTypes","requireNativeComponent","state","hasBeenSelected","props","selected","setState","nextProps","style","children","tabContents","styles","tab","Component","propTypes","badge","oneOfType","string","number","badgeColor","systemIcon","oneOf","icon","source","selectedIcon","onPress","func","renderAsOriginal","bool","title","isTVSelectable","create","position","top","right","bottom","left","RCTTabBarItem","TabBarItemIOS","module","exports"],"mappings":";AAWA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAIA,gBAAgBC,OAAhB,iBAAJ;AACA,IAAIC,QAAQD,OAAR,SAAJ;AACA,IAAIE,QAAQF,OAAR,SAAJ;AACA,IAAMG,YAAYH,OAAZ,cAAN;AACA,IAAII,kBAAkBJ,OAAlB,yBAAJ;AACA,IAAIK,aAAaL,OAAb,cAAJ;AACA,IAAIM,OAAON,OAAP,QAAJ;;AAEA,IAAMO,gBAAgBP,OAAhB,iBAAN;;AAEA,IAAIQ,yBAAyBR,OAAzB,0BAAJ;;;;;;;;;;;;;;;;oMA6EES,K,GAAQ;AACNC,uBAAiB;AADX,K;;;;;yCAIa;AACnB,UAAI,KAAKC,KAAL,CAAWC,QAAf,EAAyB;AACvB,aAAKC,QAAL,CAAc,EAACH,iBAAiB,IAAlB,EAAd;AACD;AACF;;;8CAEyBI,S,EAAmC;AAC3D,UAAI,KAAKL,KAAL,CAAWC,eAAX,IAA8BI,UAAUF,QAA5C,EAAsD;AACpD,aAAKC,QAAL,CAAc,EAACH,iBAAiB,IAAlB,EAAd;AACD;AACF;;;6BAEQ;AAAA,mBAC2B,KAAKC,KADhC;AAAA,UACFI,KADE,UACFA,KADE;AAAA,UACKC,QADL,UACKA,QADL;AAAA,UACkBL,KADlB;;AAKP,UAAI,KAAKF,KAAL,CAAWC,eAAf,EAAgC;AAC9B,YAAIO,cACF;AAAC,yBAAD;AAAA,YAAiB,cAAc,KAAKN,KAAL,CAAWC,QAA1C;AACGI;AADH,SADF;AAID,OALD,MAKO;AACL,YAAIC,cAAc,oBAAC,IAAD,OAAlB;AACD;;AAED,aACE;AAAC,qBAAD;AAAA,qBACMN,KADN;AAEE,iBAAO,CAACO,OAAOC,GAAR,EAAaJ,KAAb,CAFT;AAGGE;AAHH,OADF;AAOD;;;;EAhHyBf,MAAMkB,S,UACzBC,S,gBACFd,a;AAIHe,SAAOnB,UAAUoB,SAAV,CAAoB,CACzBpB,UAAUqB,MADe,EAEzBrB,UAAUsB,MAFe,CAApB,C;;AAOPC,cAAY3B,a;;AAMZ4B,cAAYxB,UAAUyB,KAAV,CAAgB,CAC1B,WAD0B,EAE1B,UAF0B,EAG1B,WAH0B,EAI1B,WAJ0B,EAK1B,UAL0B,EAM1B,SAN0B,EAO1B,MAP0B,EAQ1B,aAR0B,EAS1B,aAT0B,EAU1B,SAV0B,EAW1B,QAX0B,EAY1B,WAZ0B,CAAhB,C;;AAiBZC,QAAM5B,MAAMoB,SAAN,CAAgBS,M;;AAKtBC,gBAAc9B,MAAMoB,SAAN,CAAgBS,M;;AAK9BE,WAAS7B,UAAU8B,I;;AAKnBC,oBAAkB/B,UAAUgC,I;;AAK5BvB,YAAUT,UAAUgC,I;;AAIpBpB,SAAOR,cAAcQ,K;;AAKrBqB,SAAOjC,UAAUqB,M;;AAOjBa,kBAAgBlC,UAAUgC;;;AA2C9B,IAAIjB,SAASb,WAAWiC,MAAX,CAAkB;AAC7BnB,OAAK;AACHoB,cAAU,UADP;AAEHC,SAAK,CAFF;AAGHC,WAAO,CAHJ;AAIHC,YAAQ,CAJL;AAKHC,UAAM;AALH;AADwB,CAAlB,CAAb;;AAUA,IAAIC,gBAAgBpC,uBAAuB,eAAvB,EAAwCqC,aAAxC,CAApB;;AAEAC,OAAOC,OAAP,GAAiBF,aAAjB","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule TabBarItemIOS\n * @noflow\n */\n'use strict';\n\nvar ColorPropType = require('ColorPropType');\nvar Image = require('Image');\nvar React = require('React');\nconst PropTypes = require('prop-types');\nvar StaticContainer = require('StaticContainer.react');\nvar StyleSheet = require('StyleSheet');\nvar View = require('View');\n\nconst ViewPropTypes = require('ViewPropTypes');\n\nvar requireNativeComponent = require('requireNativeComponent');\n\nclass TabBarItemIOS extends React.Component {\n  static propTypes = {\n    ...ViewPropTypes,\n    /**\n     * Little red bubble that sits at the top right of the icon.\n     */\n    badge: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.number,\n    ]),\n    /**\n     * Background color for the badge. Available since iOS 10.\n     */\n    badgeColor: ColorPropType,\n    /**\n     * Items comes with a few predefined system icons. Note that if you are\n     * using them, the title and selectedIcon will be overridden with the\n     * system ones.\n     */\n    systemIcon: PropTypes.oneOf([\n      'bookmarks',\n      'contacts',\n      'downloads',\n      'favorites',\n      'featured',\n      'history',\n      'more',\n      'most-recent',\n      'most-viewed',\n      'recents',\n      'search',\n      'top-rated',\n    ]),\n    /**\n     * A custom icon for the tab. It is ignored when a system icon is defined.\n     */\n    icon: Image.propTypes.source,\n    /**\n     * A custom icon when the tab is selected. It is ignored when a system\n     * icon is defined. If left empty, the icon will be tinted in blue.\n     */\n    selectedIcon: Image.propTypes.source,\n    /**\n     * Callback when this tab is being selected, you should change the state of your\n     * component to set selected={true}.\n     */\n    onPress: PropTypes.func,\n    /**\n     * If set to true it renders the image as original,\n     * it defaults to being displayed as a template\n     */\n    renderAsOriginal: PropTypes.bool,\n    /**\n     * It specifies whether the children are visible or not. If you see a\n     * blank content, you probably forgot to add a selected one.\n     */\n    selected: PropTypes.bool,\n    /**\n     * React style object.\n     */\n    style: ViewPropTypes.style,\n    /**\n     * Text that appears under the icon. It is ignored when a system icon\n     * is defined.\n     */\n    title: PropTypes.string,\n    /**\n     *(Apple TV only)* When set to true, this view will be focusable\n     * and navigable using the Apple TV remote.\n     *\n     * @platform ios\n     */\n    isTVSelectable: PropTypes.bool,\n  };\n\n  state = {\n    hasBeenSelected: false,\n  };\n\n  componentWillMount() {\n    if (this.props.selected) {\n      this.setState({hasBeenSelected: true});\n    }\n  }\n\n  componentWillReceiveProps(nextProps: { selected?: boolean }) {\n    if (this.state.hasBeenSelected || nextProps.selected) {\n      this.setState({hasBeenSelected: true});\n    }\n  }\n\n  render() {\n    var {style, children, ...props} = this.props;\n\n    // if the tab has already been shown once, always continue to show it so we\n    // preserve state between tab transitions\n    if (this.state.hasBeenSelected) {\n      var tabContents =\n        <StaticContainer shouldUpdate={this.props.selected}>\n          {children}\n        </StaticContainer>;\n    } else {\n      var tabContents = <View />;\n    }\n\n    return (\n      <RCTTabBarItem\n        {...props}\n        style={[styles.tab, style]}>\n        {tabContents}\n      </RCTTabBarItem>\n    );\n  }\n}\n\nvar styles = StyleSheet.create({\n  tab: {\n    position: 'absolute',\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n  }\n});\n\nvar RCTTabBarItem = requireNativeComponent('RCTTabBarItem', TabBarItemIOS);\n\nmodule.exports = TabBarItemIOS;\n"]}]