["bad73fc7a3c9e41f40310bcba71c4d7753c22e68","f611f0cd4e222752aaa97e712bc666a8dbcc45be",["react","./../../../react-transform-hmr/lib/index.js","ColorPropType","Platform","React","prop-types","StyleSheet","Text","TouchableNativeFeedback","TouchableOpacity","View","fbjs/lib/invariant"],[38,118,2245,2286,2319,2353,2393,2427,2474,2533,2573,2607],{"version":3,"sources":["/home/giise/candidtwo/node_modules/react-native/Libraries/Components/Button.js"],"names":["ColorPropType","require","Platform","React","PropTypes","StyleSheet","Text","TouchableNativeFeedback","TouchableOpacity","View","invariant","props","accessibilityLabel","color","onPress","title","disabled","testID","buttonStyles","styles","button","textStyles","text","OS","push","backgroundColor","accessibilityTraits","buttonDisabled","textDisabled","formattedTitle","toUpperCase","Touchable","Component","propTypes","string","isRequired","bool","func","create","select","ios","android","elevation","borderRadius","textAlign","padding","fontSize","fontWeight","module","exports","Button"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule Button\n * @flow\n */\n'use strict';\n\nconst ColorPropType = require('ColorPropType');\nconst Platform = require('Platform');\nconst React = require('React');\nconst PropTypes = require('prop-types');\nconst StyleSheet = require('StyleSheet');\nconst Text = require('Text');\nconst TouchableNativeFeedback = require('TouchableNativeFeedback');\nconst TouchableOpacity = require('TouchableOpacity');\nconst View = require('View');\n\nconst invariant = require('fbjs/lib/invariant');\n\n/**\n * A basic button component that should render nicely on any platform. Supports\n * a minimal level of customization.\n *\n * <center><img src=\"img/buttonExample.png\"></img></center>\n *\n * If this button doesn't look right for your app, you can build your own\n * button using [TouchableOpacity](docs/touchableopacity.html)\n * or [TouchableNativeFeedback](docs/touchablenativefeedback.html).\n * For inspiration, look at the [source code for this button component](https://github.com/facebook/react-native/blob/master/Libraries/Components/Button.js).\n * Or, take a look at the [wide variety of button components built by the community](https://js.coach/react-native?search=button).\n *\n * Example usage:\n *\n * ```\n * <Button\n *   onPress={onPressLearnMore}\n *   title=\"Learn More\"\n *   color=\"#841584\"\n *   accessibilityLabel=\"Learn more about this purple button\"\n * />\n * ```\n *\n */\n\nclass Button extends React.Component {\n\n  props: {\n    title: string,\n    onPress: () => any,\n    color?: ?string,\n    accessibilityLabel?: ?string,\n    disabled?: ?boolean,\n    testID?: ?string,\n  };\n\n  static propTypes = {\n    /**\n     * Text to display inside the button\n     */\n    title: PropTypes.string.isRequired,\n    /**\n     * Text to display for blindness accessibility features\n     */\n    accessibilityLabel: PropTypes.string,\n    /**\n     * Color of the text (iOS), or background color of the button (Android)\n     */\n    color: ColorPropType,\n    /**\n     * If true, disable all interactions for this component.\n     */\n    disabled: PropTypes.bool,\n    /**\n     * Handler to be called when the user taps the button\n     */\n    onPress: PropTypes.func.isRequired,\n    /**\n     * Used to locate this view in end-to-end tests.\n     */\n    testID: PropTypes.string,\n  };\n\n  render() {\n    const {\n      accessibilityLabel,\n      color,\n      onPress,\n      title,\n      disabled,\n      testID,\n    } = this.props;\n    const buttonStyles = [styles.button];\n    const textStyles = [styles.text];\n    if (color) {\n      if (Platform.OS === 'ios') {\n        textStyles.push({color: color});\n      } else {\n        buttonStyles.push({backgroundColor: color});\n      }\n    }\n    const accessibilityTraits = ['button'];\n    if (disabled) {\n      buttonStyles.push(styles.buttonDisabled);\n      textStyles.push(styles.textDisabled);\n      accessibilityTraits.push('disabled');\n    }\n    invariant(\n      typeof title === 'string',\n      'The title prop of a Button must be a string',\n    );\n    const formattedTitle = Platform.OS === 'android' ? title.toUpperCase() : title;\n    const Touchable = Platform.OS === 'android' ? TouchableNativeFeedback : TouchableOpacity;\n    return (\n      <Touchable\n        accessibilityComponentType=\"button\"\n        accessibilityLabel={accessibilityLabel}\n        accessibilityTraits={accessibilityTraits}\n        testID={testID}\n        disabled={disabled}\n        onPress={onPress}>\n        <View style={buttonStyles}>\n          <Text style={textStyles} disabled={disabled}>{formattedTitle}</Text>\n        </View>\n      </Touchable>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  button: Platform.select({\n    ios: {},\n    android: {\n      elevation: 4,\n      // Material design blue from https://material.google.com/style/color.html#color-color-palette\n      backgroundColor: '#2196F3',\n      borderRadius: 2,\n    },\n  }),\n  text: Platform.select({\n    ios: {\n      // iOS blue from https://developer.apple.com/ios/human-interface-guidelines/visual-design/color/\n      color: '#007AFF',\n      textAlign: 'center',\n      padding: 8,\n      fontSize: 18,\n    },\n    android: {\n      color: 'white',\n      textAlign: 'center',\n      padding: 8,\n      fontWeight: '500',\n    },\n  }),\n  buttonDisabled: Platform.select({\n    ios: {},\n    android: {\n      elevation: 0,\n      backgroundColor: '#dfdfdf',\n    }\n  }),\n  textDisabled: Platform.select({\n    ios: {\n      color: '#cdcdcd',\n    },\n    android: {\n      color: '#a1a1a1',\n    }\n  }),\n});\n\nmodule.exports = Button;\n"]}]