["5f0096d93a9e74b4a72531c5018b31da0a287e84","1ed2e3f48a1a06b4bb079ab25882c728959ab30d",["react","react-native","./TabBarIcon","../SafeAreaView","../withOrientation"],[933,1017,1061,1164,1277],{"version":3,"sources":["/home/giise/candidtwo/node_modules/react-navigation/src/views/TabView/TabBarBottom.js"],"names":["React","majorVersion","parseInt","Version","isIos","OS","useHorizontalTabs","TabBarBottom","_renderLabel","scene","props","position","navigation","activeTintColor","inactiveTintColor","labelStyle","showLabel","showIcon","isLandscape","allowFontScaling","index","routes","state","inputRange","map","x","i","outputRange","inputIndex","color","interpolate","tintColor","focused","label","getLabel","marginLeft","LABEL_LEFT_MARGIN","marginTop","LABEL_TOP_MARGIN","styles","_renderIcon","renderIcon","icon","_renderTestIDProps","testIDProps","getTestIDProps","jumpToIndex","getOnPress","activeBackgroundColor","inactiveBackgroundColor","style","tabStyle","tabBarStyle","tabBar","tabBarLandscape","tabBarPortrait","bottom","top","route","onPress","backgroundColor","justifyContent","extraProps","testID","accessibilityLabel","key","tab","tabLandscape","tabPortrait","PureComponent","defaultProps","create","borderTopWidth","hairlineWidth","borderTopColor","flexDirection","height","flex","alignItems","flexGrow","textAlign","fontSize","marginBottom"],"mappings":"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","sourcesContent":["/* @flow */\n\nimport * as React from 'react';\nimport {\n  Animated,\n  TouchableWithoutFeedback,\n  StyleSheet,\n  View,\n  Platform,\n} from 'react-native';\nimport TabBarIcon from './TabBarIcon';\nimport SafeAreaView from '../SafeAreaView';\nimport withOrientation from '../withOrientation';\n\nimport type {\n  NavigationRoute,\n  NavigationState,\n  NavigationScreenProp,\n  ViewStyleProp,\n  TextStyleProp,\n} from '../../TypeDefinition';\n\nimport type { TabScene } from './TabView';\n\ntype Props = {\n  activeTintColor: string,\n  activeBackgroundColor: string,\n  inactiveTintColor: string,\n  inactiveBackgroundColor: string,\n  showLabel: boolean,\n  showIcon: boolean,\n  allowFontScaling: boolean,\n  position: Animated.Value,\n  navigation: NavigationScreenProp<NavigationState>,\n  jumpToIndex: (index: number) => void,\n  getLabel: (scene: TabScene) => ?(React.Node | string),\n  getOnPress: (\n    scene: TabScene\n  ) => (scene: TabScene, jumpToIndex: (index: number) => void) => void,\n  getTestIDProps: (scene: TabScene) => (scene: TabScene) => any,\n  renderIcon: (scene: TabScene) => React.Node,\n  style?: ViewStyleProp,\n  labelStyle?: TextStyleProp,\n  tabStyle?: ViewStyleProp,\n  showIcon?: boolean,\n  isLandscape: boolean,\n};\n\nconst majorVersion = parseInt(Platform.Version, 10);\nconst isIos = Platform.OS === 'ios';\nconst useHorizontalTabs = majorVersion >= 11 && isIos;\n\nclass TabBarBottom extends React.PureComponent<Props> {\n  // See https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/UIKitUICatalog/UITabBar.html\n  static defaultProps = {\n    activeTintColor: '#3478f6', // Default active tint color in iOS 10\n    activeBackgroundColor: 'transparent',\n    inactiveTintColor: '#929292', // Default inactive tint color in iOS 10\n    inactiveBackgroundColor: 'transparent',\n    showLabel: true,\n    showIcon: true,\n    allowFontScaling: true,\n  };\n\n  props: Props;\n\n  _renderLabel = (scene: TabScene) => {\n    const {\n      position,\n      navigation,\n      activeTintColor,\n      inactiveTintColor,\n      labelStyle,\n      showLabel,\n      showIcon,\n      isLandscape,\n      allowFontScaling,\n    } = this.props;\n    if (showLabel === false) {\n      return null;\n    }\n    const { index } = scene;\n    const { routes } = navigation.state;\n    // Prepend '-1', so there are always at least 2 items in inputRange\n    const inputRange = [-1, ...routes.map((x: *, i: number) => i)];\n    const outputRange = inputRange.map(\n      (inputIndex: number) =>\n        inputIndex === index ? activeTintColor : inactiveTintColor\n    );\n    const color = position.interpolate({\n      inputRange,\n      outputRange: (outputRange: Array<string>),\n    });\n\n    const tintColor = scene.focused ? activeTintColor : inactiveTintColor;\n    const label = this.props.getLabel({ ...scene, tintColor });\n    let marginLeft = 0;\n    if (isLandscape && showIcon && useHorizontalTabs) {\n      marginLeft = LABEL_LEFT_MARGIN;\n    }\n    let marginTop = 0;\n    if (!isLandscape && showIcon && useHorizontalTabs) {\n      marginTop = LABEL_TOP_MARGIN;\n    }\n\n    if (typeof label === 'string') {\n      return (\n        <Animated.Text\n          style={[styles.label, { color, marginLeft, marginTop }, labelStyle]}\n          allowFontScaling={allowFontScaling}\n        >\n          {label}\n        </Animated.Text>\n      );\n    }\n\n    if (typeof label === 'function') {\n      return label({ ...scene, tintColor });\n    }\n\n    return label;\n  };\n\n  _renderIcon = (scene: TabScene) => {\n    const {\n      position,\n      navigation,\n      activeTintColor,\n      inactiveTintColor,\n      renderIcon,\n      showIcon,\n      showLabel,\n    } = this.props;\n    if (showIcon === false) {\n      return null;\n    }\n    return (\n      <TabBarIcon\n        position={position}\n        navigation={navigation}\n        activeTintColor={activeTintColor}\n        inactiveTintColor={inactiveTintColor}\n        renderIcon={renderIcon}\n        scene={scene}\n        style={showLabel && useHorizontalTabs ? {} : styles.icon}\n      />\n    );\n  };\n\n  _renderTestIDProps = (scene: TabScene) => {\n    const testIDProps =\n      this.props.getTestIDProps && this.props.getTestIDProps(scene);\n    return testIDProps;\n  };\n\n  render() {\n    const {\n      position,\n      navigation,\n      jumpToIndex,\n      getOnPress,\n      getTestIDProps,\n      activeBackgroundColor,\n      inactiveBackgroundColor,\n      style,\n      tabStyle,\n      isLandscape,\n    } = this.props;\n    const { routes } = navigation.state;\n    // Prepend '-1', so there are always at least 2 items in inputRange\n    const inputRange = [-1, ...routes.map((x: *, i: number) => i)];\n\n    const tabBarStyle = [\n      styles.tabBar,\n      isLandscape && useHorizontalTabs\n        ? styles.tabBarLandscape\n        : styles.tabBarPortrait,\n      style,\n    ];\n\n    return (\n      <Animated.View>\n        <SafeAreaView\n          style={tabBarStyle}\n          forceInset={{ bottom: 'always', top: 'never' }}\n        >\n          {routes.map((route: NavigationRoute, index: number) => {\n            const focused = index === navigation.state.index;\n            const scene = { route, index, focused };\n            const onPress = getOnPress(scene);\n            const outputRange = inputRange.map(\n              (inputIndex: number) =>\n                inputIndex === index\n                  ? activeBackgroundColor\n                  : inactiveBackgroundColor\n            );\n            const backgroundColor = position.interpolate({\n              inputRange,\n              outputRange: (outputRange: Array<string>),\n            });\n\n            const justifyContent = this.props.showIcon ? 'flex-end' : 'center';\n            const extraProps = this._renderTestIDProps(scene) || {};\n            const { testID, accessibilityLabel } = extraProps;\n\n            return (\n              <TouchableWithoutFeedback\n                key={route.key}\n                testID={testID}\n                accessibilityLabel={accessibilityLabel}\n                onPress={() =>\n                  onPress ? onPress(scene, jumpToIndex) : jumpToIndex(index)}\n              >\n                <Animated.View\n                  style={[\n                    styles.tab,\n                    isLandscape && useHorizontalTabs && styles.tabLandscape,\n                    !isLandscape && useHorizontalTabs && styles.tabPortrait,\n                    { backgroundColor },\n                    tabStyle,\n                  ]}\n                >\n                  {this._renderIcon(scene)}\n                  {this._renderLabel(scene)}\n                </Animated.View>\n              </TouchableWithoutFeedback>\n            );\n          })}\n        </SafeAreaView>\n      </Animated.View>\n    );\n  }\n}\n\nconst LABEL_LEFT_MARGIN = 20;\nconst LABEL_TOP_MARGIN = 15;\nconst styles = StyleSheet.create({\n  tabBar: {\n    backgroundColor: '#F7F7F7', // Default background color in iOS 10\n    borderTopWidth: StyleSheet.hairlineWidth,\n    borderTopColor: 'rgba(0, 0, 0, .3)',\n    flexDirection: 'row',\n  },\n  tabBarLandscape: {\n    height: 29,\n  },\n  tabBarPortrait: {\n    height: 49,\n  },\n  tab: {\n    flex: 1,\n    alignItems: isIos ? 'center' : 'stretch',\n    justifyContent: 'flex-end',\n  },\n  tabPortrait: {\n    justifyContent: 'flex-end',\n    flexDirection: 'column',\n  },\n  tabLandscape: {\n    justifyContent: 'center',\n    flexDirection: 'row',\n  },\n  icon: {\n    flexGrow: 1,\n  },\n  label: {\n    textAlign: 'center',\n    fontSize: 10,\n    marginBottom: 1.5,\n    backgroundColor: 'transparent',\n  },\n});\n\nexport default withOrientation(TabBarBottom);\n"]}]