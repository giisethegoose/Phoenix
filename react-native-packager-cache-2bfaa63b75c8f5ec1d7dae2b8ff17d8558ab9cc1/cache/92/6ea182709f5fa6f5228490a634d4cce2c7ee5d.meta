["84dc33fa29d04810d68b9f52ed5d10ecb4c10d95","acef494f60257b9607a1a925d857ee270de8a6eb",["./fs","./string","./type"],[96,126,162,194],{"version":3,"sources":["/home/giise/candidtwo/node_modules/@firebase/storage/dist/cjs/src/implementation/blob.js"],"names":["Object","defineProperty","exports","value","fs","require","string","string_1","type","FbsBlob","data","opt_elideCopy","size","blobType","isNativeBlob","data_","ArrayBuffer","Uint8Array","byteLength","set","length","size_","type_","prototype","slice","startByte","endByte","realBlob","sliced","sliceBlob","buffer","getBlob","var_args","_i","arguments","isNativeBlobDefined","blobby","map","val","apply","uint8Arrays","isString","dataFromString","StringFormat","RAW","finalLength_1","forEach","array","merged_1","index_1","i","uploadData"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * @file Provides a Blob-like wrapper for various binary types (including the\n * native Blob type). This makes it possible to upload types like ArrayBuffers,\n * making uploads possible in environments without the native Blob type.\n */\nvar fs = require(\"./fs\");\nvar string = require(\"./string\");\nvar string_1 = require(\"./string\");\nvar type = require(\"./type\");\n/**\n * @param opt_elideCopy If true, doesn't copy mutable input data\n *     (e.g. Uint8Arrays). Pass true only if you know the objects will not be\n *     modified after this blob's construction.\n */\nvar FbsBlob = /** @class */ (function () {\n    function FbsBlob(data, opt_elideCopy) {\n        var size = 0;\n        var blobType = '';\n        if (type.isNativeBlob(data)) {\n            this.data_ = data;\n            size = data.size;\n            blobType = data.type;\n        }\n        else if (data instanceof ArrayBuffer) {\n            if (opt_elideCopy) {\n                this.data_ = new Uint8Array(data);\n            }\n            else {\n                this.data_ = new Uint8Array(data.byteLength);\n                this.data_.set(new Uint8Array(data));\n            }\n            size = this.data_.length;\n        }\n        else if (data instanceof Uint8Array) {\n            if (opt_elideCopy) {\n                this.data_ = data;\n            }\n            else {\n                this.data_ = new Uint8Array(data.length);\n                this.data_.set(data);\n            }\n            size = data.length;\n        }\n        this.size_ = size;\n        this.type_ = blobType;\n    }\n    FbsBlob.prototype.size = function () {\n        return this.size_;\n    };\n    FbsBlob.prototype.type = function () {\n        return this.type_;\n    };\n    FbsBlob.prototype.slice = function (startByte, endByte) {\n        if (type.isNativeBlob(this.data_)) {\n            var realBlob = this.data_;\n            var sliced = fs.sliceBlob(realBlob, startByte, endByte);\n            if (sliced === null) {\n                return null;\n            }\n            return new FbsBlob(sliced);\n        }\n        else {\n            var slice = new Uint8Array(this.data_.buffer, startByte, endByte - startByte);\n            return new FbsBlob(slice, true);\n        }\n    };\n    FbsBlob.getBlob = function () {\n        var var_args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            var_args[_i] = arguments[_i];\n        }\n        if (type.isNativeBlobDefined()) {\n            var blobby = var_args.map(function (val) {\n                if (val instanceof FbsBlob) {\n                    return val.data_;\n                }\n                else {\n                    return val;\n                }\n            });\n            return new FbsBlob(fs.getBlob.apply(null, blobby));\n        }\n        else {\n            var uint8Arrays = var_args.map(function (val) {\n                if (type.isString(val)) {\n                    return string.dataFromString(string_1.StringFormat.RAW, val).data;\n                }\n                else {\n                    // Blobs don't exist, so this has to be a Uint8Array.\n                    return val.data_;\n                }\n            });\n            var finalLength_1 = 0;\n            uint8Arrays.forEach(function (array) {\n                finalLength_1 += array.byteLength;\n            });\n            var merged_1 = new Uint8Array(finalLength_1);\n            var index_1 = 0;\n            uint8Arrays.forEach(function (array) {\n                for (var i = 0; i < array.length; i++) {\n                    merged_1[index_1++] = array[i];\n                }\n            });\n            return new FbsBlob(merged_1, true);\n        }\n    };\n    FbsBlob.prototype.uploadData = function () {\n        return this.data_;\n    };\n    return FbsBlob;\n}());\nexports.FbsBlob = FbsBlob;\n\n//# sourceMappingURL=blob.js.map\n"]}]