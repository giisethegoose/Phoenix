["bfc08e457492cc129a44d5b5ff36859cdc634d36","1d7ac8b1e086c6c063a7d3bd4e191994ba1d59d9",["../index.js","./XMLHttpRequestEventTarget.js","../utils/log.js","./Blob.js","./ProgressEvent.js","../utils/uri"],[136,253,407,503,604,722],{"version":3,"sources":["/home/giise/candidtwo/node_modules/react-native-fetch-blob/polyfill/XMLHttpRequest.js"],"names":["log","disable","UNSENT","OPENED","HEADERS_RECEIVED","LOADING","DONE","XMLHttpRequest","level","substr","i","binaryContentTypes","RegExp","test","push","val","splice","verbose","upload","_readyState","_uriType","_response","_responseText","_responseHeaders","_responseType","_responseURL","_responseXML","_status","_statusText","_timeout","_sendFlag","_uploadStarted","_increment","_config","_headers","_cleanUp","_headerReceived","e","debug","_task","taskId","responseURL","_url","state","headers","status","Math","floor","_dispatchReadStateChange","_uploadProgressEvent","send","total","dispatchEvent","_progressEvent","chunk","readyState","lengthComputable","_onError","err","statusCode","String","match","message","type","detail","clearEventListeners","_onDone","resp","responseDataReady","info","respInfo","respType","blob","then","b","text","json","responseText","method","url","async","user","password","_method","isJSONStreamURI","replace","body","_body","promise","Promise","resolve","FormData","_blobCreated","reject","onCreated","isDerived","close","wrap","getRNFetchBlobRef","JSON","stringify","toString","h","config","auto","timeout","increment","fetch","stateChange","uploadProgress","progress","catch","mime","name","value","invalidPatterns","cancel","timeStamp","Date","now","onabort","field","toLowerCase","result","respHeaders","responseHeaders","fromCharCode","length","_onreadystatechange","fn"],"mappings":"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","sourcesContent":["// Copyright 2016 wkh237@github. All rights reserved.\n// Use of this source code is governed by a MIT-style license that can be\n// found in the LICENSE file.\n\nimport RNFetchBlob from '../index.js'\nimport XMLHttpRequestEventTarget from './XMLHttpRequestEventTarget.js'\nimport Log from '../utils/log.js'\nimport Blob from './Blob.js'\nimport ProgressEvent from './ProgressEvent.js'\nimport URIUtil from '../utils/uri'\n\nconst log = new Log('XMLHttpRequest')\n\nlog.disable()\n// log.level(3)\n\nconst UNSENT = 0\nconst OPENED = 1\nconst HEADERS_RECEIVED = 2\nconst LOADING = 3\nconst DONE = 4\n\nexport default class XMLHttpRequest extends XMLHttpRequestEventTarget{\n\n  _onreadystatechange : () => void;\n\n  upload : XMLHttpRequestEventTarget = new XMLHttpRequestEventTarget();\n  static binaryContentTypes : Array<string> = [\n    'image/', 'video/', 'audio/'\n  ];\n\n  // readonly\n  _readyState : number = UNSENT;\n  _uriType : 'net' | 'file' = 'net';\n  _response : any = '';\n  _responseText : any = '';\n  _responseHeaders : any = {};\n  _responseType : '' | 'arraybuffer' | 'blob'  | 'json' | 'text' = '';\n  // TODO : not suppoted ATM\n  _responseURL : null = '';\n  _responseXML : null = '';\n  _status : number = 0;\n  _statusText : string = '';\n  _timeout : number = 60000;\n  _sendFlag : boolean = false;\n  _uploadStarted : boolean = false;\n  _increment : boolean = false;\n\n  // RNFetchBlob compatible data structure\n  _config : RNFetchBlobConfig = {};\n  _url : any;\n  _method : string;\n  _headers: any = {\n    'Content-Type' : 'text/plain'\n  };\n  _cleanUp : () => void = null;\n  _body: any;\n\n  // RNFetchBlob promise object, which has `progress`, `uploadProgress`, and\n  // `cancel` methods.\n  _task: any;\n\n  // constants\n  get UNSENT() { return UNSENT }\n  get OPENED() { return OPENED }\n  get HEADERS_RECEIVED() { return HEADERS_RECEIVED }\n  get LOADING() { return LOADING }\n  get DONE() { return DONE }\n\n  static get UNSENT() {\n    return UNSENT\n  }\n\n  static get OPENED() {\n    return OPENED\n  }\n\n  static get HEADERS_RECEIVED() {\n    return HEADERS_RECEIVED\n  }\n\n  static get LOADING() {\n    return LOADING\n  }\n\n  static get DONE() {\n    return DONE\n  }\n\n  static setLog(level:number) {\n    if(level === -1)\n      log.disable()\n    else\n      log.level(level)\n  }\n\n  static addBinaryContentType(substr:string) {\n    for(let i in XMLHttpRequest.binaryContentTypes) {\n      if(new RegExp(substr,'i').test(XMLHttpRequest.binaryContentTypes[i])) {\n        return\n      }\n    }\n    XMLHttpRequest.binaryContentTypes.push(substr)\n\n  }\n\n  static removeBinaryContentType(val) {\n    for(let i in XMLHttpRequest.binaryContentTypes) {\n      if(new RegExp(substr,'i').test(XMLHttpRequest.binaryContentTypes[i])) {\n        XMLHttpRequest.binaryContentTypes.splice(i,1)\n        return\n      }\n    }\n  }\n\n  constructor() {\n    log.verbose('XMLHttpRequest constructor called')\n    super()\n  }\n\n\n  /**\n   * XMLHttpRequest.open, always async, user and password not supported. When\n   * this method invoked, headers should becomes empty again.\n   * @param  {string} method Request method\n   * @param  {string} url Request URL\n   * @param  {true} async Always async\n   * @param  {any} user NOT SUPPORTED\n   * @param  {any} password NOT SUPPORTED\n   */\n  open(method:string, url:string, async:true, user:any, password:any) {\n    log.verbose('XMLHttpRequest open ', method, url, async, user, password)\n    this._method = method\n    this._url = url\n    this._headers = {}\n    this._increment = URIUtil.isJSONStreamURI(this._url)\n    this._url = this._url.replace(/^JSONStream\\:\\/\\//, '')\n    this._dispatchReadStateChange(XMLHttpRequest.OPENED)\n  }\n\n  /**\n   * Invoke this function to send HTTP request, and set body.\n   * @param  {any} body Body in RNfetchblob flavor\n   */\n  send(body) {\n\n    this._body = body\n\n    if(this._readyState !== XMLHttpRequest.OPENED)\n      throw 'InvalidStateError : XMLHttpRequest is not opened yet.'\n    let promise = Promise.resolve()\n    this._sendFlag = true\n    log.verbose('XMLHttpRequest send ', body)\n    let {_method, _url, _headers } = this\n    log.verbose('sending request with args', _method, _url, _headers, body)\n    log.verbose(typeof body, body instanceof FormData)\n\n    if(body instanceof Blob) {\n      log.debug('sending blob body', body._blobCreated)\n      promise = new Promise((resolve, reject) => {\n          body.onCreated((blob) => {\n            // when the blob is derived (not created by RN developer), the blob\n            // will be released after XMLHttpRequest sent\n            if(blob.isDerived) {\n              this._cleanUp = () => {\n                blob.close()\n              }\n            }\n            log.debug('body created send request')\n            body = RNFetchBlob.wrap(blob.getRNFetchBlobRef())\n            resolve()\n          })\n        })\n    }\n    else if(typeof body === 'object') {\n      body = JSON.stringify(body)\n      promise = Promise.resolve()\n    }\n    else {\n      body = body ? body.toString() : body\n      promise = Promise.resolve()\n    }\n\n    promise.then(() => {\n      log.debug('send request invoke', body)\n      for(let h in _headers) {\n        _headers[h] = _headers[h].toString()\n      }\n\n      this._task = RNFetchBlob\n                    .config({\n                      auto: true,\n                      timeout : this._timeout,\n                      increment : this._increment,\n                      binaryContentTypes : XMLHttpRequest.binaryContentTypes\n                    })\n                    .fetch(_method, _url, _headers, body)\n      this._task\n          .stateChange(this._headerReceived)\n          .uploadProgress(this._uploadProgressEvent)\n          .progress(this._progressEvent)\n          .catch(this._onError)\n          .then(this._onDone)\n\n    })\n  }\n\n  overrideMimeType(mime:string) {\n    log.verbose('XMLHttpRequest overrideMimeType', mime)\n    this._headers['Content-Type'] = mime\n  }\n\n  setRequestHeader(name, value) {\n    log.verbose('XMLHttpRequest set header', name, value)\n    if(this._readyState !== OPENED || this._sendFlag) {\n      throw `InvalidStateError : Calling setRequestHeader in wrong state  ${this._readyState}`\n    }\n    // UNICODE SHOULD NOT PASS\n    if(typeof name !== 'string' || /[^\\u0000-\\u00ff]/.test(name)) {\n      throw 'TypeError : header field name should be a string'\n    }\n    //\n    let invalidPatterns = [\n      /[\\(\\)\\>\\<\\@\\,\\:\\\\\\/\\[\\]\\?\\=\\}\\{\\s\\ \\u007f\\;\\t\\0\\v\\r]/,\n      /tt/\n    ]\n    for(let i in invalidPatterns) {\n      if(invalidPatterns[i].test(name) || typeof name !== 'string') {\n        throw `SyntaxError : Invalid header field name ${name}`\n      }\n    }\n    this._headers[name] = value\n  }\n\n  abort() {\n    log.verbose('XMLHttpRequest abort ')\n    if(!this._task)\n      return\n    this._task.cancel((err) => {\n      let e = {\n        timeStamp : Date.now(),\n      }\n      if(this.onabort)\n        this.onabort()\n      if(err) {\n        e.detail = err\n        e.type = 'error'\n        this.dispatchEvent('error', e)\n      }\n      else {\n        e.type = 'abort'\n        this.dispatchEvent('abort', e)\n      }\n    })\n  }\n\n  getResponseHeader(field:string):string | null {\n    log.verbose('XMLHttpRequest get header', field, this._responseHeaders)\n    if(!this._responseHeaders)\n      return null\n    return (this._responseHeaders[field] || this._responseHeaders[field.toLowerCase()]) || null\n\n  }\n\n  getAllResponseHeaders():string | null {\n    log.verbose('XMLHttpRequest get all headers', this._responseHeaders)\n    if(!this._responseHeaders)\n      return ''\n    let result = ''\n    let respHeaders = this.responseHeaders\n    for(let i in respHeaders) {\n      result += `${i}: ${respHeaders[i]}${String.fromCharCode(0x0D,0x0A)}`\n    }\n    return result.substr(0, result.length-2)\n  }\n\n  _headerReceived = (e) => {\n    log.debug('header received ', this._task.taskId, e)\n    this.responseURL = this._url\n    if(e.state === \"2\" && e.taskId === this._task.taskId) {\n      this._responseHeaders = e.headers\n      this._statusText = e.status\n      this._status = Math.floor(e.status)\n      this._dispatchReadStateChange(XMLHttpRequest.HEADERS_RECEIVED)\n    }\n  }\n\n  _uploadProgressEvent = (send:number, total:number) => {\n    if(!this._uploadStarted) {\n      this.upload.dispatchEvent('loadstart')\n      this._uploadStarted = true\n    }\n    if(send >= total)\n      this.upload.dispatchEvent('load')\n    this.upload.dispatchEvent('progress', new ProgressEvent(true, send, total))\n  }\n\n  _progressEvent = (send:number, total:number, chunk:string) => {\n    log.verbose(this.readyState)\n    if(this._readyState === XMLHttpRequest.HEADERS_RECEIVED)\n      this._dispatchReadStateChange(XMLHttpRequest.LOADING)\n    let lengthComputable = false\n    if(total && total >= 0)\n        lengthComputable = true\n    let e = new ProgressEvent(lengthComputable, send, total)\n\n    if(this._increment) {\n      this._responseText += chunk\n    }\n    this.dispatchEvent('progress', e)\n  }\n\n  _onError = (err) => {\n    let statusCode = Math.floor(this.status)\n    if(statusCode >= 100 && statusCode !== 408) {\n      return\n    }\n    log.debug('XMLHttpRequest error', err)\n    this._statusText = err\n    this._status = String(err).match(/\\d+/)\n    this._status = this._status ? Math.floor(this.status) : 404\n    this._dispatchReadStateChange(XMLHttpRequest.DONE)\n    if(err && String(err.message).match(/(timed\\sout|timedout)/) || this._status == 408) {\n      this.dispatchEvent('timeout')\n    }\n    this.dispatchEvent('loadend')\n    this.dispatchEvent('error', {\n      type : 'error',\n      detail : err\n    })\n    this.clearEventListeners()\n  }\n\n  _onDone = (resp) => {\n    log.debug('XMLHttpRequest done', this._url, resp, this)\n    this._statusText = this._status\n    let responseDataReady = () => {\n      log.debug('request done state = 4')\n      this.dispatchEvent('load')\n      this.dispatchEvent('loadend')\n      this._dispatchReadStateChange(XMLHttpRequest.DONE)\n      this.clearEventListeners()\n    }\n    if(resp) {\n      let info = resp.respInfo || {}\n      log.debug(this._url, info, info.respType)\n      switch(this._responseType) {\n        case 'blob' :\n          resp.blob().then((b) => {\n            this._responseText = resp.text()\n            this._response = b\n            responseDataReady()\n          })\n        break;\n        case 'arraybuffer':\n          // TODO : to array buffer\n        break\n        case 'json':\n          this._response = resp.json()\n          this._responseText = resp.text()\n        break\n        default :\n          this._responseText = resp.text()\n          this._response = this.responseText\n          responseDataReady()\n        break;\n      }\n    }\n\n  }\n\n  _dispatchReadStateChange(state) {\n    this._readyState = state\n    if(typeof this._onreadystatechange === 'function')\n      this._onreadystatechange()\n  }\n\n  set onreadystatechange(fn:() => void) {\n    log.verbose('XMLHttpRequest set onreadystatechange', fn)\n    this._onreadystatechange = fn\n  }\n\n  get onreadystatechange() {\n    return this._onreadystatechange\n  }\n\n  get readyState() {\n    log.verbose('get readyState', this._readyState)\n    return this._readyState\n  }\n\n  get status() {\n    log.verbose('get status', this._status)\n    return this._status\n  }\n\n  get statusText() {\n    log.verbose('get statusText', this._statusText)\n    return this._statusText\n  }\n\n  get response() {\n    log.verbose('get response', this._response)\n    return this._response\n  }\n\n  get responseText() {\n    log.verbose('get responseText', this._responseText)\n    return this._responseText\n  }\n\n  get responseURL() {\n    log.verbose('get responseURL', this._responseURL)\n    return this._responseURL\n  }\n\n  get responseHeaders() {\n    log.verbose('get responseHeaders', this._responseHeaders)\n    return this._responseHeaders\n  }\n\n  set timeout(val) {\n    this._timeout = val*1000\n    log.verbose('set timeout', this._timeout)\n  }\n\n  get timeout() {\n    log.verbose('get timeout', this._timeout)\n    return this._timeout\n  }\n\n  set responseType(val) {\n    log.verbose('set response type', this._responseType)\n    this._responseType = val\n  }\n\n  get responseType() {\n    log.verbose('get response type', this._responseType)\n    return this._responseType\n  }\n\n  static get isRNFBPolyfill() {\n    return true\n  }\n\n}\n"]}]