["19432b441ca9f5c31a93fef0f41f729365b494cf","eb852988ec3cd6fe3e60a77e7a313714efdec316",[],[],{"version":3,"sources":["/home/giise/candidtwo/node_modules/base-64/base64.js"],"names":["root","freeExports","exports","freeModule","module","freeGlobal","global","window","InvalidCharacterError","message","prototype","Error","name","error","TABLE","REGEX_SPACE_CHARACTERS","decode","input","String","replace","length","test","bitCounter","bitStorage","buffer","output","position","indexOf","charAt","fromCharCode","encode","padding","a","b","c","d","charCodeAt","base64","define","amd","nodeType","key","hasOwnProperty"],"mappings":"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","sourcesContent":["/*! http://mths.be/base64 v0.1.0 by @mathias | MIT license */\n;(function(root) {\n\n\t// Detect free variables `exports`.\n\tvar freeExports = typeof exports == 'object' && exports;\n\n\t// Detect free variable `module`.\n\tvar freeModule = typeof module == 'object' && module &&\n\t\tmodule.exports == freeExports && module;\n\n\t// Detect free variable `global`, from Node.js or Browserified code, and use\n\t// it as `root`.\n\tvar freeGlobal = typeof global == 'object' && global;\n\tif (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {\n\t\troot = freeGlobal;\n\t}\n\n\t/*--------------------------------------------------------------------------*/\n\n\tvar InvalidCharacterError = function(message) {\n\t\tthis.message = message;\n\t};\n\tInvalidCharacterError.prototype = new Error;\n\tInvalidCharacterError.prototype.name = 'InvalidCharacterError';\n\n\tvar error = function(message) {\n\t\t// Note: the error messages used throughout this file match those used by\n\t\t// the native `atob`/`btoa` implementation in Chromium.\n\t\tthrow new InvalidCharacterError(message);\n\t};\n\n\tvar TABLE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\t// http://whatwg.org/html/common-microsyntaxes.html#space-character\n\tvar REGEX_SPACE_CHARACTERS = /[\\t\\n\\f\\r ]/g;\n\n\t// `decode` is designed to be fully compatible with `atob` as described in the\n\t// HTML Standard. http://whatwg.org/html/webappapis.html#dom-windowbase64-atob\n\t// The optimized base64-decoding algorithm used is based on @atk’s excellent\n\t// implementation. https://gist.github.com/atk/1020396\n\tvar decode = function(input) {\n\t\tinput = String(input)\n\t\t\t.replace(REGEX_SPACE_CHARACTERS, '');\n\t\tvar length = input.length;\n\t\tif (length % 4 == 0) {\n\t\t\tinput = input.replace(/==?$/, '');\n\t\t\tlength = input.length;\n\t\t}\n\t\tif (\n\t\t\tlength % 4 == 1 ||\n\t\t\t// http://whatwg.org/C#alphanumeric-ascii-characters\n\t\t\t/[^+a-zA-Z0-9/]/.test(input)\n\t\t) {\n\t\t\terror(\n\t\t\t\t'Invalid character: the string to be decoded is not correctly encoded.'\n\t\t\t);\n\t\t}\n\t\tvar bitCounter = 0;\n\t\tvar bitStorage;\n\t\tvar buffer;\n\t\tvar output = '';\n\t\tvar position = -1;\n\t\twhile (++position < length) {\n\t\t\tbuffer = TABLE.indexOf(input.charAt(position));\n\t\t\tbitStorage = bitCounter % 4 ? bitStorage * 64 + buffer : buffer;\n\t\t\t// Unless this is the first of a group of 4 characters…\n\t\t\tif (bitCounter++ % 4) {\n\t\t\t\t// …convert the first 8 bits to a single ASCII character.\n\t\t\t\toutput += String.fromCharCode(\n\t\t\t\t\t0xFF & bitStorage >> (-2 * bitCounter & 6)\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn output;\n\t};\n\n\t// `encode` is designed to be fully compatible with `btoa` as described in the\n\t// HTML Standard: http://whatwg.org/html/webappapis.html#dom-windowbase64-btoa\n\tvar encode = function(input) {\n\t\tinput = String(input);\n\t\tif (/[^\\0-\\xFF]/.test(input)) {\n\t\t\t// Note: no need to special-case astral symbols here, as surrogates are\n\t\t\t// matched, and the input is supposed to only contain ASCII anyway.\n\t\t\terror(\n\t\t\t\t'The string to be encoded contains characters outside of the ' +\n\t\t\t\t'Latin1 range.'\n\t\t\t);\n\t\t}\n\t\tvar padding = input.length % 3;\n\t\tvar output = '';\n\t\tvar position = -1;\n\t\tvar a;\n\t\tvar b;\n\t\tvar c;\n\t\tvar d;\n\t\tvar buffer;\n\t\t// Make sure any padding is handled outside of the loop.\n\t\tvar length = input.length - padding;\n\n\t\twhile (++position < length) {\n\t\t\t// Read three bytes, i.e. 24 bits.\n\t\t\ta = input.charCodeAt(position) << 16;\n\t\t\tb = input.charCodeAt(++position) << 8;\n\t\t\tc = input.charCodeAt(++position);\n\t\t\tbuffer = a + b + c;\n\t\t\t// Turn the 24 bits into four chunks of 6 bits each, and append the\n\t\t\t// matching character for each of them to the output.\n\t\t\toutput += (\n\t\t\t\tTABLE.charAt(buffer >> 18 & 0x3F) +\n\t\t\t\tTABLE.charAt(buffer >> 12 & 0x3F) +\n\t\t\t\tTABLE.charAt(buffer >> 6 & 0x3F) +\n\t\t\t\tTABLE.charAt(buffer & 0x3F)\n\t\t\t);\n\t\t}\n\n\t\tif (padding == 2) {\n\t\t\ta = input.charCodeAt(position) << 8;\n\t\t\tb = input.charCodeAt(++position);\n\t\t\tbuffer = a + b;\n\t\t\toutput += (\n\t\t\t\tTABLE.charAt(buffer >> 10) +\n\t\t\t\tTABLE.charAt((buffer >> 4) & 0x3F) +\n\t\t\t\tTABLE.charAt((buffer << 2) & 0x3F) +\n\t\t\t\t'='\n\t\t\t);\n\t\t} else if (padding == 1) {\n\t\t\tbuffer = input.charCodeAt(position);\n\t\t\toutput += (\n\t\t\t\tTABLE.charAt(buffer >> 2) +\n\t\t\t\tTABLE.charAt((buffer << 4) & 0x3F) +\n\t\t\t\t'=='\n\t\t\t);\n\t\t}\n\n\t\treturn output;\n\t};\n\n\tvar base64 = {\n\t\t'encode': encode,\n\t\t'decode': decode,\n\t\t'version': '0.1.0'\n\t};\n\n\t// Some AMD build optimizers, like r.js, check for specific condition patterns\n\t// like the following:\n\tif (\n\t\ttypeof define == 'function' &&\n\t\ttypeof define.amd == 'object' &&\n\t\tdefine.amd\n\t) {\n\t\tdefine(function() {\n\t\t\treturn base64;\n\t\t});\n\t}\telse if (freeExports && !freeExports.nodeType) {\n\t\tif (freeModule) { // in Node.js or RingoJS v0.8.0+\n\t\t\tfreeModule.exports = base64;\n\t\t} else { // in Narwhal or RingoJS v0.7.0-\n\t\t\tfor (var key in base64) {\n\t\t\t\tbase64.hasOwnProperty(key) && (freeExports[key] = base64[key]);\n\t\t\t}\n\t\t}\n\t} else { // in Rhino or a web browser\n\t\troot.base64 = base64;\n\t}\n\n}(this));\n"]}]