["abc944d44cd2152f5bc77343f6c557c5ac3899ee","2f2e80a640df45451402bbcba2cb96f715d8e253",["@firebase/util","../Change","../../snap/ChildrenNode","../../snap/indexes/PriorityIndex"],[99,141,184,242],{"version":3,"sources":["/home/giise/candidtwo/node_modules/@firebase/database/dist/cjs/src/core/view/filter/IndexedFilter.js"],"names":["Object","defineProperty","exports","value","util_1","require","Change_1","ChildrenNode_1","PriorityIndex_1","IndexedFilter","index_","prototype","updateChild","snap","key","newChild","affectedPath","source","optChangeAccumulator","assert","isIndexed","oldChild","getImmediateChild","getChild","equals","isEmpty","hasChild","trackChildChange","Change","childRemovedChange","isLeafNode","childAddedChange","childChangedChange","updateImmediateChild","withIndex","updateFullNode","oldSnap","newSnap","forEachChild","PRIORITY_INDEX","childNode","updatePriority","newPriority","ChildrenNode","EMPTY_NODE","filtersNodes","getIndexedFilter","getIndex"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util_1 = require(\"@firebase/util\");\nvar Change_1 = require(\"../Change\");\nvar ChildrenNode_1 = require(\"../../snap/ChildrenNode\");\nvar PriorityIndex_1 = require(\"../../snap/indexes/PriorityIndex\");\n/**\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\n *\n * @constructor\n * @implements {NodeFilter}\n * @param {!Index} index\n */\nvar IndexedFilter = /** @class */ (function () {\n    function IndexedFilter(index_) {\n        this.index_ = index_;\n    }\n    IndexedFilter.prototype.updateChild = function (snap, key, newChild, affectedPath, source, optChangeAccumulator) {\n        util_1.assert(snap.isIndexed(this.index_), 'A node must be indexed if only a child is updated');\n        var oldChild = snap.getImmediateChild(key);\n        // Check if anything actually changed.\n        if (oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))) {\n            // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\n            // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\n            // to avoid treating these cases as \"nothing changed.\"\n            if (oldChild.isEmpty() == newChild.isEmpty()) {\n                // Nothing changed.\n                // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\n                //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\n                return snap;\n            }\n        }\n        if (optChangeAccumulator != null) {\n            if (newChild.isEmpty()) {\n                if (snap.hasChild(key)) {\n                    optChangeAccumulator.trackChildChange(Change_1.Change.childRemovedChange(key, oldChild));\n                }\n                else {\n                    util_1.assert(snap.isLeafNode(), 'A child remove without an old child only makes sense on a leaf node');\n                }\n            }\n            else if (oldChild.isEmpty()) {\n                optChangeAccumulator.trackChildChange(Change_1.Change.childAddedChange(key, newChild));\n            }\n            else {\n                optChangeAccumulator.trackChildChange(Change_1.Change.childChangedChange(key, newChild, oldChild));\n            }\n        }\n        if (snap.isLeafNode() && newChild.isEmpty()) {\n            return snap;\n        }\n        else {\n            // Make sure the node is indexed\n            return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\n        }\n    };\n    /**\n     * @inheritDoc\n     */\n    IndexedFilter.prototype.updateFullNode = function (oldSnap, newSnap, optChangeAccumulator) {\n        if (optChangeAccumulator != null) {\n            if (!oldSnap.isLeafNode()) {\n                oldSnap.forEachChild(PriorityIndex_1.PRIORITY_INDEX, function (key, childNode) {\n                    if (!newSnap.hasChild(key)) {\n                        optChangeAccumulator.trackChildChange(Change_1.Change.childRemovedChange(key, childNode));\n                    }\n                });\n            }\n            if (!newSnap.isLeafNode()) {\n                newSnap.forEachChild(PriorityIndex_1.PRIORITY_INDEX, function (key, childNode) {\n                    if (oldSnap.hasChild(key)) {\n                        var oldChild = oldSnap.getImmediateChild(key);\n                        if (!oldChild.equals(childNode)) {\n                            optChangeAccumulator.trackChildChange(Change_1.Change.childChangedChange(key, childNode, oldChild));\n                        }\n                    }\n                    else {\n                        optChangeAccumulator.trackChildChange(Change_1.Change.childAddedChange(key, childNode));\n                    }\n                });\n            }\n        }\n        return newSnap.withIndex(this.index_);\n    };\n    /**\n     * @inheritDoc\n     */\n    IndexedFilter.prototype.updatePriority = function (oldSnap, newPriority) {\n        if (oldSnap.isEmpty()) {\n            return ChildrenNode_1.ChildrenNode.EMPTY_NODE;\n        }\n        else {\n            return oldSnap.updatePriority(newPriority);\n        }\n    };\n    /**\n     * @inheritDoc\n     */\n    IndexedFilter.prototype.filtersNodes = function () {\n        return false;\n    };\n    /**\n     * @inheritDoc\n     */\n    IndexedFilter.prototype.getIndexedFilter = function () {\n        return this;\n    };\n    /**\n     * @inheritDoc\n     */\n    IndexedFilter.prototype.getIndex = function () {\n        return this.index_;\n    };\n    return IndexedFilter;\n}());\nexports.IndexedFilter = IndexedFilter;\n\n//# sourceMappingURL=IndexedFilter.js.map\n"]}]