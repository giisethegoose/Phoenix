["a812ad30935b09a2e37d187eefea2f344d8f4f50","6e5dd09c6743af6545b6abd9aa5147af1217cd44",["@firebase/util"],[99],{"version":3,"sources":["/home/giise/candidtwo/node_modules/@firebase/database/dist/cjs/src/core/util/CountedSet.js"],"names":["Object","defineProperty","exports","value","util_1","require","CountedSet","set","prototype","add","item","val","contains","key","get","undefined","remove","clear","isEmpty","count","getCount","each","fn","forEach","k","v","keys","push"],"mappings":"AAAA;;AAgBAA,OAAOC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C,EAAEC,OAAO,IAAT,EAA7C;AACA,IAAIC,SAASC,OAAT,kBAAJ;;AAMA,IAAIC,aAA4B,YAAY;AACxC,aAASA,UAAT,GAAsB;AAClB,aAAKC,GAAL,GAAW,EAAX;AACH;;AAKDD,eAAWE,SAAX,CAAqBC,GAArB,GAA2B,UAAUC,IAAV,EAAgBC,GAAhB,EAAqB;AAC5C,aAAKJ,GAAL,CAASG,IAAT,IAAiBC,QAAQ,IAAR,GAAeA,GAAf,GAAqB,IAAtC;AACH,KAFD;;AAOAL,eAAWE,SAAX,CAAqBI,QAArB,GAAgC,UAAUC,GAAV,EAAe;AAC3C,eAAOT,OAAOQ,QAAP,CAAgB,KAAKL,GAArB,EAA0BM,GAA1B,CAAP;AACH,KAFD;;AAOAP,eAAWE,SAAX,CAAqBM,GAArB,GAA2B,UAAUJ,IAAV,EAAgB;AACvC,eAAO,KAAKE,QAAL,CAAcF,IAAd,IAAsB,KAAKH,GAAL,CAASG,IAAT,CAAtB,GAAuCK,SAA9C;AACH,KAFD;;AAMAT,eAAWE,SAAX,CAAqBQ,MAArB,GAA8B,UAAUN,IAAV,EAAgB;AAC1C,eAAO,KAAKH,GAAL,CAASG,IAAT,CAAP;AACH,KAFD;;AAMAJ,eAAWE,SAAX,CAAqBS,KAArB,GAA6B,YAAY;AACrC,aAAKV,GAAL,GAAW,EAAX;AACH,KAFD;;AAOAD,eAAWE,SAAX,CAAqBU,OAArB,GAA+B,YAAY;AACvC,eAAOd,OAAOc,OAAP,CAAe,KAAKX,GAApB,CAAP;AACH,KAFD;;AAMAD,eAAWE,SAAX,CAAqBW,KAArB,GAA6B,YAAY;AACrC,eAAOf,OAAOgB,QAAP,CAAgB,KAAKb,GAArB,CAAP;AACH,KAFD;;AAOAD,eAAWE,SAAX,CAAqBa,IAArB,GAA4B,UAAUC,EAAV,EAAc;AACtClB,eAAOmB,OAAP,CAAe,KAAKhB,GAApB,EAAyB,UAAUiB,CAAV,EAAaC,CAAb,EAAgB;AAAE,mBAAOH,GAAGE,CAAH,EAAMC,CAAN,CAAP;AAAkB,SAA7D;AACH,KAFD;;AAOAnB,eAAWE,SAAX,CAAqBkB,IAArB,GAA4B,YAAY;AACpC,YAAIA,OAAO,EAAX;AACAtB,eAAOmB,OAAP,CAAe,KAAKhB,GAApB,EAAyB,UAAUiB,CAAV,EAAa;AAClCE,iBAAKC,IAAL,CAAUH,CAAV;AACH,SAFD;AAGA,eAAOE,IAAP;AACH,KAND;AAOA,WAAOpB,UAAP;AACH,CArE+B,EAAhC;AAsEAJ,QAAQI,UAAR,GAAqBA,UAArB","sourcesContent":["\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util_1 = require(\"@firebase/util\");\n/**\n * Implements a set with a count of elements.\n *\n * @template K, V\n */\nvar CountedSet = /** @class */ (function () {\n    function CountedSet() {\n        this.set = {};\n    }\n    /**\n     * @param {!K} item\n     * @param {V} val\n     */\n    CountedSet.prototype.add = function (item, val) {\n        this.set[item] = val !== null ? val : true;\n    };\n    /**\n     * @param {!K} key\n     * @return {boolean}\n     */\n    CountedSet.prototype.contains = function (key) {\n        return util_1.contains(this.set, key);\n    };\n    /**\n     * @param {!K} item\n     * @return {V}\n     */\n    CountedSet.prototype.get = function (item) {\n        return this.contains(item) ? this.set[item] : undefined;\n    };\n    /**\n     * @param {!K} item\n     */\n    CountedSet.prototype.remove = function (item) {\n        delete this.set[item];\n    };\n    /**\n     * Deletes everything in the set\n     */\n    CountedSet.prototype.clear = function () {\n        this.set = {};\n    };\n    /**\n     * True if there's nothing in the set\n     * @return {boolean}\n     */\n    CountedSet.prototype.isEmpty = function () {\n        return util_1.isEmpty(this.set);\n    };\n    /**\n     * @return {number} The number of items in the set\n     */\n    CountedSet.prototype.count = function () {\n        return util_1.getCount(this.set);\n    };\n    /**\n     * Run a function on each k,v pair in the set\n     * @param {function(K, V)} fn\n     */\n    CountedSet.prototype.each = function (fn) {\n        util_1.forEach(this.set, function (k, v) { return fn(k, v); });\n    };\n    /**\n     * Mostly for debugging\n     * @return {Array.<K>} The keys present in this CountedSet\n     */\n    CountedSet.prototype.keys = function () {\n        var keys = [];\n        util_1.forEach(this.set, function (k) {\n            keys.push(k);\n        });\n        return keys;\n    };\n    return CountedSet;\n}());\nexports.CountedSet = CountedSet;\n\n//# sourceMappingURL=CountedSet.js.map\n"]}]