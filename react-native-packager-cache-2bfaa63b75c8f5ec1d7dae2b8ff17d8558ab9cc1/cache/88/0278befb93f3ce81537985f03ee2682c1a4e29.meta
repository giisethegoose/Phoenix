["acd700a230a25abcd111997e23aaa0617028bacc","a6854b2e0f90a0bab2cdff3f973cd71c819caeb2",["react-native"],[122],{"version":3,"sources":["/home/giise/candidtwo/node_modules/react-native-fetch-blob/class/RNFetchBlobSession.js"],"names":["RNFetchBlob","emitter","sessions","RNFetchBlobSession","name","val","list","Array","isArray","path","push","i","splice","Promise","resolve","reject","removeSession","err"],"mappings":";;;;;AAIA;;AAMA,IAAMA,cAAc,2BAAcA,WAAlC;AACA,IAAMC,yCAAN;;AAEA,IAAIC,WAAW,EAAf;;IAEqBC,kB;;;+BAQDC,I,EAAiB;AACjC,aAAOF,SAASE,IAAT,CAAP;AACD;;;+BAEiBA,I,EAAaC,G,EAAS;AACtCH,eAASE,IAAT,IAAiBC,GAAjB;AACD;;;kCAEoBD,I,EAAa;AAChC,aAAOF,SAASE,IAAT,CAAP;AACD;;;AAED,8BAAYA,IAAZ,EAAyBE,IAAzB,EAA6C;AAAA;;AAC3C,SAAKF,IAAL,GAAYA,IAAZ;AACA,QAAG,CAACF,SAASE,IAAT,CAAJ,EAAoB;AAClB,UAAGG,MAAMC,OAAN,CAAcF,IAAd,CAAH,EACAJ,SAASE,IAAT,IAAiBE,IAAjB,CADA,KAGAJ,SAASE,IAAT,IAAiB,EAAjB;AACD;AACF;;;;wBAEGK,I,EAAgC;AAClCP,eAAS,KAAKE,IAAd,EAAoBM,IAApB,CAAyBD,IAAzB;AACA,aAAO,IAAP;AACD;;;2BAEMA,I,EAAgC;AACrC,UAAIH,OAAOJ,SAAS,KAAKE,IAAd,CAAX;AACA,WAAI,IAAIO,CAAR,IAAaL,IAAb,EAAmB;AACjB,YAAGA,KAAKK,CAAL,MAAYF,IAAf,EAAqB;AACnBP,mBAAS,KAAKE,IAAd,EAAoBQ,MAApB,CAA2BD,CAA3B,EAA8B,CAA9B;AACA;AACD;AACF;AACD,aAAO,IAAP;AACD;;;2BAEoB;AACnB,aAAOT,SAAS,KAAKE,IAAd,CAAP;AACD;;;8BAEiB;AAAA;;AAChB,aAAO,IAAIS,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCf,oBAAYgB,aAAZ,CAA0Bd,SAAS,MAAKE,IAAd,CAA1B,EAA+C,UAACa,GAAD,EAAS;AACtD,cAAGA,GAAH,EACEF,OAAOE,GAAP,EADF,KAEK;AACH,mBAAOf,SAAS,MAAKE,IAAd,CAAP;AACAU;AACD;AACF,SAPD;AAQD,OATM,CAAP;AAUD;;;;;kBA7DkBX,kB","sourcesContent":["// Copyright 2016 wkh237@github. All rights reserved.\n// Use of this source code is governed by a MIT-style license that can be\n// found in the LICENSE file.\n\nimport {\n NativeModules,\n DeviceEventEmitter,\n NativeAppEventEmitter,\n} from 'react-native'\n\nconst RNFetchBlob = NativeModules.RNFetchBlob\nconst emitter = DeviceEventEmitter\n\nlet sessions = {}\n\nexport default class RNFetchBlobSession {\n\n  add : (path:string) => RNFetchBlobSession;\n  remove : (path:string) => RNFetchBlobSession;\n  dispose : () => Promise;\n  list : () => Array<string>;\n  name : string;\n\n  static getSession(name:string):any {\n    return sessions[name]\n  }\n\n  static setSession(name:string, val:any) {\n    sessions[name] = val\n  }\n\n  static removeSession(name:string) {\n    delete sessions[name]\n  }\n\n  constructor(name:string, list:Array<string>) {\n    this.name = name\n    if(!sessions[name]) {\n      if(Array.isArray(list))\n      sessions[name] = list\n      else\n      sessions[name] = []\n    }\n  }\n\n  add(path:string):RNFetchBlobSession {\n    sessions[this.name].push(path)\n    return this\n  }\n\n  remove(path:string):RNFetchBlobSession {\n    let list = sessions[this.name]\n    for(let i in list) {\n      if(list[i] === path) {\n        sessions[this.name].splice(i, 1)\n        break;\n      }\n    }\n    return this\n  }\n\n  list():Array<string> {\n    return sessions[this.name]\n  }\n\n  dispose():Promise {\n    return new Promise((resolve, reject) => {\n      RNFetchBlob.removeSession(sessions[this.name], (err) => {\n        if(err)\n          reject(err)\n        else {\n          delete sessions[this.name]\n          resolve()\n        }\n      })\n    })\n  }\n\n}\n"]}]