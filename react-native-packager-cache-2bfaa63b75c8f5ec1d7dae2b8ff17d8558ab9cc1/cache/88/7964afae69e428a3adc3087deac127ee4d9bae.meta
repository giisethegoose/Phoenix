["ce4b79f0b8c477654224aa131f823f7cf63aa513","7d5eaeb76a187fde5f0f0cb3ee5564d076a4c97c",["react","react-native"],[116,212],{"version":3,"sources":["/home/giise/candidtwo/node_modules/react-navigation/src/views/TabView/TabBarIcon.js"],"names":["React","TabBarIcon","props","position","scene","navigation","activeTintColor","inactiveTintColor","style","route","index","routes","state","inputRange","map","x","i","activeOpacity","interpolate","outputRange","inactiveOpacity","styles","icon","opacity","renderIcon","focused","tintColor","PureComponent","create","top","left","right","bottom","alignItems","justifyContent"],"mappings":";;;;;AAEA;;IAAYA,K;;AACZ;;IAoBqBC,U;;;;;;;;;;6BACV;AAAA,mBAQH,KAAKC,KARF;AAAA,UAELC,QAFK,UAELA,QAFK;AAAA,UAGLC,KAHK,UAGLA,KAHK;AAAA,UAILC,UAJK,UAILA,UAJK;AAAA,UAKLC,eALK,UAKLA,eALK;AAAA,UAMLC,iBANK,UAMLA,iBANK;AAAA,UAOLC,KAPK,UAOLA,KAPK;AAAA,UASCC,KATD,GASkBL,KATlB,CASCK,KATD;AAAA,UASQC,KATR,GASkBN,KATlB,CASQM,KATR;AAAA,UAUCC,MAVD,GAUYN,WAAWO,KAVvB,CAUCD,MAVD;;AAYP,UAAME,cAAc,CAAC,CAAf,wCAAqBF,OAAOG,GAAP,CAAW,UAACC,CAAD,EAAOC,CAAP;AAAA,eAAqBA,CAArB;AAAA,OAAX,CAArB,EAAN;AACA,UAAMC,gBAAgBd,SAASe,WAAT,CAAqB;AACzCL,8BADyC;AAEzCM,qBAAaN,WAAWC,GAAX,CAAe,UAACE,CAAD;AAAA,iBAAgBA,MAAMN,KAAN,GAAc,CAAd,GAAkB,CAAlC;AAAA,SAAf;AAF4B,OAArB,CAAtB;AAIA,UAAMU,kBAAkBjB,SAASe,WAAT,CAAqB;AAC3CL,8BAD2C;AAE3CM,qBAAaN,WAAWC,GAAX,CAAe,UAACE,CAAD;AAAA,iBAAgBA,MAAMN,KAAN,GAAc,CAAd,GAAkB,CAAlC;AAAA,SAAf;AAF8B,OAArB,CAAxB;;AAMA,aACE;AAAA;AAAA,UAAM,OAAOF,KAAb;AACE;AAAA,gCAAU,IAAV;AAAA,YAAe,OAAO,CAACa,OAAOC,IAAR,EAAc,EAAEC,SAASN,aAAX,EAAd,CAAtB;AACG,eAAKf,KAAL,CAAWsB,UAAX,CAAsB;AACrBf,wBADqB;AAErBC,wBAFqB;AAGrBe,qBAAS,IAHY;AAIrBC,uBAAWpB;AAJU,WAAtB;AADH,SADF;AASE;AAAA,gCAAU,IAAV;AAAA,YAAe,OAAO,CAACe,OAAOC,IAAR,EAAc,EAAEC,SAASH,eAAX,EAAd,CAAtB;AACG,eAAKlB,KAAL,CAAWsB,UAAX,CAAsB;AACrBf,wBADqB;AAErBC,wBAFqB;AAGrBe,qBAAS,KAHY;AAIrBC,uBAAWnB;AAJU,WAAtB;AADH;AATF,OADF;AAoBD;;;EA5CqCP,MAAM2B,a;;kBAAzB1B,U;;;AA+CrB,IAAMoB,SAAS,wBAAWO,MAAX,CAAkB;AAC/BN,QAAM;AAIJnB,cAAU,UAJN;AAKJ0B,SAAK,CALD;AAMJC,UAAM,CANF;AAOJC,WAAO,CAPH;AAQJC,YAAQ,CARJ;AASJC,gBAAY,QATR;AAUJC,oBAAgB;AAVZ;AADyB,CAAlB,CAAf","sourcesContent":["/* @flow */\n\nimport * as React from 'react';\nimport { Animated, View, StyleSheet } from 'react-native';\n\nimport type {\n  NavigationState,\n  NavigationScreenProp,\n  ViewStyleProp,\n} from '../../TypeDefinition';\n\nimport type { TabScene } from './TabView';\n\ntype Props = {\n  activeTintColor: string,\n  inactiveTintColor: string,\n  scene: TabScene,\n  position: Animated.Value,\n  navigation: NavigationScreenProp<NavigationState>,\n  renderIcon: (scene: TabScene) => React.Node,\n  style?: ViewStyleProp,\n};\n\nexport default class TabBarIcon extends React.PureComponent<Props> {\n  render() {\n    const {\n      position,\n      scene,\n      navigation,\n      activeTintColor,\n      inactiveTintColor,\n      style,\n    } = this.props;\n    const { route, index } = scene;\n    const { routes } = navigation.state;\n    // Prepend '-1', so there are always at least 2 items in inputRange\n    const inputRange = [-1, ...routes.map((x: *, i: number) => i)];\n    const activeOpacity = position.interpolate({\n      inputRange,\n      outputRange: inputRange.map((i: number) => (i === index ? 1 : 0)),\n    });\n    const inactiveOpacity = position.interpolate({\n      inputRange,\n      outputRange: inputRange.map((i: number) => (i === index ? 0 : 1)),\n    });\n    // We render the icon twice at the same position on top of each other:\n    // active and inactive one, so we can fade between them.\n    return (\n      <View style={style}>\n        <Animated.View style={[styles.icon, { opacity: activeOpacity }]}>\n          {this.props.renderIcon({\n            route,\n            index,\n            focused: true,\n            tintColor: activeTintColor,\n          })}\n        </Animated.View>\n        <Animated.View style={[styles.icon, { opacity: inactiveOpacity }]}>\n          {this.props.renderIcon({\n            route,\n            index,\n            focused: false,\n            tintColor: inactiveTintColor,\n          })}\n        </Animated.View>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  icon: {\n    // We render the icon twice at the same position on top of each other:\n    // active and inactive one, so we can fade between them:\n    // Cover the whole iconContainer:\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n"]}]