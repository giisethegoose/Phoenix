["7a83490fdb53907c8594f2c7a11b26873b417330","bd1d28a4f14fd6bc45497d2e3f41fde9af438d50",["./constants","./error","./failrequest","./location","./promise_external","./requestmap","./type"],[102,146,186,229,270,320,356],{"version":3,"sources":["/home/giise/candidtwo/node_modules/@firebase/storage/dist/cjs/src/implementation/authwrapper.js"],"names":["Object","defineProperty","exports","value","constants","require","errorsExports","failrequest_1","location_1","promiseimpl","requestmap_1","type","AuthWrapper","app","maker","requestMaker","service","pool","bucket_","deleted_","app_","options","isDef","extractBucket_","storageRefMaker_","requestMaker_","pool_","service_","maxOperationRetryTime_","defaultMaxOperationRetryTime","maxUploadRetryTime_","defaultMaxUploadRetryTime","requestMap_","RequestMap","config","bucketString","configOption","loc","Location","makeFromBucketSpec","bucket","prototype","getAuthToken","INTERNAL","getToken","then","response","accessToken","_error","resolve","appDeleted","makeStorageReference","makeRequest","requestInfo","authToken","request","addRequest","FailRequest","deleteApp","clear","maxUploadRetryTime","setMaxUploadRetryTime","time","maxOperationRetryTime","setMaxOperationRetryTime"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar constants = require(\"./constants\");\nvar errorsExports = require(\"./error\");\nvar failrequest_1 = require(\"./failrequest\");\nvar location_1 = require(\"./location\");\nvar promiseimpl = require(\"./promise_external\");\nvar requestmap_1 = require(\"./requestmap\");\nvar type = require(\"./type\");\n/**\n * @param app If null, getAuthToken always resolves with null.\n * @param service The storage service associated with this auth wrapper.\n *     Untyped to avoid circular type dependencies.\n * @struct\n */\nvar AuthWrapper = /** @class */ (function () {\n    function AuthWrapper(app, maker, requestMaker, service, pool) {\n        this.bucket_ = null;\n        this.deleted_ = false;\n        this.app_ = app;\n        if (this.app_ !== null) {\n            var options = this.app_.options;\n            if (type.isDef(options)) {\n                this.bucket_ = AuthWrapper.extractBucket_(options);\n            }\n        }\n        this.storageRefMaker_ = maker;\n        this.requestMaker_ = requestMaker;\n        this.pool_ = pool;\n        this.service_ = service;\n        this.maxOperationRetryTime_ = constants.defaultMaxOperationRetryTime;\n        this.maxUploadRetryTime_ = constants.defaultMaxUploadRetryTime;\n        this.requestMap_ = new requestmap_1.RequestMap();\n    }\n    AuthWrapper.extractBucket_ = function (config) {\n        var bucketString = config[constants.configOption] || null;\n        if (bucketString == null) {\n            return null;\n        }\n        var loc = location_1.Location.makeFromBucketSpec(bucketString);\n        return loc.bucket;\n    };\n    AuthWrapper.prototype.getAuthToken = function () {\n        // TODO(andysoto): remove ifDef checks after firebase-app implements stubs\n        // (b/28673818).\n        if (this.app_ !== null &&\n            type.isDef(this.app_.INTERNAL) &&\n            type.isDef(this.app_.INTERNAL.getToken)) {\n            return this.app_.INTERNAL.getToken().then(function (response) {\n                if (response !== null) {\n                    return response.accessToken;\n                }\n                else {\n                    return null;\n                }\n            }, function (_error) {\n                return null;\n            });\n        }\n        else {\n            return promiseimpl.resolve(null);\n        }\n    };\n    AuthWrapper.prototype.bucket = function () {\n        if (this.deleted_) {\n            throw errorsExports.appDeleted();\n        }\n        else {\n            return this.bucket_;\n        }\n    };\n    /**\n     * The service associated with this auth wrapper. Untyped to avoid circular\n     * type dependencies.\n     */\n    AuthWrapper.prototype.service = function () {\n        return this.service_;\n    };\n    /**\n     * Returns a new firebaseStorage.Reference object referencing this AuthWrapper\n     * at the given Location.\n     * @param loc The Location.\n     * @return Actually a firebaseStorage.Reference, typing not allowed\n     *     because of circular dependency problems.\n     */\n    AuthWrapper.prototype.makeStorageReference = function (loc) {\n        return this.storageRefMaker_(this, loc);\n    };\n    AuthWrapper.prototype.makeRequest = function (requestInfo, authToken) {\n        if (!this.deleted_) {\n            var request = this.requestMaker_(requestInfo, authToken, this.pool_);\n            this.requestMap_.addRequest(request);\n            return request;\n        }\n        else {\n            return new failrequest_1.FailRequest(errorsExports.appDeleted());\n        }\n    };\n    /**\n     * Stop running requests and prevent more from being created.\n     */\n    AuthWrapper.prototype.deleteApp = function () {\n        this.deleted_ = true;\n        this.app_ = null;\n        this.requestMap_.clear();\n    };\n    AuthWrapper.prototype.maxUploadRetryTime = function () {\n        return this.maxUploadRetryTime_;\n    };\n    AuthWrapper.prototype.setMaxUploadRetryTime = function (time) {\n        this.maxUploadRetryTime_ = time;\n    };\n    AuthWrapper.prototype.maxOperationRetryTime = function () {\n        return this.maxOperationRetryTime_;\n    };\n    AuthWrapper.prototype.setMaxOperationRetryTime = function (time) {\n        this.maxOperationRetryTime_ = time;\n    };\n    return AuthWrapper;\n}());\nexports.AuthWrapper = AuthWrapper;\n\n//# sourceMappingURL=authwrapper.js.map\n"]}]