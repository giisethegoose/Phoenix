["4566ec79f284cdb89f6ea1c9e1b448b70d365b7d","8ead85aa7824ef722d7ba532bdf4365f278ff5fa",["@firebase/util","./Path"],[99,139,171],{"version":3,"sources":["/home/giise/candidtwo/node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js"],"names":["Object","defineProperty","exports","value","util_1","require","Path_1","util_2","TreeNode","children","childCount","Tree","name_","parent_","node_","prototype","subTree","pathObj","path","Path","child","next","getFront","childNode","safeGet","popFront","getValue","setValue","assert","updateParents_","clear","hasChildren","isEmpty","forEachChild","action","_this","forEach","childTree","forEachDescendant","includeSelf","childrenFirst","forEachAncestor","node","parent","forEachImmediateDescendantWithValue","name","updateChild_","childName","childEmpty","childExists","contains"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util_1 = require(\"@firebase/util\");\nvar Path_1 = require(\"./Path\");\nvar util_2 = require(\"@firebase/util\");\n/**\n * Node in a Tree.\n */\nvar TreeNode = /** @class */ (function () {\n    function TreeNode() {\n        // TODO: Consider making accessors that create children and value lazily or\n        // separate Internal / Leaf 'types'.\n        this.children = {};\n        this.childCount = 0;\n        this.value = null;\n    }\n    return TreeNode;\n}());\nexports.TreeNode = TreeNode;\n/**\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\n * children.\n */\nvar Tree = /** @class */ (function () {\n    /**\n     * @template T\n     * @param {string=} name_ Optional name of the node.\n     * @param {Tree=} parent_ Optional parent node.\n     * @param {TreeNode=} node_ Optional node to wrap.\n     */\n    function Tree(name_, parent_, node_) {\n        if (name_ === void 0) { name_ = ''; }\n        if (parent_ === void 0) { parent_ = null; }\n        if (node_ === void 0) { node_ = new TreeNode(); }\n        this.name_ = name_;\n        this.parent_ = parent_;\n        this.node_ = node_;\n    }\n    /**\n     * Returns a sub-Tree for the given path.\n     *\n     * @param {!(string|Path)} pathObj Path to look up.\n     * @return {!Tree.<T>} Tree for path.\n     */\n    Tree.prototype.subTree = function (pathObj) {\n        // TODO: Require pathObj to be Path?\n        var path = pathObj instanceof Path_1.Path ? pathObj : new Path_1.Path(pathObj);\n        var child = this, next;\n        while ((next = path.getFront()) !== null) {\n            var childNode = util_2.safeGet(child.node_.children, next) || new TreeNode();\n            child = new Tree(next, child, childNode);\n            path = path.popFront();\n        }\n        return child;\n    };\n    /**\n     * Returns the data associated with this tree node.\n     *\n     * @return {?T} The data or null if no data exists.\n     */\n    Tree.prototype.getValue = function () {\n        return this.node_.value;\n    };\n    /**\n     * Sets data to this tree node.\n     *\n     * @param {!T} value Value to set.\n     */\n    Tree.prototype.setValue = function (value) {\n        util_1.assert(typeof value !== 'undefined', 'Cannot set value to undefined');\n        this.node_.value = value;\n        this.updateParents_();\n    };\n    /**\n     * Clears the contents of the tree node (its value and all children).\n     */\n    Tree.prototype.clear = function () {\n        this.node_.value = null;\n        this.node_.children = {};\n        this.node_.childCount = 0;\n        this.updateParents_();\n    };\n    /**\n     * @return {boolean} Whether the tree has any children.\n     */\n    Tree.prototype.hasChildren = function () {\n        return this.node_.childCount > 0;\n    };\n    /**\n     * @return {boolean} Whether the tree is empty (no value or children).\n     */\n    Tree.prototype.isEmpty = function () {\n        return this.getValue() === null && !this.hasChildren();\n    };\n    /**\n     * Calls action for each child of this tree node.\n     *\n     * @param {function(!Tree.<T>)} action Action to be called for each child.\n     */\n    Tree.prototype.forEachChild = function (action) {\n        var _this = this;\n        util_2.forEach(this.node_.children, function (child, childTree) {\n            action(new Tree(child, _this, childTree));\n        });\n    };\n    /**\n     * Does a depth-first traversal of this node's descendants, calling action for each one.\n     *\n     * @param {function(!Tree.<T>)} action Action to be called for each child.\n     * @param {boolean=} includeSelf Whether to call action on this node as well. Defaults to\n     *   false.\n     * @param {boolean=} childrenFirst Whether to call action on children before calling it on\n     *   parent.\n     */\n    Tree.prototype.forEachDescendant = function (action, includeSelf, childrenFirst) {\n        if (includeSelf && !childrenFirst)\n            action(this);\n        this.forEachChild(function (child) {\n            child.forEachDescendant(action, /*includeSelf=*/ true, childrenFirst);\n        });\n        if (includeSelf && childrenFirst)\n            action(this);\n    };\n    /**\n     * Calls action on each ancestor node.\n     *\n     * @param {function(!Tree.<T>)} action Action to be called on each parent; return\n     *   true to abort.\n     * @param {boolean=} includeSelf Whether to call action on this node as well.\n     * @return {boolean} true if the action callback returned true.\n     */\n    Tree.prototype.forEachAncestor = function (action, includeSelf) {\n        var node = includeSelf ? this : this.parent();\n        while (node !== null) {\n            if (action(node)) {\n                return true;\n            }\n            node = node.parent();\n        }\n        return false;\n    };\n    /**\n     * Does a depth-first traversal of this node's descendants.  When a descendant with a value\n     * is found, action is called on it and traversal does not continue inside the node.\n     * Action is *not* called on this node.\n     *\n     * @param {function(!Tree.<T>)} action Action to be called for each child.\n     */\n    Tree.prototype.forEachImmediateDescendantWithValue = function (action) {\n        this.forEachChild(function (child) {\n            if (child.getValue() !== null)\n                action(child);\n            else\n                child.forEachImmediateDescendantWithValue(action);\n        });\n    };\n    /**\n     * @return {!Path} The path of this tree node, as a Path.\n     */\n    Tree.prototype.path = function () {\n        return new Path_1.Path(this.parent_ === null\n            ? this.name_\n            : this.parent_.path() + '/' + this.name_);\n    };\n    /**\n     * @return {string} The name of the tree node.\n     */\n    Tree.prototype.name = function () {\n        return this.name_;\n    };\n    /**\n     * @return {?Tree} The parent tree node, or null if this is the root of the tree.\n     */\n    Tree.prototype.parent = function () {\n        return this.parent_;\n    };\n    /**\n     * Adds or removes this child from its parent based on whether it's empty or not.\n     *\n     * @private\n     */\n    Tree.prototype.updateParents_ = function () {\n        if (this.parent_ !== null)\n            this.parent_.updateChild_(this.name_, this);\n    };\n    /**\n     * Adds or removes the passed child to this tree node, depending on whether it's empty.\n     *\n     * @param {string} childName The name of the child to update.\n     * @param {!Tree.<T>} child The child to update.\n     * @private\n     */\n    Tree.prototype.updateChild_ = function (childName, child) {\n        var childEmpty = child.isEmpty();\n        var childExists = util_2.contains(this.node_.children, childName);\n        if (childEmpty && childExists) {\n            delete this.node_.children[childName];\n            this.node_.childCount--;\n            this.updateParents_();\n        }\n        else if (!childEmpty && !childExists) {\n            this.node_.children[childName] = child.node_;\n            this.node_.childCount++;\n            this.updateParents_();\n        }\n    };\n    return Tree;\n}());\nexports.Tree = Tree;\n\n//# sourceMappingURL=Tree.js.map\n"]}]