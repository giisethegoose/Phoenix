["506ff157d6a07d90460fc3f428186299a027cf57","eb9f76aba5eb8bc9c6f6791203db77942d7a495b",["../utils/invariant","./getScreenForRouteName","../addNavigationHelpers","./validateScreenOptions"],[350,466,610,753],{"version":3,"sources":["/home/giise/candidtwo/node_modules/react-navigation/src/routers/createConfigGetter.js"],"names":["applyConfig","configurer","navigationOptions","configProps","routeConfigs","navigatorScreenConfig","navigation","screenProps","state","dispatch","route","routeName","Component","outputConfig","router","routes","index","Error","JSON","stringify","childRoute","childNavigation","getScreenOptions","routeConfig","routeScreenConfig","componentScreenConfig","configOptions"],"mappings":";;;;;;AAIA;;;;AAEA;;;;AACA;;;;AACA;;;;;;AAWA,SAASA,WAAT,CACEC,UADF,EAEEC,iBAFF,EAGEC,WAHF,EAIK;AACH,MAAI,OAAOF,UAAP,KAAsB,UAA1B,EAAsC;AACpC,wBACKC,iBADL,EAEKD,wBACEE,WADF;AAEDD;AAFC,OAFL;AAOD;AACD,MAAI,OAAOD,UAAP,KAAsB,QAA1B,EAAoC;AAClC,wBACKC,iBADL,EAEKD,UAFL;AAID;AACD,SAAOC,iBAAP;AACD;;kBAEc,UACbE,YADa,EAEbC,qBAFa;AAAA,SAGV,UAACC,UAAD,EAAoDC,WAApD,EAAuE;AAAA,QAClEC,KADkE,GAC9CF,UAD8C,CAClEE,KADkE;AAAA,QAC3DC,QAD2D,GAC9CH,UAD8C,CAC3DG,QAD2D;;AAE1E,QAAMC,QAAQF,KAAd;;AAEA,6BACEE,MAAMC,SAAN,IAAmB,OAAOD,MAAMC,SAAb,KAA2B,QADhD,EAEE,gEAFF;;AAKA,QAAMC,YAAY,qCAAsBR,YAAtB,EAAoCM,MAAMC,SAA1C,CAAlB;;AAEA,QAAIE,eAAe,EAAnB;;AAEA,QAAMC,SAASF,UAAUE,MAAzB;AACA,QAAIA,MAAJ,EAAY;AAAA,iBAEiBJ,KAFjB;AAAA,UAEFK,MAFE,QAEFA,MAFE;AAAA,UAEMC,KAFN,QAEMA,KAFN;;AAGV,UAAI,CAACN,KAAD,IAAU,CAACK,MAAX,IAAqBC,SAAS,IAAlC,EAAwC;AACtC,cAAM,IAAIC,KAAJ,iDAC0CC,KAAKC,SAAL,CAAeT,KAAf,CAD1C,CAAN;AAGD;AACD,UAAMU,aAAaL,OAAOC,KAAP,CAAnB;AACA,UAAMK,kBAAkB,oCAAqB;AAC3Cb,eAAOY,UADoC;AAE3CX;AAF2C,OAArB,CAAxB;AAIAI,qBAAeC,OAAOQ,gBAAP,CAAwBD,eAAxB,EAAyCd,WAAzC,CAAf;AACD;;AAED,QAAMgB,cAAcnB,aAAaM,MAAMC,SAAnB,CAApB;;AAEA,QAAMa,oBAAoBD,YAAYrB,iBAAtC;AACA,QAAMuB,wBAAwBb,UAAUV,iBAAxC;;AAEA,QAAMwB,gBAAgB,EAAEpB,sBAAF,EAAcC,aAAaA,eAAe,EAA1C,EAAtB;;AAEAM,mBAAeb,YACbK,qBADa,EAEbQ,YAFa,EAGba,aAHa,CAAf;AAKAb,mBAAeb,YACbyB,qBADa,EAEbZ,YAFa,EAGba,aAHa,CAAf;AAKAb,mBAAeb,YAAYwB,iBAAZ,EAA+BX,YAA/B,EAA6Ca,aAA7C,CAAf;;AAEA,yCAAsBb,YAAtB,EAAoCH,KAApC;;AAEA,WAAOG,YAAP;AACD,GAvDc;AAAA,C","sourcesContent":["/*\n * @flow\n */\n\nimport invariant from '../utils/invariant';\n\nimport getScreenForRouteName from './getScreenForRouteName';\nimport addNavigationHelpers from '../addNavigationHelpers';\nimport validateScreenOptions from './validateScreenOptions';\n\nimport type {\n  NavigationScreenProp,\n  NavigationRoute,\n  NavigationStateRoute,\n  NavigationRouteConfigMap,\n  NavigationScreenConfig,\n  NavigationScreenConfigProps,\n} from '../TypeDefinition';\n\nfunction applyConfig<T: {}>(\n  configurer: ?NavigationScreenConfig<T>,\n  navigationOptions: any,\n  configProps: NavigationScreenConfigProps\n): * {\n  if (typeof configurer === 'function') {\n    return {\n      ...navigationOptions,\n      ...configurer({\n        ...configProps,\n        navigationOptions,\n      }),\n    };\n  }\n  if (typeof configurer === 'object') {\n    return {\n      ...navigationOptions,\n      ...configurer,\n    };\n  }\n  return navigationOptions;\n}\n\nexport default (\n  routeConfigs: NavigationRouteConfigMap,\n  navigatorScreenConfig?: NavigationScreenConfig<*>\n) => (navigation: NavigationScreenProp<NavigationRoute>, screenProps: *) => {\n  const { state, dispatch } = navigation;\n  const route = state;\n\n  invariant(\n    route.routeName && typeof route.routeName === 'string',\n    'Cannot get config because the route does not have a routeName.'\n  );\n\n  const Component = getScreenForRouteName(routeConfigs, route.routeName);\n\n  let outputConfig = {};\n\n  const router = Component.router;\n  if (router) {\n    // $FlowFixMe\n    const { routes, index } = (route: NavigationStateRoute);\n    if (!route || !routes || index == null) {\n      throw new Error(\n        `Expect nav state to have routes and index, ${JSON.stringify(route)}`\n      );\n    }\n    const childRoute = routes[index];\n    const childNavigation = addNavigationHelpers({\n      state: childRoute,\n      dispatch,\n    });\n    outputConfig = router.getScreenOptions(childNavigation, screenProps);\n  }\n\n  const routeConfig = routeConfigs[route.routeName];\n\n  const routeScreenConfig = routeConfig.navigationOptions;\n  const componentScreenConfig = Component.navigationOptions;\n\n  const configOptions = { navigation, screenProps: screenProps || {} };\n\n  outputConfig = applyConfig(\n    navigatorScreenConfig,\n    outputConfig,\n    configOptions\n  );\n  outputConfig = applyConfig(\n    componentScreenConfig,\n    outputConfig,\n    configOptions\n  );\n  outputConfig = applyConfig(routeScreenConfig, outputConfig, configOptions);\n\n  validateScreenOptions(outputConfig, route);\n\n  return outputConfig;\n};\n"]}]