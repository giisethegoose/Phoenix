["8b6aeb41059f7f7f1a73382d82cd066f70b508ce","dc140c0127d46e5204f8fefdcd36e2d46ff6017c",["@firebase/util","./Path","../SparseSnapshotTree","../snap/LeafNode","../snap/nodeFromJSON","../snap/indexes/PriorityIndex"],[99,139,185,236,286,341],{"version":3,"sources":["/home/giise/candidtwo/node_modules/@firebase/database/dist/cjs/src/core/util/ServerValues.js"],"names":["Object","defineProperty","exports","value","util_1","require","Path_1","SparseSnapshotTree_1","LeafNode_1","nodeFromJSON_1","PriorityIndex_1","generateWithValues","values","Date","getTime","resolveDeferredValue","serverValues","assert","resolveDeferredValueTree","tree","resolvedTree","SparseSnapshotTree","forEachTree","Path","path","node","remember","resolveDeferredValueSnapshot","rawPri","getPriority","val","priority","newNode","isLeafNode","leafNode","getValue","LeafNode","nodeFromJSON","childrenNode","updatePriority","forEachChild","PRIORITY_INDEX","childName","childNode","newChildNode","updateImmediateChild"],"mappings":"AAAA;;AAgBAA,OAAOC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C,EAAEC,OAAO,IAAT,EAA7C;AACA,IAAIC,SAASC,OAAT,kBAAJ;AACA,IAAIC,SAASD,QAAQ,QAAR,CAAb;AACA,IAAIE,uBAAuBF,QAAQ,uBAAR,CAA3B;AACA,IAAIG,aAAaH,QAAQ,kBAAR,CAAjB;AACA,IAAII,iBAAiBJ,QAAQ,sBAAR,CAArB;AACA,IAAIK,kBAAkBL,QAAQ,+BAAR,CAAtB;;AAMAH,QAAQS,kBAAR,GAA6B,UAAUC,MAAV,EAAkB;AAC3CA,aAASA,UAAU,EAAnB;AACAA,WAAO,WAAP,IAAsBA,OAAO,WAAP,KAAuB,IAAIC,IAAJ,GAAWC,OAAX,EAA7C;AACA,WAAOF,MAAP;AACH,CAJD;;AAYAV,QAAQa,oBAAR,GAA+B,UAAUZ,KAAV,EAAiBa,YAAjB,EAA+B;AAC1D,QAAI,CAACb,KAAD,IAAU,OAAOA,KAAP,KAAiB,QAA/B,EAAyC;AACrC,eAAOA,KAAP;AACH,KAFD,MAGK;AACDC,eAAOa,MAAP,CAAc,SAASd,KAAvB,EAA8B,2CAA9B;AACA,eAAOa,aAAab,MAAM,KAAN,CAAb,CAAP;AACH;AACJ,CARD;;AAgBAD,QAAQgB,wBAAR,GAAmC,UAAUC,IAAV,EAAgBH,YAAhB,EAA8B;AAC7D,QAAII,eAAe,IAAIb,qBAAqBc,kBAAzB,EAAnB;AACAF,SAAKG,WAAL,CAAiB,IAAIhB,OAAOiB,IAAX,CAAgB,EAAhB,CAAjB,EAAsC,UAAUC,IAAV,EAAgBC,IAAhB,EAAsB;AACxDL,qBAAaM,QAAb,CAAsBF,IAAtB,EAA4BtB,QAAQyB,4BAAR,CAAqCF,IAArC,EAA2CT,YAA3C,CAA5B;AACH,KAFD;AAGA,WAAOI,YAAP;AACH,CAND;;AAeAlB,QAAQyB,4BAAR,GAAuC,UAAUF,IAAV,EAAgBT,YAAhB,EAA8B;AACjE,QAAIY,SAASH,KAAKI,WAAL,GAAmBC,GAAnB,EAAb;AACA,QAAIC,WAAW7B,QAAQa,oBAAR,CAA6Ba,MAA7B,EAAqCZ,YAArC,CAAf;AACA,QAAIgB,OAAJ;AACA,QAAIP,KAAKQ,UAAL,EAAJ,EAAuB;AACnB,YAAIC,WAAWT,IAAf;AACA,YAAItB,QAAQD,QAAQa,oBAAR,CAA6BmB,SAASC,QAAT,EAA7B,EAAkDnB,YAAlD,CAAZ;AACA,YAAIb,UAAU+B,SAASC,QAAT,EAAV,IACAJ,aAAaG,SAASL,WAAT,GAAuBC,GAAvB,EADjB,EAC+C;AAC3C,mBAAO,IAAItB,WAAW4B,QAAf,CAAwBjC,KAAxB,EAA+BM,eAAe4B,YAAf,CAA4BN,QAA5B,CAA/B,CAAP;AACH,SAHD,MAIK;AACD,mBAAON,IAAP;AACH;AACJ,KAVD,MAWK;AACD,YAAIa,eAAeb,IAAnB;AACAO,kBAAUM,YAAV;AACA,YAAIP,aAAaO,aAAaT,WAAb,GAA2BC,GAA3B,EAAjB,EAAmD;AAC/CE,sBAAUA,QAAQO,cAAR,CAAuB,IAAI/B,WAAW4B,QAAf,CAAwBL,QAAxB,CAAvB,CAAV;AACH;AACDO,qBAAaE,YAAb,CAA0B9B,gBAAgB+B,cAA1C,EAA0D,UAAUC,SAAV,EAAqBC,SAArB,EAAgC;AACtF,gBAAIC,eAAe1C,QAAQyB,4BAAR,CAAqCgB,SAArC,EAAgD3B,YAAhD,CAAnB;AACA,gBAAI4B,iBAAiBD,SAArB,EAAgC;AAC5BX,0BAAUA,QAAQa,oBAAR,CAA6BH,SAA7B,EAAwCE,YAAxC,CAAV;AACH;AACJ,SALD;AAMA,eAAOZ,OAAP;AACH;AACJ,CA7BD","sourcesContent":["\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util_1 = require(\"@firebase/util\");\nvar Path_1 = require(\"./Path\");\nvar SparseSnapshotTree_1 = require(\"../SparseSnapshotTree\");\nvar LeafNode_1 = require(\"../snap/LeafNode\");\nvar nodeFromJSON_1 = require(\"../snap/nodeFromJSON\");\nvar PriorityIndex_1 = require(\"../snap/indexes/PriorityIndex\");\n/**\n * Generate placeholders for deferred values.\n * @param {?Object} values\n * @return {!Object}\n */\nexports.generateWithValues = function (values) {\n    values = values || {};\n    values['timestamp'] = values['timestamp'] || new Date().getTime();\n    return values;\n};\n/**\n * Value to use when firing local events. When writing server values, fire\n * local events with an approximate value, otherwise return value as-is.\n * @param {(Object|string|number|boolean)} value\n * @param {!Object} serverValues\n * @return {!(string|number|boolean)}\n */\nexports.resolveDeferredValue = function (value, serverValues) {\n    if (!value || typeof value !== 'object') {\n        return value;\n    }\n    else {\n        util_1.assert('.sv' in value, 'Unexpected leaf node or priority contents');\n        return serverValues[value['.sv']];\n    }\n};\n/**\n * Recursively replace all deferred values and priorities in the tree with the\n * specified generated replacement values.\n * @param {!SparseSnapshotTree} tree\n * @param {!Object} serverValues\n * @return {!SparseSnapshotTree}\n */\nexports.resolveDeferredValueTree = function (tree, serverValues) {\n    var resolvedTree = new SparseSnapshotTree_1.SparseSnapshotTree();\n    tree.forEachTree(new Path_1.Path(''), function (path, node) {\n        resolvedTree.remember(path, exports.resolveDeferredValueSnapshot(node, serverValues));\n    });\n    return resolvedTree;\n};\n/**\n * Recursively replace all deferred values and priorities in the node with the\n * specified generated replacement values.  If there are no server values in the node,\n * it'll be returned as-is.\n * @param {!Node} node\n * @param {!Object} serverValues\n * @return {!Node}\n */\nexports.resolveDeferredValueSnapshot = function (node, serverValues) {\n    var rawPri = node.getPriority().val();\n    var priority = exports.resolveDeferredValue(rawPri, serverValues);\n    var newNode;\n    if (node.isLeafNode()) {\n        var leafNode = node;\n        var value = exports.resolveDeferredValue(leafNode.getValue(), serverValues);\n        if (value !== leafNode.getValue() ||\n            priority !== leafNode.getPriority().val()) {\n            return new LeafNode_1.LeafNode(value, nodeFromJSON_1.nodeFromJSON(priority));\n        }\n        else {\n            return node;\n        }\n    }\n    else {\n        var childrenNode = node;\n        newNode = childrenNode;\n        if (priority !== childrenNode.getPriority().val()) {\n            newNode = newNode.updatePriority(new LeafNode_1.LeafNode(priority));\n        }\n        childrenNode.forEachChild(PriorityIndex_1.PRIORITY_INDEX, function (childName, childNode) {\n            var newChildNode = exports.resolveDeferredValueSnapshot(childNode, serverValues);\n            if (newChildNode !== childNode) {\n                newNode = newNode.updateImmediateChild(childName, newChildNode);\n            }\n        });\n        return newNode;\n    }\n};\n\n//# sourceMappingURL=ServerValues.js.map\n"]}]