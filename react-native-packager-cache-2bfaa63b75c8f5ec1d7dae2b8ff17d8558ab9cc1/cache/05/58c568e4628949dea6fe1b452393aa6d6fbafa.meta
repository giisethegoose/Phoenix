["ef922299afdb28305019ac3e6f45c677843abf58","3cf5cbedef928c0da1a584b8b212fd1eed52434d",["@firebase/util"],[99],{"version":3,"sources":["/home/giise/candidtwo/node_modules/@firebase/database/dist/cjs/src/core/stats/StatsListener.js"],"names":["Object","defineProperty","exports","value","util_1","require","StatsListener","collection_","last_","prototype","get","newStats","delta","clone","forEach","stat"],"mappings":"AAAA;;AAgBAA,OAAOC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C,EAAEC,OAAO,IAAT,EAA7C;AACA,IAAIC,SAASC,OAAT,kBAAJ;;AAOA,IAAIC,gBAA+B,YAAY;AAC3C,aAASA,aAAT,CAAuBC,WAAvB,EAAoC;AAChC,aAAKA,WAAL,GAAmBA,WAAnB;AACA,aAAKC,KAAL,GAAa,IAAb;AACH;AACDF,kBAAcG,SAAd,CAAwBC,GAAxB,GAA8B,YAAY;AACtC,YAAIC,WAAW,KAAKJ,WAAL,CAAiBG,GAAjB,EAAf;AACA,YAAIE,QAAQR,OAAOS,KAAP,CAAaF,QAAb,CAAZ;AACA,YAAI,KAAKH,KAAT,EAAgB;AACZJ,mBAAOU,OAAP,CAAe,KAAKN,KAApB,EAA2B,UAAUO,IAAV,EAAgBZ,KAAhB,EAAuB;AAC9CS,sBAAMG,IAAN,IAAcH,MAAMG,IAAN,IAAcZ,KAA5B;AACH,aAFD;AAGH;AACD,aAAKK,KAAL,GAAaG,QAAb;AACA,eAAOC,KAAP;AACH,KAVD;AAWA,WAAON,aAAP;AACH,CAjBkC,EAAnC;AAkBAJ,QAAQI,aAAR,GAAwBA,aAAxB","sourcesContent":["\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util_1 = require(\"@firebase/util\");\n/**\n * Returns the delta from the previous call to get stats.\n *\n * @param collection_ The collection to \"listen\" to.\n * @constructor\n */\nvar StatsListener = /** @class */ (function () {\n    function StatsListener(collection_) {\n        this.collection_ = collection_;\n        this.last_ = null;\n    }\n    StatsListener.prototype.get = function () {\n        var newStats = this.collection_.get();\n        var delta = util_1.clone(newStats);\n        if (this.last_) {\n            util_1.forEach(this.last_, function (stat, value) {\n                delta[stat] = delta[stat] - value;\n            });\n        }\n        this.last_ = newStats;\n        return delta;\n    };\n    return StatsListener;\n}());\nexports.StatsListener = StatsListener;\n\n//# sourceMappingURL=StatsListener.js.map\n"]}]