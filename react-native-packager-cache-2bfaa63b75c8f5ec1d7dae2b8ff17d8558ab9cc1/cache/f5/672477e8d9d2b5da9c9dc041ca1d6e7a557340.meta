["16716bf2367b01ebd87d6feb25360703a0de3d1c","34e99b10b69bf382bb6b7c32a999803d12034575",["react","./../../../react-transform-hmr/lib/index.js","react-native","./withOrientation"],[88,168,1116,1165],{"version":3,"sources":["/home/giise/candidtwo/node_modules/react-navigation/src/views/SafeAreaView.js"],"names":["isIPhoneX_deprecated","X_WIDTH","X_HEIGHT","PAD_WIDTH","PAD_HEIGHT","get","D_HEIGHT","height","D_WIDTH","width","PlatformConstants","reactNativeVersion","minor","isIPhoneX","OS","isIPad","statusBarHeight","isLandscape","doubleFromPercentString","percent","includes","dbl","parseFloat","isNaN","state","touchesTop","touchesBottom","touchesLeft","touchesRight","orientation","viewWidth","viewHeight","_onLayout","view","props","newOrientation","WIDTH","HEIGHT","measureInWindow","winX","winY","winWidth","winHeight","realY","realX","setState","_getSafeAreaStyle","forceInset","_getViewStyles","paddingTop","paddingBottom","paddingLeft","paddingRight","viewStyle","style","_getInset","Object","keys","forEach","inset","key","padding","toUpperCase","slice","flatten","paddingVertical","paddingHorizontal","runAfterInteractions","children","safeAreaStyle","c","SafeView"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {\n  DeviceInfo,\n  Dimensions,\n  InteractionManager,\n  NativeModules,\n  Platform,\n  SafeAreaView,\n  StyleSheet,\n  View,\n} from 'react-native';\nimport withOrientation from './withOrientation';\n\nconst { isIPhoneX_deprecated } = DeviceInfo;\n// See https://mydevice.io/devices/ for device dimensions\nconst X_WIDTH = 375;\nconst X_HEIGHT = 812;\nconst PAD_WIDTH = 768;\nconst PAD_HEIGHT = 1024;\n\nconst { height: D_HEIGHT, width: D_WIDTH } = Dimensions.get('window');\n\nconst { PlatformConstants = {} } = NativeModules;\nconst { minor = 0 } = PlatformConstants.reactNativeVersion || {};\n\nconst isIPhoneX = (() => {\n  if (minor >= 50) {\n    return isIPhoneX_deprecated;\n  }\n\n  return (\n    Platform.OS === 'ios' &&\n    ((D_HEIGHT === X_HEIGHT && D_WIDTH === X_WIDTH) ||\n      (D_HEIGHT === X_WIDTH && D_WIDTH === X_HEIGHT))\n  );\n})();\n\nconst isIPad = (() => {\n  if (Platform.OS !== 'ios' || isIPhoneX) return false;\n\n  // if portrait and width is smaller than iPad width\n  if (D_HEIGHT > D_WIDTH && D_WIDTH < PAD_WIDTH) {\n    return false;\n  }\n\n  // if landscape and height is smaller that iPad height\n  if (D_WIDTH > D_HEIGHT && D_HEIGHT < PAD_WIDTH) {\n    return false;\n  }\n\n  return true;\n})();\n\nconst statusBarHeight = isLandscape => {\n  if (isIPhoneX) {\n    return isLandscape ? 0 : 44;\n  }\n\n  if (isIPad) {\n    return 20;\n  }\n\n  return isLandscape ? 0 : 20;\n};\n\nconst doubleFromPercentString = percent => {\n  if (!percent.includes('%')) {\n    return 0;\n  }\n\n  const dbl = parseFloat(percent) / 100;\n\n  if (isNaN(dbl)) return 0;\n\n  return dbl;\n};\n\nclass SafeView extends Component {\n  state = {\n    touchesTop: true,\n    touchesBottom: true,\n    touchesLeft: true,\n    touchesRight: true,\n    orientation: null,\n    viewWidth: 0,\n    viewHeight: 0,\n  };\n\n  componentDidMount() {\n    InteractionManager.runAfterInteractions(() => {\n      this._onLayout();\n    });\n  }\n\n  componentWillReceiveProps() {\n    this._onLayout();\n  }\n\n  render() {\n    const { forceInset = false, isLandscape, children, style } = this.props;\n\n    if (Platform.OS !== 'ios') {\n      return <View style={style}>{this.props.children}</View>;\n    }\n\n    const safeAreaStyle = this._getSafeAreaStyle();\n\n    return (\n      <View\n        ref={c => (this.view = c)}\n        onLayout={this._onLayout}\n        style={safeAreaStyle}\n      >\n        {this.props.children}\n      </View>\n    );\n  }\n\n  _onLayout = () => {\n    if (!this.view) return;\n\n    const { isLandscape } = this.props;\n    const { orientation } = this.state;\n    const newOrientation = isLandscape ? 'landscape' : 'portrait';\n    if (orientation && orientation === newOrientation) {\n      return;\n    }\n\n    const WIDTH = isLandscape ? X_HEIGHT : X_WIDTH;\n    const HEIGHT = isLandscape ? X_WIDTH : X_HEIGHT;\n\n    this.view.measureInWindow((winX, winY, winWidth, winHeight) => {\n      let realY = winY;\n      let realX = winX;\n\n      if (realY >= HEIGHT) {\n        realY = realY % HEIGHT;\n      } else if (realY < 0) {\n        realY = realY % HEIGHT + HEIGHT;\n      }\n\n      if (realX >= WIDTH) {\n        realX = realX % WIDTH;\n      } else if (realX < 0) {\n        realX = realX % WIDTH + WIDTH;\n      }\n\n      const touchesTop = realY === 0;\n      const touchesBottom = realY + winHeight >= HEIGHT;\n      const touchesLeft = realX === 0;\n      const touchesRight = realX + winWidth >= WIDTH;\n\n      this.setState({\n        touchesTop,\n        touchesBottom,\n        touchesLeft,\n        touchesRight,\n        orientation: newOrientation,\n        viewWidth: winWidth,\n        viewHeight: winHeight,\n      });\n    });\n  };\n\n  _getSafeAreaStyle = () => {\n    const { touchesTop, touchesBottom, touchesLeft, touchesRight } = this.state;\n    const { forceInset, isLandscape } = this.props;\n\n    const {\n      paddingTop,\n      paddingBottom,\n      paddingLeft,\n      paddingRight,\n      viewStyle,\n    } = this._getViewStyles();\n\n    const style = {\n      ...viewStyle,\n      paddingTop: touchesTop ? this._getInset('top') : 0,\n      paddingBottom: touchesBottom ? this._getInset('bottom') : 0,\n      paddingLeft: touchesLeft ? this._getInset('left') : 0,\n      paddingRight: touchesRight ? this._getInset('right') : 0,\n    };\n\n    if (forceInset) {\n      Object.keys(forceInset).forEach(key => {\n        let inset = forceInset[key];\n\n        if (inset === 'always') {\n          inset = this._getInset(key);\n        }\n\n        if (inset === 'never') {\n          inset = 0;\n        }\n\n        switch (key) {\n          case 'horizontal': {\n            style.paddingLeft = inset;\n            style.paddingRight = inset;\n            break;\n          }\n          case 'vertical': {\n            style.paddingTop = inset;\n            style.paddingBottom = inset;\n            break;\n          }\n          case 'left':\n          case 'right':\n          case 'top':\n          case 'bottom': {\n            const padding = `padding${key[0].toUpperCase()}${key.slice(1)}`;\n            style[padding] = inset;\n            break;\n          }\n        }\n      });\n    }\n\n    // new height/width should only include padding from insets\n    // height/width should not be affected by padding from style obj\n    if (style.height && typeof style.height === 'number') {\n      style.height += style.paddingTop + style.paddingBottom;\n    }\n\n    if (style.width && typeof style.width === 'number') {\n      style.width += style.paddingLeft + style.paddingRight;\n    }\n\n    style.paddingTop += paddingTop;\n    style.paddingBottom += paddingBottom;\n    style.paddingLeft += paddingLeft;\n    style.paddingRight += paddingRight;\n\n    return style;\n  };\n\n  _getViewStyles = () => {\n    const { viewWidth } = this.state;\n    // get padding values from style to add back in after insets are determined\n    // default precedence: padding[Side] -> vertical | horizontal -> padding -> 0\n    let {\n      padding = 0,\n      paddingVertical = padding,\n      paddingHorizontal = padding,\n      paddingTop = paddingVertical,\n      paddingBottom = paddingVertical,\n      paddingLeft = paddingHorizontal,\n      paddingRight = paddingHorizontal,\n      ...viewStyle\n    } = StyleSheet.flatten(this.props.style || {});\n\n    if (typeof paddingTop !== 'number') {\n      paddingTop = doubleFromPercentString(paddingTop) * viewWidth;\n    }\n\n    if (typeof paddingBottom !== 'number') {\n      paddingBottom = doubleFromPercentString(paddingBottom) * viewWidth;\n    }\n\n    if (typeof paddingLeft !== 'number') {\n      paddingLeft = doubleFromPercentString(paddingLeft) * viewWidth;\n    }\n\n    if (typeof paddingRight !== 'number') {\n      paddingRight = doubleFromPercentString(paddingRight) * viewWidth;\n    }\n\n    return {\n      paddingTop,\n      paddingBottom,\n      paddingLeft,\n      paddingRight,\n      viewStyle,\n    };\n  };\n\n  _getInset = key => {\n    const { isLandscape } = this.props;\n    switch (key) {\n      case 'horizontal':\n      case 'right':\n      case 'left': {\n        return isLandscape ? (isIPhoneX ? 44 : 0) : 0;\n      }\n      case 'vertical':\n      case 'top': {\n        return statusBarHeight(isLandscape);\n      }\n      case 'bottom': {\n        return isIPhoneX ? (isLandscape ? 24 : 34) : 0;\n      }\n    }\n  };\n}\n\nexport default withOrientation(SafeView);\n"]}]