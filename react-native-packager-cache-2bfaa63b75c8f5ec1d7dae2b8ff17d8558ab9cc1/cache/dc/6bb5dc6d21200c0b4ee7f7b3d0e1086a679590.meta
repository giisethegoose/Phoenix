["e9a948895388650f4c8b0f4a0c5557d580be17de","fa36b1e1640ff8c460a224341bcd9d4f5de255ec",["@firebase/util","../util/util","../util/SortedMap","./Node","./snap","./indexes/PriorityIndex","./indexes/KeyIndex","./IndexMap","./LeafNode","./comparators"],[638,678,721,764,796,837,890,938,978,1021],{"version":3,"sources":["/home/giise/candidtwo/node_modules/@firebase/database/dist/cjs/src/core/snap/ChildrenNode.js"],"names":["__extends","extendStatics","Object","setPrototypeOf","__proto__","Array","d","b","p","hasOwnProperty","__","constructor","prototype","create","defineProperty","exports","value","util_1","require","util_2","SortedMap_1","Node_1","snap_1","PriorityIndex_1","KeyIndex_1","IndexMap_1","LeafNode_1","comparators_1","EMPTY_NODE","ChildrenNode","children_","priorityNode_","indexMap_","lazyHash_","validatePriorityNode","isEmpty","assert","get","SortedMap","NAME_COMPARATOR","IndexMap","Default","enumerable","configurable","isLeafNode","getPriority","updatePriority","newPriorityNode","getImmediateChild","childName","child","getChild","path","front","getFront","popFront","hasChild","updateImmediateChild","newChildNode","namedNode","NamedNode","newChildren","newIndexMap","newPriority","remove","removeFromIndexes","insert","addToIndexes","updateChild","getLength","newImmediateChild","numChildren","count","val","exportFormat","obj","numKeys","maxKey","allIntegerKeys","forEachChild","PRIORITY_INDEX","key","childNode","INTEGER_REGEXP_","test","Math","max","Number","array","hash","toHash_1","priorityHashText","childHash","sha1","getPredecessorChildName","index","idx","resolveIndex_","predecessor","getPredecessorKey","name","getFirstChildName","indexDefinition","minKey","getFirstChild","getLastChildName","getLastChild","action","inorderTraversal","wrappedNode","node","getIterator","getIteratorFrom","minPost","startPost","iterator","Wrap","next","peek","compare","getNext","getReverseIterator","getReverseIteratorFrom","maxPost","endPost","compareTo","other","MAX_NODE","withIndex","KEY_INDEX","hasIndex","addIndex","isIndexed","equals","otherChildrenNode","thisIter","otherIter","thisCurrent","otherCurrent","toString","MaxNode","_super","call","defineProperties","MIN","MIN_NAME","MAX","MAX_NAME","KeyIndex","__EMPTY_NODE","LeafNode","__childrenNodeConstructor","setMaxNode"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util_1 = require(\"@firebase/util\");\nvar util_2 = require(\"../util/util\");\nvar SortedMap_1 = require(\"../util/SortedMap\");\nvar Node_1 = require(\"./Node\");\nvar snap_1 = require(\"./snap\");\nvar PriorityIndex_1 = require(\"./indexes/PriorityIndex\");\nvar KeyIndex_1 = require(\"./indexes/KeyIndex\");\nvar IndexMap_1 = require(\"./IndexMap\");\nvar LeafNode_1 = require(\"./LeafNode\");\nvar comparators_1 = require(\"./comparators\");\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\nvar EMPTY_NODE;\n/**\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\n * (i.e. nodes with children).  It implements Node and stores the\n * list of children in the children property, sorted by child name.\n *\n * @constructor\n * @implements {Node}\n */\nvar ChildrenNode = /** @class */ (function () {\n    /**\n     *\n     * @param {!SortedMap.<string, !Node>} children_ List of children\n     * of this node..\n     * @param {?Node} priorityNode_ The priority of this node (as a snapshot node).\n     * @param {!IndexMap} indexMap_\n     */\n    function ChildrenNode(children_, priorityNode_, indexMap_) {\n        this.children_ = children_;\n        this.priorityNode_ = priorityNode_;\n        this.indexMap_ = indexMap_;\n        this.lazyHash_ = null;\n        /**\n         * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\n         * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\n         * class instead of an empty ChildrenNode.\n         */\n        if (this.priorityNode_) {\n            snap_1.validatePriorityNode(this.priorityNode_);\n        }\n        if (this.children_.isEmpty()) {\n            util_1.assert(!this.priorityNode_ || this.priorityNode_.isEmpty(), 'An empty node cannot have a priority');\n        }\n    }\n    Object.defineProperty(ChildrenNode, \"EMPTY_NODE\", {\n        get: function () {\n            return (EMPTY_NODE ||\n                (EMPTY_NODE = new ChildrenNode(new SortedMap_1.SortedMap(comparators_1.NAME_COMPARATOR), null, IndexMap_1.IndexMap.Default)));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** @inheritDoc */\n    ChildrenNode.prototype.isLeafNode = function () {\n        return false;\n    };\n    /** @inheritDoc */\n    ChildrenNode.prototype.getPriority = function () {\n        return this.priorityNode_ || EMPTY_NODE;\n    };\n    /** @inheritDoc */\n    ChildrenNode.prototype.updatePriority = function (newPriorityNode) {\n        if (this.children_.isEmpty()) {\n            // Don't allow priorities on empty nodes\n            return this;\n        }\n        else {\n            return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\n        }\n    };\n    /** @inheritDoc */\n    ChildrenNode.prototype.getImmediateChild = function (childName) {\n        // Hack to treat priority as a regular child\n        if (childName === '.priority') {\n            return this.getPriority();\n        }\n        else {\n            var child = this.children_.get(childName);\n            return child === null ? EMPTY_NODE : child;\n        }\n    };\n    /** @inheritDoc */\n    ChildrenNode.prototype.getChild = function (path) {\n        var front = path.getFront();\n        if (front === null)\n            return this;\n        return this.getImmediateChild(front).getChild(path.popFront());\n    };\n    /** @inheritDoc */\n    ChildrenNode.prototype.hasChild = function (childName) {\n        return this.children_.get(childName) !== null;\n    };\n    /** @inheritDoc */\n    ChildrenNode.prototype.updateImmediateChild = function (childName, newChildNode) {\n        util_1.assert(newChildNode, 'We should always be passing snapshot nodes');\n        if (childName === '.priority') {\n            return this.updatePriority(newChildNode);\n        }\n        else {\n            var namedNode = new Node_1.NamedNode(childName, newChildNode);\n            var newChildren = void 0, newIndexMap = void 0, newPriority = void 0;\n            if (newChildNode.isEmpty()) {\n                newChildren = this.children_.remove(childName);\n                newIndexMap = this.indexMap_.removeFromIndexes(namedNode, this.children_);\n            }\n            else {\n                newChildren = this.children_.insert(childName, newChildNode);\n                newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\n            }\n            newPriority = newChildren.isEmpty() ? EMPTY_NODE : this.priorityNode_;\n            return new ChildrenNode(newChildren, newPriority, newIndexMap);\n        }\n    };\n    /** @inheritDoc */\n    ChildrenNode.prototype.updateChild = function (path, newChildNode) {\n        var front = path.getFront();\n        if (front === null) {\n            return newChildNode;\n        }\n        else {\n            util_1.assert(path.getFront() !== '.priority' || path.getLength() === 1, '.priority must be the last token in a path');\n            var newImmediateChild = this.getImmediateChild(front).updateChild(path.popFront(), newChildNode);\n            return this.updateImmediateChild(front, newImmediateChild);\n        }\n    };\n    /** @inheritDoc */\n    ChildrenNode.prototype.isEmpty = function () {\n        return this.children_.isEmpty();\n    };\n    /** @inheritDoc */\n    ChildrenNode.prototype.numChildren = function () {\n        return this.children_.count();\n    };\n    /** @inheritDoc */\n    ChildrenNode.prototype.val = function (exportFormat) {\n        if (this.isEmpty())\n            return null;\n        var obj = {};\n        var numKeys = 0, maxKey = 0, allIntegerKeys = true;\n        this.forEachChild(PriorityIndex_1.PRIORITY_INDEX, function (key, childNode) {\n            obj[key] = childNode.val(exportFormat);\n            numKeys++;\n            if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\n                maxKey = Math.max(maxKey, Number(key));\n            }\n            else {\n                allIntegerKeys = false;\n            }\n        });\n        if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\n            // convert to array.\n            var array = [];\n            for (var key in obj)\n                array[key] = obj[key];\n            return array;\n        }\n        else {\n            if (exportFormat && !this.getPriority().isEmpty()) {\n                obj['.priority'] = this.getPriority().val();\n            }\n            return obj;\n        }\n    };\n    /** @inheritDoc */\n    ChildrenNode.prototype.hash = function () {\n        if (this.lazyHash_ === null) {\n            var toHash_1 = '';\n            if (!this.getPriority().isEmpty())\n                toHash_1 +=\n                    'priority:' +\n                        snap_1.priorityHashText(this.getPriority().val()) +\n                        ':';\n            this.forEachChild(PriorityIndex_1.PRIORITY_INDEX, function (key, childNode) {\n                var childHash = childNode.hash();\n                if (childHash !== '')\n                    toHash_1 += ':' + key + ':' + childHash;\n            });\n            this.lazyHash_ = toHash_1 === '' ? '' : util_2.sha1(toHash_1);\n        }\n        return this.lazyHash_;\n    };\n    /** @inheritDoc */\n    ChildrenNode.prototype.getPredecessorChildName = function (childName, childNode, index) {\n        var idx = this.resolveIndex_(index);\n        if (idx) {\n            var predecessor = idx.getPredecessorKey(new Node_1.NamedNode(childName, childNode));\n            return predecessor ? predecessor.name : null;\n        }\n        else {\n            return this.children_.getPredecessorKey(childName);\n        }\n    };\n    /**\n     * @param {!Index} indexDefinition\n     * @return {?string}\n     */\n    ChildrenNode.prototype.getFirstChildName = function (indexDefinition) {\n        var idx = this.resolveIndex_(indexDefinition);\n        if (idx) {\n            var minKey = idx.minKey();\n            return minKey && minKey.name;\n        }\n        else {\n            return this.children_.minKey();\n        }\n    };\n    /**\n     * @param {!Index} indexDefinition\n     * @return {?NamedNode}\n     */\n    ChildrenNode.prototype.getFirstChild = function (indexDefinition) {\n        var minKey = this.getFirstChildName(indexDefinition);\n        if (minKey) {\n            return new Node_1.NamedNode(minKey, this.children_.get(minKey));\n        }\n        else {\n            return null;\n        }\n    };\n    /**\n     * Given an index, return the key name of the largest value we have, according to that index\n     * @param {!Index} indexDefinition\n     * @return {?string}\n     */\n    ChildrenNode.prototype.getLastChildName = function (indexDefinition) {\n        var idx = this.resolveIndex_(indexDefinition);\n        if (idx) {\n            var maxKey = idx.maxKey();\n            return maxKey && maxKey.name;\n        }\n        else {\n            return this.children_.maxKey();\n        }\n    };\n    /**\n     * @param {!Index} indexDefinition\n     * @return {?NamedNode}\n     */\n    ChildrenNode.prototype.getLastChild = function (indexDefinition) {\n        var maxKey = this.getLastChildName(indexDefinition);\n        if (maxKey) {\n            return new Node_1.NamedNode(maxKey, this.children_.get(maxKey));\n        }\n        else {\n            return null;\n        }\n    };\n    /**\n     * @inheritDoc\n     */\n    ChildrenNode.prototype.forEachChild = function (index, action) {\n        var idx = this.resolveIndex_(index);\n        if (idx) {\n            return idx.inorderTraversal(function (wrappedNode) {\n                return action(wrappedNode.name, wrappedNode.node);\n            });\n        }\n        else {\n            return this.children_.inorderTraversal(action);\n        }\n    };\n    /**\n     * @param {!Index} indexDefinition\n     * @return {SortedMapIterator}\n     */\n    ChildrenNode.prototype.getIterator = function (indexDefinition) {\n        return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\n    };\n    /**\n     *\n     * @param {!NamedNode} startPost\n     * @param {!Index} indexDefinition\n     * @return {!SortedMapIterator}\n     */\n    ChildrenNode.prototype.getIteratorFrom = function (startPost, indexDefinition) {\n        var idx = this.resolveIndex_(indexDefinition);\n        if (idx) {\n            return idx.getIteratorFrom(startPost, function (key) { return key; });\n        }\n        else {\n            var iterator = this.children_.getIteratorFrom(startPost.name, Node_1.NamedNode.Wrap);\n            var next = iterator.peek();\n            while (next != null && indexDefinition.compare(next, startPost) < 0) {\n                iterator.getNext();\n                next = iterator.peek();\n            }\n            return iterator;\n        }\n    };\n    /**\n     * @param {!Index} indexDefinition\n     * @return {!SortedMapIterator}\n     */\n    ChildrenNode.prototype.getReverseIterator = function (indexDefinition) {\n        return this.getReverseIteratorFrom(indexDefinition.maxPost(), indexDefinition);\n    };\n    /**\n     * @param {!NamedNode} endPost\n     * @param {!Index} indexDefinition\n     * @return {!SortedMapIterator}\n     */\n    ChildrenNode.prototype.getReverseIteratorFrom = function (endPost, indexDefinition) {\n        var idx = this.resolveIndex_(indexDefinition);\n        if (idx) {\n            return idx.getReverseIteratorFrom(endPost, function (key) {\n                return key;\n            });\n        }\n        else {\n            var iterator = this.children_.getReverseIteratorFrom(endPost.name, Node_1.NamedNode.Wrap);\n            var next = iterator.peek();\n            while (next != null && indexDefinition.compare(next, endPost) > 0) {\n                iterator.getNext();\n                next = iterator.peek();\n            }\n            return iterator;\n        }\n    };\n    /**\n     * @inheritDoc\n     */\n    ChildrenNode.prototype.compareTo = function (other) {\n        if (this.isEmpty()) {\n            if (other.isEmpty()) {\n                return 0;\n            }\n            else {\n                return -1;\n            }\n        }\n        else if (other.isLeafNode() || other.isEmpty()) {\n            return 1;\n        }\n        else if (other === exports.MAX_NODE) {\n            return -1;\n        }\n        else {\n            // Must be another node with children.\n            return 0;\n        }\n    };\n    /**\n     * @inheritDoc\n     */\n    ChildrenNode.prototype.withIndex = function (indexDefinition) {\n        if (indexDefinition === KeyIndex_1.KEY_INDEX ||\n            this.indexMap_.hasIndex(indexDefinition)) {\n            return this;\n        }\n        else {\n            var newIndexMap = this.indexMap_.addIndex(indexDefinition, this.children_);\n            return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\n        }\n    };\n    /**\n     * @inheritDoc\n     */\n    ChildrenNode.prototype.isIndexed = function (index) {\n        return index === KeyIndex_1.KEY_INDEX || this.indexMap_.hasIndex(index);\n    };\n    /**\n     * @inheritDoc\n     */\n    ChildrenNode.prototype.equals = function (other) {\n        if (other === this) {\n            return true;\n        }\n        else if (other.isLeafNode()) {\n            return false;\n        }\n        else {\n            var otherChildrenNode = other;\n            if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\n                return false;\n            }\n            else if (this.children_.count() === otherChildrenNode.children_.count()) {\n                var thisIter = this.getIterator(PriorityIndex_1.PRIORITY_INDEX);\n                var otherIter = otherChildrenNode.getIterator(PriorityIndex_1.PRIORITY_INDEX);\n                var thisCurrent = thisIter.getNext();\n                var otherCurrent = otherIter.getNext();\n                while (thisCurrent && otherCurrent) {\n                    if (thisCurrent.name !== otherCurrent.name ||\n                        !thisCurrent.node.equals(otherCurrent.node)) {\n                        return false;\n                    }\n                    thisCurrent = thisIter.getNext();\n                    otherCurrent = otherIter.getNext();\n                }\n                return thisCurrent === null && otherCurrent === null;\n            }\n            else {\n                return false;\n            }\n        }\n    };\n    /**\n     * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\n     * instead.\n     *\n     * @private\n     * @param {!Index} indexDefinition\n     * @return {?SortedMap.<NamedNode, Node>}\n     */\n    ChildrenNode.prototype.resolveIndex_ = function (indexDefinition) {\n        if (indexDefinition === KeyIndex_1.KEY_INDEX) {\n            return null;\n        }\n        else {\n            return this.indexMap_.get(indexDefinition.toString());\n        }\n    };\n    /**\n     * @private\n     * @type {RegExp}\n     */\n    ChildrenNode.INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\n    return ChildrenNode;\n}());\nexports.ChildrenNode = ChildrenNode;\n/**\n * @constructor\n * @extends {ChildrenNode}\n * @private\n */\nvar MaxNode = /** @class */ (function (_super) {\n    __extends(MaxNode, _super);\n    function MaxNode() {\n        return _super.call(this, new SortedMap_1.SortedMap(comparators_1.NAME_COMPARATOR), ChildrenNode.EMPTY_NODE, IndexMap_1.IndexMap.Default) || this;\n    }\n    MaxNode.prototype.compareTo = function (other) {\n        if (other === this) {\n            return 0;\n        }\n        else {\n            return 1;\n        }\n    };\n    MaxNode.prototype.equals = function (other) {\n        // Not that we every compare it, but MAX_NODE is only ever equal to itself\n        return other === this;\n    };\n    MaxNode.prototype.getPriority = function () {\n        return this;\n    };\n    MaxNode.prototype.getImmediateChild = function (childName) {\n        return ChildrenNode.EMPTY_NODE;\n    };\n    MaxNode.prototype.isEmpty = function () {\n        return false;\n    };\n    return MaxNode;\n}(ChildrenNode));\nexports.MaxNode = MaxNode;\n/**\n * Marker that will sort higher than any other snapshot.\n * @type {!MAX_NODE}\n * @const\n */\nexports.MAX_NODE = new MaxNode();\nObject.defineProperties(Node_1.NamedNode, {\n    MIN: {\n        value: new Node_1.NamedNode(util_2.MIN_NAME, ChildrenNode.EMPTY_NODE)\n    },\n    MAX: {\n        value: new Node_1.NamedNode(util_2.MAX_NAME, exports.MAX_NODE)\n    }\n});\n/**\n * Reference Extensions\n */\nKeyIndex_1.KeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\nLeafNode_1.LeafNode.__childrenNodeConstructor = ChildrenNode;\nsnap_1.setMaxNode(exports.MAX_NODE);\nPriorityIndex_1.setMaxNode(exports.MAX_NODE);\n\n//# sourceMappingURL=ChildrenNode.js.map\n"]}]