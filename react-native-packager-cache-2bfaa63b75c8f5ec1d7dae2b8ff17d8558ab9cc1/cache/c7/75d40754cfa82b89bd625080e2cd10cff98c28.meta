["37a0fdbe192eced0cec32d55953a8ff2170249db","d42e47fc9f0e86bb178ce3cc84b6d33dcb862990",["../core/util/util","../core/util/CountedSet","../core/stats/StatsManager","./polling/PacketReceiver","./Constants","@firebase/util"],[99,148,205,267,322,359,399],{"version":3,"sources":["/home/giise/candidtwo/node_modules/@firebase/database/dist/cjs/src/realtime/BrowserPollConnection.js"],"names":["Object","defineProperty","exports","value","util_1","require","CountedSet_1","StatsManager_1","PacketReceiver_1","Constants_1","util_2","util_3","FIREBASE_LONGPOLL_START_PARAM","FIREBASE_LONGPOLL_CLOSE_COMMAND","FIREBASE_LONGPOLL_COMMAND_CB_NAME","FIREBASE_LONGPOLL_DATA_CB_NAME","FIREBASE_LONGPOLL_ID_PARAM","FIREBASE_LONGPOLL_PW_PARAM","FIREBASE_LONGPOLL_SERIAL_PARAM","FIREBASE_LONGPOLL_CALLBACK_ID_PARAM","FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM","FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET","FIREBASE_LONGPOLL_DATA_PARAM","FIREBASE_LONGPOLL_DISCONN_FRAME_PARAM","FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM","MAX_URL_DATA_SIZE","SEG_HEADER_SIZE","MAX_PAYLOAD_SIZE","KEEPALIVE_REQUEST_INTERVAL","LP_CONNECT_TIMEOUT","BrowserPollConnection","connId","repoInfo","transportSessionId","lastSessionId","bytesSent","bytesReceived","everConnected_","log_","logWrapper","stats_","StatsManager","getCollection","urlFn","params","connectionURL","LONG_POLLING","prototype","open","onMessage","onDisconnect","_this","curSegmentNum","onDisconnect_","myPacketOrderer","PacketReceiver","isClosed_","connectTimeoutTimer_","setTimeout","onClosed_","Math","floor","executeWhenDOMReady","scriptTagHolder","FirebaseIFrameScriptHolder","args","_i","arguments","length","command","arg1","arg2","arg3","arg4","incrementIncomingBytes_","clearTimeout","id","password","sendNewPolls","closeAfter","Error","pN","data","handleResponse","urlParams","random","uniqueCallbackIdentifier","VERSION_PARAM","PROTOCOL_VERSION","TRANSPORT_SESSION_PARAM","LAST_SESSION_PARAM","isNodeSdk","location","href","indexOf","FORGE_DOMAIN","REFERER_PARAM","FORGE_REF","connectURL","addTag","start","startLongPoll","addDisconnectPingFrame","forceAllow","forceAllow_","forceDisallow","forceDisallow_","isAvailable","document","createElement","isChromeExtensionContentScript","isWindowsStoreApp","markConnectionHealthy","shutdown_","close","myDisconnFrame","body","removeChild","send","dataStr","stringify","incrementCounter","base64data","base64Encode","dataSegs","splitStringBySize","i","enqueueSegment","pw","src","style","display","appendChild","commandCB","onMessageCB","outstandingRequests","CountedSet","pendingSegs","currentSerial","LUIDGenerator","window","myIFrame","createIFrame_","script","substr","currentDomain","domain","iframeContents","doc","write","e","log","stack","iframe","a","contentWindow","contentDocument","alive","innerHTML","myID","myPW","theURL","nodeRestRequest","newRequest_","count","curDataString","nextSeg","d","theSeg","shift","seg","ts","addLongPollTag_","segnum","totalsegs","push","url","serial","add","doNewRequest","remove","keepaliveTimeout","readyStateCB","loadCB","doNodeLongPoll","newScript_1","type","async","onload","onreadystatechange","rstate","readyState","parentNode","onerror"],"mappings":"AAAA;;AAgBAA,OAAOC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C,EAAEC,OAAO,IAAT,EAA7C;AACA,IAAIC,SAASC,QAAQ,mBAAR,CAAb;AACA,IAAIC,eAAeD,QAAQ,yBAAR,CAAnB;AACA,IAAIE,iBAAiBF,QAAQ,4BAAR,CAArB;AACA,IAAIG,mBAAmBH,QAAQ,0BAAR,CAAvB;AACA,IAAII,cAAcJ,QAAQ,aAAR,CAAlB;AACA,IAAIK,SAASL,OAAT,kBAAJ;AACA,IAAIM,SAASN,OAAT,kBAAJ;;AAEAH,QAAQU,6BAAR,GAAwC,OAAxC;AACAV,QAAQW,+BAAR,GAA0C,OAA1C;AACAX,QAAQY,iCAAR,GAA4C,YAA5C;AACAZ,QAAQa,8BAAR,GAAyC,SAAzC;AACAb,QAAQc,0BAAR,GAAqC,IAArC;AACAd,QAAQe,0BAAR,GAAqC,IAArC;AACAf,QAAQgB,8BAAR,GAAyC,KAAzC;AACAhB,QAAQiB,mCAAR,GAA8C,IAA9C;AACAjB,QAAQkB,mCAAR,GAA8C,KAA9C;AACAlB,QAAQmB,oCAAR,GAA+C,IAA/C;AACAnB,QAAQoB,4BAAR,GAAuC,GAAvC;AACApB,QAAQqB,qCAAR,GAAgD,SAAhD;AACArB,QAAQsB,6CAAR,GAAwD,QAAxD;;AAIA,IAAIC,oBAAoB,IAAxB;AACA,IAAIC,kBAAkB,EAAtB;AACA,IAAIC,mBAAmBF,oBAAoBC,eAA3C;;AAQA,IAAIE,6BAA6B,KAAjC;;AAMA,IAAIC,qBAAqB,KAAzB;;AAOA,IAAIC,wBAAuC,YAAY;AASnD,aAASA,qBAAT,CAA+BC,MAA/B,EAAuCC,QAAvC,EAAiDC,kBAAjD,EAAqEC,aAArE,EAAoF;AAChF,aAAKH,MAAL,GAAcA,MAAd;AACA,aAAKC,QAAL,GAAgBA,QAAhB;AACA,aAAKC,kBAAL,GAA0BA,kBAA1B;AACA,aAAKC,aAAL,GAAqBA,aAArB;AACA,aAAKC,SAAL,GAAiB,CAAjB;AACA,aAAKC,aAAL,GAAqB,CAArB;AACA,aAAKC,cAAL,GAAsB,KAAtB;AACA,aAAKC,IAAL,GAAYlC,OAAOmC,UAAP,CAAkBR,MAAlB,CAAZ;AACA,aAAKS,MAAL,GAAcjC,eAAekC,YAAf,CAA4BC,aAA5B,CAA0CV,QAA1C,CAAd;AACA,aAAKW,KAAL,GAAa,UAAUC,MAAV,EAAkB;AAC3B,mBAAOZ,SAASa,aAAT,CAAuBpC,YAAYqC,YAAnC,EAAiDF,MAAjD,CAAP;AACH,SAFD;AAGH;;AAMDd,0BAAsBiB,SAAtB,CAAgCC,IAAhC,GAAuC,UAAUC,SAAV,EAAqBC,YAArB,EAAmC;AACtE,YAAIC,QAAQ,IAAZ;AACA,aAAKC,aAAL,GAAqB,CAArB;AACA,aAAKC,aAAL,GAAqBH,YAArB;AACA,aAAKI,eAAL,GAAuB,IAAI9C,iBAAiB+C,cAArB,CAAoCN,SAApC,CAAvB;AACA,aAAKO,SAAL,GAAiB,KAAjB;AACA,aAAKC,oBAAL,GAA4BC,WAAW,YAAY;AAC/CP,kBAAMb,IAAN,CAAW,8BAAX;;AAEAa,kBAAMQ,SAAN;AACAR,kBAAMM,oBAAN,GAA6B,IAA7B;AACH,SAL2B,EAKzBG,KAAKC,KAAL,CAAWhC,kBAAX,CALyB,CAA5B;;AAOAzB,eAAO0D,mBAAP,CAA2B,YAAY;AACnC,gBAAIX,MAAMK,SAAV,EACI;;AAEJL,kBAAMY,eAAN,GAAwB,IAAIC,0BAAJ,CAA+B,YAAY;AAC/D,oBAAIC,OAAO,EAAX;AACA,qBAAK,IAAIC,KAAK,CAAd,EAAiBA,KAAKC,UAAUC,MAAhC,EAAwCF,IAAxC,EAA8C;AAC1CD,yBAAKC,EAAL,IAAWC,UAAUD,EAAV,CAAX;AACH;AACD,oBAAIG,UAAUJ,KAAK,CAAL,CAAd;AAAA,oBAAuBK,OAAOL,KAAK,CAAL,CAA9B;AAAA,oBAAuCM,OAAON,KAAK,CAAL,CAA9C;AAAA,oBAAuDO,OAAOP,KAAK,CAAL,CAA9D;AAAA,oBAAuEQ,OAAOR,KAAK,CAAL,CAA9E;AACAd,sBAAMuB,uBAAN,CAA8BT,IAA9B;AACA,oBAAI,CAACd,MAAMY,eAAX,EACI;AACJ,oBAAIZ,MAAMM,oBAAV,EAAgC;AAC5BkB,iCAAaxB,MAAMM,oBAAnB;AACAN,0BAAMM,oBAAN,GAA6B,IAA7B;AACH;AACDN,sBAAMd,cAAN,GAAuB,IAAvB;AACA,oBAAIgC,WAAWnE,QAAQU,6BAAvB,EAAsD;AAClDuC,0BAAMyB,EAAN,GAAWN,IAAX;AACAnB,0BAAM0B,QAAN,GAAiBN,IAAjB;AACH,iBAHD,MAIK,IAAIF,YAAYnE,QAAQW,+BAAxB,EAAyD;AAE1D,wBAAIyD,IAAJ,EAAU;AAGNnB,8BAAMY,eAAN,CAAsBe,YAAtB,GAAqC,KAArC;;AAGA3B,8BAAMG,eAAN,CAAsByB,UAAtB,CAAiCT,IAAjC,EAAuC,YAAY;AAC/CnB,kCAAMQ,SAAN;AACH,yBAFD;AAGH,qBATD,MAUK;AACDR,8BAAMQ,SAAN;AACH;AACJ,iBAfI,MAgBA;AACD,0BAAM,IAAIqB,KAAJ,CAAU,oCAAoCX,OAA9C,CAAN;AACH;AACJ,aArCuB,EAqCrB,YAAY;AACX,oBAAIJ,OAAO,EAAX;AACA,qBAAK,IAAIC,KAAK,CAAd,EAAiBA,KAAKC,UAAUC,MAAhC,EAAwCF,IAAxC,EAA8C;AAC1CD,yBAAKC,EAAL,IAAWC,UAAUD,EAAV,CAAX;AACH;AACD,oBAAIe,KAAKhB,KAAK,CAAL,CAAT;AAAA,oBAAkBiB,OAAOjB,KAAK,CAAL,CAAzB;AACAd,sBAAMuB,uBAAN,CAA8BT,IAA9B;AACAd,sBAAMG,eAAN,CAAsB6B,cAAtB,CAAqCF,EAArC,EAAyCC,IAAzC;AACH,aA7CuB,EA6CrB,YAAY;AACX/B,sBAAMQ,SAAN;AACH,aA/CuB,EA+CrBR,MAAMR,KA/Ce,CAAxB;;AAkDA,gBAAIyC,YAAY,EAAhB;AACAA,sBAAUlF,QAAQU,6BAAlB,IAAmD,GAAnD;AACAwE,sBAAUlF,QAAQgB,8BAAlB,IAAoD0C,KAAKC,KAAL,CAAWD,KAAKyB,MAAL,KAAgB,SAA3B,CAApD;AACA,gBAAIlC,MAAMY,eAAN,CAAsBuB,wBAA1B,EACIF,UAAUlF,QAAQiB,mCAAlB,IAAyDgC,MAAMY,eAAN,CAAsBuB,wBAA/E;AACJF,sBAAU3E,YAAY8E,aAAtB,IAAuC9E,YAAY+E,gBAAnD;AACA,gBAAIrC,MAAMlB,kBAAV,EAA8B;AAC1BmD,0BAAU3E,YAAYgF,uBAAtB,IAAiDtC,MAAMlB,kBAAvD;AACH;AACD,gBAAIkB,MAAMjB,aAAV,EAAyB;AACrBkD,0BAAU3E,YAAYiF,kBAAtB,IAA4CvC,MAAMjB,aAAlD;AACH;AACD,gBAAI,CAACvB,OAAOgF,SAAP,EAAD,IACA,OAAOC,QAAP,KAAoB,WADpB,IAEAA,SAASC,IAFT,IAGAD,SAASC,IAAT,CAAcC,OAAd,CAAsBrF,YAAYsF,YAAlC,MAAoD,CAAC,CAHzD,EAG4D;AACxDX,0BAAU3E,YAAYuF,aAAtB,IAAuCvF,YAAYwF,SAAnD;AACH;AACD,gBAAIC,aAAa/C,MAAMR,KAAN,CAAYyC,SAAZ,CAAjB;AACAjC,kBAAMb,IAAN,CAAW,iCAAiC4D,UAA5C;AACA/C,kBAAMY,eAAN,CAAsBoC,MAAtB,CAA6BD,UAA7B,EAAyC,YAAY,CAEpD,CAFD;AAGH,SA7ED;AA8EH,KA3FD;;AA+FApE,0BAAsBiB,SAAtB,CAAgCqD,KAAhC,GAAwC,YAAY;AAChD,aAAKrC,eAAL,CAAqBsC,aAArB,CAAmC,KAAKzB,EAAxC,EAA4C,KAAKC,QAAjD;AACA,aAAKyB,sBAAL,CAA4B,KAAK1B,EAAjC,EAAqC,KAAKC,QAA1C;AACH,KAHD;;AAOA/C,0BAAsByE,UAAtB,GAAmC,YAAY;AAC3CzE,8BAAsB0E,WAAtB,GAAoC,IAApC;AACH,KAFD;;AAMA1E,0BAAsB2E,aAAtB,GAAsC,YAAY;AAC9C3E,8BAAsB4E,cAAtB,GAAuC,IAAvC;AACH,KAFD;;AAIA5E,0BAAsB6E,WAAtB,GAAoC,YAAY;AAG5C,eAAQ7E,sBAAsB0E,WAAtB,IACH,CAAC1E,sBAAsB4E,cAAvB,IACG,OAAOE,QAAP,KAAoB,WADvB,IAEGA,SAASC,aAAT,IAA0B,IAF7B,IAGG,CAACzG,OAAO0G,8BAAP,EAHJ,IAIG,CAAC1G,OAAO2G,iBAAP,EAJJ,IAKG,CAACpG,OAAOgF,SAAP,EANT;AAOH,KAVD;;AAcA7D,0BAAsBiB,SAAtB,CAAgCiE,qBAAhC,GAAwD,YAAY,CAAG,CAAvE;;AAKAlF,0BAAsBiB,SAAtB,CAAgCkE,SAAhC,GAA4C,YAAY;AACpD,aAAKzD,SAAL,GAAiB,IAAjB;AACA,YAAI,KAAKO,eAAT,EAA0B;AACtB,iBAAKA,eAAL,CAAqBmD,KAArB;AACA,iBAAKnD,eAAL,GAAuB,IAAvB;AACH;;AAED,YAAI,KAAKoD,cAAT,EAAyB;AACrBP,qBAASQ,IAAT,CAAcC,WAAd,CAA0B,KAAKF,cAA/B;AACA,iBAAKA,cAAL,GAAsB,IAAtB;AACH;AACD,YAAI,KAAK1D,oBAAT,EAA+B;AAC3BkB,yBAAa,KAAKlB,oBAAlB;AACA,iBAAKA,oBAAL,GAA4B,IAA5B;AACH;AACJ,KAfD;;AAoBA3B,0BAAsBiB,SAAtB,CAAgCY,SAAhC,GAA4C,YAAY;AACpD,YAAI,CAAC,KAAKH,SAAV,EAAqB;AACjB,iBAAKlB,IAAL,CAAU,4BAAV;AACA,iBAAK2E,SAAL;AACA,gBAAI,KAAK5D,aAAT,EAAwB;AACpB,qBAAKA,aAAL,CAAmB,KAAKhB,cAAxB;AACA,qBAAKgB,aAAL,GAAqB,IAArB;AACH;AACJ;AACJ,KATD;;AAcAvB,0BAAsBiB,SAAtB,CAAgCmE,KAAhC,GAAwC,YAAY;AAChD,YAAI,CAAC,KAAK1D,SAAV,EAAqB;AACjB,iBAAKlB,IAAL,CAAU,2BAAV;AACA,iBAAK2E,SAAL;AACH;AACJ,KALD;;AAWAnF,0BAAsBiB,SAAtB,CAAgCuE,IAAhC,GAAuC,UAAUpC,IAAV,EAAgB;AACnD,YAAIqC,UAAU7G,OAAO8G,SAAP,CAAiBtC,IAAjB,CAAd;AACA,aAAK/C,SAAL,IAAkBoF,QAAQnD,MAA1B;AACA,aAAK5B,MAAL,CAAYiF,gBAAZ,CAA6B,YAA7B,EAA2CF,QAAQnD,MAAnD;;AAEA,YAAIsD,aAAahH,OAAOiH,YAAP,CAAoBJ,OAApB,CAAjB;;AAGA,YAAIK,WAAWxH,OAAOyH,iBAAP,CAAyBH,UAAzB,EAAqC/F,gBAArC,CAAf;;AAGA,aAAK,IAAImG,IAAI,CAAb,EAAgBA,IAAIF,SAASxD,MAA7B,EAAqC0D,GAArC,EAA0C;AACtC,iBAAK/D,eAAL,CAAqBgE,cAArB,CAAoC,KAAK3E,aAAzC,EAAwDwE,SAASxD,MAAjE,EAAyEwD,SAASE,CAAT,CAAzE;AACA,iBAAK1E,aAAL;AACH;AACJ,KAfD;;AAuBAtB,0BAAsBiB,SAAtB,CAAgCuD,sBAAhC,GAAyD,UAAU1B,EAAV,EAAcoD,EAAd,EAAkB;AACvE,YAAIrH,OAAOgF,SAAP,EAAJ,EACI;AACJ,aAAKwB,cAAL,GAAsBP,SAASC,aAAT,CAAuB,QAAvB,CAAtB;AACA,YAAIzB,YAAY,EAAhB;AACAA,kBAAUlF,QAAQsB,6CAAlB,IAAmE,GAAnE;AACA4D,kBAAUlF,QAAQc,0BAAlB,IAAgD4D,EAAhD;AACAQ,kBAAUlF,QAAQe,0BAAlB,IAAgD+G,EAAhD;AACA,aAAKb,cAAL,CAAoBc,GAApB,GAA0B,KAAKtF,KAAL,CAAWyC,SAAX,CAA1B;AACA,aAAK+B,cAAL,CAAoBe,KAApB,CAA0BC,OAA1B,GAAoC,MAApC;AACAvB,iBAASQ,IAAT,CAAcgB,WAAd,CAA0B,KAAKjB,cAA/B;AACH,KAXD;;AAiBArF,0BAAsBiB,SAAtB,CAAgC2B,uBAAhC,GAA0D,UAAUT,IAAV,EAAgB;AAEtE,YAAI7B,gBAAgB1B,OAAO8G,SAAP,CAAiBvD,IAAjB,EAAuBG,MAA3C;AACA,aAAKhC,aAAL,IAAsBA,aAAtB;AACA,aAAKI,MAAL,CAAYiF,gBAAZ,CAA6B,gBAA7B,EAA+CrF,aAA/C;AACH,KALD;AAMA,WAAON,qBAAP;AACH,CA3P0C,EAA3C;AA4PA5B,QAAQ4B,qBAAR,GAAgCA,qBAAhC;;AAKA,IAAIkC,6BAA4C,YAAY;AAOxD,aAASA,0BAAT,CAAoCqE,SAApC,EAA+CC,WAA/C,EAA4DpF,YAA5D,EAA0EP,KAA1E,EAAiF;AAC7E,aAAKO,YAAL,GAAoBA,YAApB;AACA,aAAKP,KAAL,GAAaA,KAAb;;AAMA,aAAK4F,mBAAL,GAA2B,IAAIjI,aAAakI,UAAjB,EAA3B;;AAEA,aAAKC,WAAL,GAAmB,EAAnB;;AAMA,aAAKC,aAAL,GAAqB9E,KAAKC,KAAL,CAAWD,KAAKyB,MAAL,KAAgB,SAA3B,CAArB;;AAGA,aAAKP,YAAL,GAAoB,IAApB;AACA,YAAI,CAACnE,OAAOgF,SAAP,EAAL,EAAyB;AAKrB,iBAAKL,wBAAL,GAAgClF,OAAOuI,aAAP,EAAhC;AACAC,mBAAO1I,QAAQY,iCAAR,GAA4C,KAAKwE,wBAAxD,IAAoF+C,SAApF;AACAO,mBAAO1I,QAAQa,8BAAR,GAAyC,KAAKuE,wBAArD,IAAiFgD,WAAjF;;AAEA,iBAAKO,QAAL,GAAgB7E,2BAA2B8E,aAA3B,EAAhB;;AAEA,gBAAIC,SAAS,EAAb;;AAGA,gBAAI,KAAKF,QAAL,CAAcZ,GAAd,IACA,KAAKY,QAAL,CAAcZ,GAAd,CAAkBe,MAAlB,CAAyB,CAAzB,EAA4B,cAAc5E,MAA1C,MAAsD,aAD1D,EACyE;AACrE,oBAAI6E,gBAAgBrC,SAASsC,MAA7B;AACAH,yBAAS,8BAA8BE,aAA9B,GAA8C,aAAvD;AACH;AACD,gBAAIE,iBAAiB,iBAAiBJ,MAAjB,GAA0B,gBAA/C;AACA,gBAAI;AACA,qBAAKF,QAAL,CAAcO,GAAd,CAAkBpG,IAAlB;AACA,qBAAK6F,QAAL,CAAcO,GAAd,CAAkBC,KAAlB,CAAwBF,cAAxB;AACA,qBAAKN,QAAL,CAAcO,GAAd,CAAkBlC,KAAlB;AACH,aAJD,CAKA,OAAOoC,CAAP,EAAU;AACNlJ,uBAAOmJ,GAAP,CAAW,yBAAX;AACA,oBAAID,EAAEE,KAAN,EAAa;AACTpJ,2BAAOmJ,GAAP,CAAWD,EAAEE,KAAb;AACH;AACDpJ,uBAAOmJ,GAAP,CAAWD,CAAX;AACH;AACJ,SAhCD,MAiCK;AACD,iBAAKjB,SAAL,GAAiBA,SAAjB;AACA,iBAAKC,WAAL,GAAmBA,WAAnB;AACH;AACJ;;AAODtE,+BAA2B8E,aAA3B,GAA2C,YAAY;AACnD,YAAIW,SAAS7C,SAASC,aAAT,CAAuB,QAAvB,CAAb;AACA4C,eAAOvB,KAAP,CAAaC,OAAb,GAAuB,MAAvB;;AAEA,YAAIvB,SAASQ,IAAb,EAAmB;AACfR,qBAASQ,IAAT,CAAcgB,WAAd,CAA0BqB,MAA1B;AACA,gBAAI;AAIA,oBAAIC,IAAID,OAAOE,aAAP,CAAqB/C,QAA7B;AACA,oBAAI,CAAC8C,CAAL,EAAQ;AAEJtJ,2BAAOmJ,GAAP,CAAW,+BAAX;AACH;AACJ,aATD,CAUA,OAAOD,CAAP,EAAU;AACN,oBAAIJ,SAAStC,SAASsC,MAAtB;AACAO,uBAAOxB,GAAP,GACI,kEACIiB,MADJ,GAEI,0BAHR;AAIH;AACJ,SAnBD,MAoBK;AAGD,kBAAM,mGAAN;AACH;;AAED,YAAIO,OAAOG,eAAX,EAA4B;AACxBH,mBAAOL,GAAP,GAAaK,OAAOG,eAApB;AACH,SAFD,MAGK,IAAIH,OAAOE,aAAX,EAA0B;AAC3BF,mBAAOL,GAAP,GAAaK,OAAOE,aAAP,CAAqB/C,QAAlC;AACH,SAFI,MAGA,IAAI6C,OAAO7C,QAAX,EAAqB;AACtB6C,mBAAOL,GAAP,GAAaK,OAAO7C,QAApB;AACH;AACD,eAAO6C,MAAP;AACH,KAxCD;;AA4CAzF,+BAA2BjB,SAA3B,CAAqCmE,KAArC,GAA6C,YAAY;AACrD,YAAI/D,QAAQ,IAAZ;;AAEA,aAAK0G,KAAL,GAAa,KAAb;AACA,YAAI,KAAKhB,QAAT,EAAmB;AAIf,iBAAKA,QAAL,CAAcO,GAAd,CAAkBhC,IAAlB,CAAuB0C,SAAvB,GAAmC,EAAnC;AACApG,uBAAW,YAAY;AACnB,oBAAIP,MAAM0F,QAAN,KAAmB,IAAvB,EAA6B;AACzBjC,6BAASQ,IAAT,CAAcC,WAAd,CAA0BlE,MAAM0F,QAAhC;AACA1F,0BAAM0F,QAAN,GAAiB,IAAjB;AACH;AACJ,aALD,EAKGjF,KAAKC,KAAL,CAAW,CAAX,CALH;AAMH;AACD,YAAIlD,OAAOgF,SAAP,MAAsB,KAAKoE,IAA/B,EAAqC;AACjC,gBAAI3E,YAAY,EAAhB;AACAA,sBAAUlF,QAAQqB,qCAAlB,IAA2D,GAA3D;AACA6D,sBAAUlF,QAAQc,0BAAlB,IAAgD,KAAK+I,IAArD;AACA3E,sBAAUlF,QAAQe,0BAAlB,IAAgD,KAAK+I,IAArD;AACA,gBAAIC,SAAS,KAAKtH,KAAL,CAAWyC,SAAX,CAAb;AACApB,uCAA2BkG,eAA3B,CAA2CD,MAA3C;AACH;;AAED,YAAI/G,eAAe,KAAKA,YAAxB;AACA,YAAIA,YAAJ,EAAkB;AACd,iBAAKA,YAAL,GAAoB,IAApB;AACAA;AACH;AACJ,KA9BD;;AAoCAc,+BAA2BjB,SAA3B,CAAqCsD,aAArC,GAAqD,UAAUzB,EAAV,EAAcoD,EAAd,EAAkB;AACnE,aAAK+B,IAAL,GAAYnF,EAAZ;AACA,aAAKoF,IAAL,GAAYhC,EAAZ;AACA,aAAK6B,KAAL,GAAa,IAAb;;AAEA,eAAO,KAAKM,WAAL,EAAP,EAA2B,CAAG;AACjC,KAND;;AAcAnG,+BAA2BjB,SAA3B,CAAqCoH,WAArC,GAAmD,YAAY;AAI3D,YAAI,KAAKN,KAAL,IACA,KAAK/E,YADL,IAEA,KAAKyD,mBAAL,CAAyB6B,KAAzB,MAAoC,KAAK3B,WAAL,CAAiBrE,MAAjB,GAA0B,CAA1B,GAA8B,CAA9B,GAAkC,CAAtE,CAFJ,EAE8E;AAE1E,iBAAKsE,aAAL;AACA,gBAAItD,YAAY,EAAhB;AACAA,sBAAUlF,QAAQc,0BAAlB,IAAgD,KAAK+I,IAArD;AACA3E,sBAAUlF,QAAQe,0BAAlB,IAAgD,KAAK+I,IAArD;AACA5E,sBAAUlF,QAAQgB,8BAAlB,IAAoD,KAAKwH,aAAzD;AACA,gBAAIuB,SAAS,KAAKtH,KAAL,CAAWyC,SAAX,CAAb;;AAEA,gBAAIiF,gBAAgB,EAApB;AACA,gBAAIvC,IAAI,CAAR;AACA,mBAAO,KAAKW,WAAL,CAAiBrE,MAAjB,GAA0B,CAAjC,EAAoC;AAEhC,oBAAIkG,UAAU,KAAK7B,WAAL,CAAiB,CAAjB,CAAd;AACA,oBAAI6B,QAAQC,CAAR,CAAUnG,MAAV,GAAmB1C,eAAnB,GAAqC2I,cAAcjG,MAAnD,IACA3C,iBADJ,EACuB;AAEnB,wBAAI+I,SAAS,KAAK/B,WAAL,CAAiBgC,KAAjB,EAAb;AACAJ,oCACIA,gBACI,GADJ,GAEInK,QAAQkB,mCAFZ,GAGI0G,CAHJ,GAII,GAJJ,GAKI0C,OAAOE,GALX,GAMI,GANJ,GAOIxK,QAAQmB,oCAPZ,GAQIyG,CARJ,GASI,GATJ,GAUI0C,OAAOG,EAVX,GAWI,GAXJ,GAYIzK,QAAQoB,4BAZZ,GAaIwG,CAbJ,GAcI,GAdJ,GAeI0C,OAAOD,CAhBf;AAiBAzC;AACH,iBAtBD,MAuBK;AACD;AACH;AACJ;AACDmC,qBAASA,SAASI,aAAlB;AACA,iBAAKO,eAAL,CAAqBX,MAArB,EAA6B,KAAKvB,aAAlC;AACA,mBAAO,IAAP;AACH,SA9CD,MA+CK;AACD,mBAAO,KAAP;AACH;AACJ,KAtDD;;AA6DA1E,+BAA2BjB,SAA3B,CAAqCgF,cAArC,GAAsD,UAAU8C,MAAV,EAAkBC,SAAlB,EAA6B5F,IAA7B,EAAmC;AAErF,aAAKuD,WAAL,CAAiBsC,IAAjB,CAAsB,EAAEL,KAAKG,MAAP,EAAeF,IAAIG,SAAnB,EAA8BP,GAAGrF,IAAjC,EAAtB;;AAGA,YAAI,KAAK2E,KAAT,EAAgB;AACZ,iBAAKM,WAAL;AACH;AACJ,KARD;;AAeAnG,+BAA2BjB,SAA3B,CAAqC6H,eAArC,GAAuD,UAAUI,GAAV,EAAeC,MAAf,EAAuB;AAC1E,YAAI9H,QAAQ,IAAZ;;AAEA,aAAKoF,mBAAL,CAAyB2C,GAAzB,CAA6BD,MAA7B,EAAqC,CAArC;AACA,YAAIE,eAAe,SAAfA,YAAe,GAAY;AAC3BhI,kBAAMoF,mBAAN,CAA0B6C,MAA1B,CAAiCH,MAAjC;AACA9H,kBAAMgH,WAAN;AACH,SAHD;;AAMA,YAAIkB,mBAAmB3H,WAAWyH,YAAX,EAAyBvH,KAAKC,KAAL,CAAWjC,0BAAX,CAAzB,CAAvB;AACA,YAAI0J,eAAe,SAAfA,YAAe,GAAY;AAE3B3G,yBAAa0G,gBAAb;;AAEAF;AACH,SALD;AAMA,aAAKhF,MAAL,CAAY6E,GAAZ,EAAiBM,YAAjB;AACH,KAlBD;;AAwBAtH,+BAA2BjB,SAA3B,CAAqCoD,MAArC,GAA8C,UAAU6E,GAAV,EAAeO,MAAf,EAAuB;AACjE,YAAIpI,QAAQ,IAAZ;AACA,YAAIxC,OAAOgF,SAAP,EAAJ,EAAwB;AACpB,iBAAK6F,cAAL,CAAoBR,GAApB,EAAyBO,MAAzB;AACH,SAFD,MAGK;AACD7H,uBAAW,YAAY;AACnB,oBAAI;AAEA,wBAAI,CAACP,MAAM2B,YAAX,EACI;AACJ,wBAAI2G,cAActI,MAAM0F,QAAN,CAAeO,GAAf,CAAmBvC,aAAnB,CAAiC,QAAjC,CAAlB;AACA4E,gCAAYC,IAAZ,GAAmB,iBAAnB;AACAD,gCAAYE,KAAZ,GAAoB,IAApB;AACAF,gCAAYxD,GAAZ,GAAkB+C,GAAlB;AACAS,gCAAYG,MAAZ,GAAqBH,YAAYI,kBAAZ,GAAiC,YAAY;AAC9D,4BAAIC,SAASL,YAAYM,UAAzB;AACA,4BAAI,CAACD,MAAD,IAAWA,WAAW,QAAtB,IAAkCA,WAAW,UAAjD,EAA6D;AACzDL,wCAAYG,MAAZ,GAAqBH,YAAYI,kBAAZ,GAAiC,IAAtD;AACA,gCAAIJ,YAAYO,UAAhB,EAA4B;AACxBP,4CAAYO,UAAZ,CAAuB3E,WAAvB,CAAmCoE,WAAnC;AACH;AACDF;AACH;AACJ,qBATD;AAUAE,gCAAYQ,OAAZ,GAAsB,YAAY;AAC9B7L,+BAAOmJ,GAAP,CAAW,sCAAsCyB,GAAjD;AACA7H,8BAAM2B,YAAN,GAAqB,KAArB;AACA3B,8BAAM+D,KAAN;AACH,qBAJD;AAKA/D,0BAAM0F,QAAN,CAAeO,GAAf,CAAmBhC,IAAnB,CAAwBgB,WAAxB,CAAoCqD,WAApC;AACH,iBAxBD,CAyBA,OAAOnC,CAAP,EAAU,CAET;AACJ,aA7BD,EA6BG1F,KAAKC,KAAL,CAAW,CAAX,CA7BH;AA8BH;AACJ,KArCD;AAsCA,WAAOG,0BAAP;AACH,CAhT+C,EAAhD;AAiTA9D,QAAQ8D,0BAAR,GAAqCA,0BAArC","sourcesContent":["\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util_1 = require(\"../core/util/util\");\nvar CountedSet_1 = require(\"../core/util/CountedSet\");\nvar StatsManager_1 = require(\"../core/stats/StatsManager\");\nvar PacketReceiver_1 = require(\"./polling/PacketReceiver\");\nvar Constants_1 = require(\"./Constants\");\nvar util_2 = require(\"@firebase/util\");\nvar util_3 = require(\"@firebase/util\");\n// URL query parameters associated with longpolling\nexports.FIREBASE_LONGPOLL_START_PARAM = 'start';\nexports.FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\nexports.FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\nexports.FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\nexports.FIREBASE_LONGPOLL_ID_PARAM = 'id';\nexports.FIREBASE_LONGPOLL_PW_PARAM = 'pw';\nexports.FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\nexports.FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\nexports.FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\nexports.FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\nexports.FIREBASE_LONGPOLL_DATA_PARAM = 'd';\nexports.FIREBASE_LONGPOLL_DISCONN_FRAME_PARAM = 'disconn';\nexports.FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';\n//Data size constants.\n//TODO: Perf: the maximum length actually differs from browser to browser.\n// We should check what browser we're on and set accordingly.\nvar MAX_URL_DATA_SIZE = 1870;\nvar SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\nvar MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\n/**\n * Keepalive period\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\n * length of 30 seconds that we can't exceed.\n * @const\n * @type {number}\n */\nvar KEEPALIVE_REQUEST_INTERVAL = 25000;\n/**\n * How long to wait before aborting a long-polling connection attempt.\n * @const\n * @type {number}\n */\nvar LP_CONNECT_TIMEOUT = 30000;\n/**\n * This class manages a single long-polling connection.\n *\n * @constructor\n * @implements {Transport}\n */\nvar BrowserPollConnection = /** @class */ (function () {\n    /**\n     * @param {string} connId An identifier for this connection, used for logging\n     * @param {RepoInfo} repoInfo The info for the endpoint to send data to.\n     * @param {string=} transportSessionId Optional transportSessionid if we are reconnecting for an existing\n     *                                         transport session\n     * @param {string=}  lastSessionId Optional lastSessionId if the PersistentConnection has already created a\n     *                                     connection previously\n     */\n    function BrowserPollConnection(connId, repoInfo, transportSessionId, lastSessionId) {\n        this.connId = connId;\n        this.repoInfo = repoInfo;\n        this.transportSessionId = transportSessionId;\n        this.lastSessionId = lastSessionId;\n        this.bytesSent = 0;\n        this.bytesReceived = 0;\n        this.everConnected_ = false;\n        this.log_ = util_1.logWrapper(connId);\n        this.stats_ = StatsManager_1.StatsManager.getCollection(repoInfo);\n        this.urlFn = function (params) {\n            return repoInfo.connectionURL(Constants_1.LONG_POLLING, params);\n        };\n    }\n    /**\n     *\n     * @param {function(Object)} onMessage Callback when messages arrive\n     * @param {function()} onDisconnect Callback with connection lost.\n     */\n    BrowserPollConnection.prototype.open = function (onMessage, onDisconnect) {\n        var _this = this;\n        this.curSegmentNum = 0;\n        this.onDisconnect_ = onDisconnect;\n        this.myPacketOrderer = new PacketReceiver_1.PacketReceiver(onMessage);\n        this.isClosed_ = false;\n        this.connectTimeoutTimer_ = setTimeout(function () {\n            _this.log_('Timed out trying to connect.');\n            // Make sure we clear the host cache\n            _this.onClosed_();\n            _this.connectTimeoutTimer_ = null;\n        }, Math.floor(LP_CONNECT_TIMEOUT));\n        // Ensure we delay the creation of the iframe until the DOM is loaded.\n        util_1.executeWhenDOMReady(function () {\n            if (_this.isClosed_)\n                return;\n            //Set up a callback that gets triggered once a connection is set up.\n            _this.scriptTagHolder = new FirebaseIFrameScriptHolder(function () {\n                var args = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    args[_i] = arguments[_i];\n                }\n                var command = args[0], arg1 = args[1], arg2 = args[2], arg3 = args[3], arg4 = args[4];\n                _this.incrementIncomingBytes_(args);\n                if (!_this.scriptTagHolder)\n                    return; // we closed the connection.\n                if (_this.connectTimeoutTimer_) {\n                    clearTimeout(_this.connectTimeoutTimer_);\n                    _this.connectTimeoutTimer_ = null;\n                }\n                _this.everConnected_ = true;\n                if (command == exports.FIREBASE_LONGPOLL_START_PARAM) {\n                    _this.id = arg1;\n                    _this.password = arg2;\n                }\n                else if (command === exports.FIREBASE_LONGPOLL_CLOSE_COMMAND) {\n                    // Don't clear the host cache. We got a response from the server, so we know it's reachable\n                    if (arg1) {\n                        // We aren't expecting any more data (other than what the server's already in the process of sending us\n                        // through our already open polls), so don't send any more.\n                        _this.scriptTagHolder.sendNewPolls = false;\n                        // arg1 in this case is the last response number sent by the server. We should try to receive\n                        // all of the responses up to this one before closing\n                        _this.myPacketOrderer.closeAfter(arg1, function () {\n                            _this.onClosed_();\n                        });\n                    }\n                    else {\n                        _this.onClosed_();\n                    }\n                }\n                else {\n                    throw new Error('Unrecognized command received: ' + command);\n                }\n            }, function () {\n                var args = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    args[_i] = arguments[_i];\n                }\n                var pN = args[0], data = args[1];\n                _this.incrementIncomingBytes_(args);\n                _this.myPacketOrderer.handleResponse(pN, data);\n            }, function () {\n                _this.onClosed_();\n            }, _this.urlFn);\n            //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\n            //from cache.\n            var urlParams = {};\n            urlParams[exports.FIREBASE_LONGPOLL_START_PARAM] = 't';\n            urlParams[exports.FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(Math.random() * 100000000);\n            if (_this.scriptTagHolder.uniqueCallbackIdentifier)\n                urlParams[exports.FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] = _this.scriptTagHolder.uniqueCallbackIdentifier;\n            urlParams[Constants_1.VERSION_PARAM] = Constants_1.PROTOCOL_VERSION;\n            if (_this.transportSessionId) {\n                urlParams[Constants_1.TRANSPORT_SESSION_PARAM] = _this.transportSessionId;\n            }\n            if (_this.lastSessionId) {\n                urlParams[Constants_1.LAST_SESSION_PARAM] = _this.lastSessionId;\n            }\n            if (!util_3.isNodeSdk() &&\n                typeof location !== 'undefined' &&\n                location.href &&\n                location.href.indexOf(Constants_1.FORGE_DOMAIN) !== -1) {\n                urlParams[Constants_1.REFERER_PARAM] = Constants_1.FORGE_REF;\n            }\n            var connectURL = _this.urlFn(urlParams);\n            _this.log_('Connecting via long-poll to ' + connectURL);\n            _this.scriptTagHolder.addTag(connectURL, function () {\n                /* do nothing */\n            });\n        });\n    };\n    /**\n     * Call this when a handshake has completed successfully and we want to consider the connection established\n     */\n    BrowserPollConnection.prototype.start = function () {\n        this.scriptTagHolder.startLongPoll(this.id, this.password);\n        this.addDisconnectPingFrame(this.id, this.password);\n    };\n    /**\n     * Forces long polling to be considered as a potential transport\n     */\n    BrowserPollConnection.forceAllow = function () {\n        BrowserPollConnection.forceAllow_ = true;\n    };\n    /**\n     * Forces longpolling to not be considered as a potential transport\n     */\n    BrowserPollConnection.forceDisallow = function () {\n        BrowserPollConnection.forceDisallow_ = true;\n    };\n    // Static method, use string literal so it can be accessed in a generic way\n    BrowserPollConnection.isAvailable = function () {\n        // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\n        // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\n        return (BrowserPollConnection.forceAllow_ ||\n            (!BrowserPollConnection.forceDisallow_ &&\n                typeof document !== 'undefined' &&\n                document.createElement != null &&\n                !util_1.isChromeExtensionContentScript() &&\n                !util_1.isWindowsStoreApp() &&\n                !util_3.isNodeSdk()));\n    };\n    /**\n     * No-op for polling\n     */\n    BrowserPollConnection.prototype.markConnectionHealthy = function () { };\n    /**\n     * Stops polling and cleans up the iframe\n     * @private\n     */\n    BrowserPollConnection.prototype.shutdown_ = function () {\n        this.isClosed_ = true;\n        if (this.scriptTagHolder) {\n            this.scriptTagHolder.close();\n            this.scriptTagHolder = null;\n        }\n        //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\n        if (this.myDisconnFrame) {\n            document.body.removeChild(this.myDisconnFrame);\n            this.myDisconnFrame = null;\n        }\n        if (this.connectTimeoutTimer_) {\n            clearTimeout(this.connectTimeoutTimer_);\n            this.connectTimeoutTimer_ = null;\n        }\n    };\n    /**\n     * Triggered when this transport is closed\n     * @private\n     */\n    BrowserPollConnection.prototype.onClosed_ = function () {\n        if (!this.isClosed_) {\n            this.log_('Longpoll is closing itself');\n            this.shutdown_();\n            if (this.onDisconnect_) {\n                this.onDisconnect_(this.everConnected_);\n                this.onDisconnect_ = null;\n            }\n        }\n    };\n    /**\n     * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\n     * that we've left.\n     */\n    BrowserPollConnection.prototype.close = function () {\n        if (!this.isClosed_) {\n            this.log_('Longpoll is being closed.');\n            this.shutdown_();\n        }\n    };\n    /**\n     * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\n     * broken into chunks (since URLs have a small maximum length).\n     * @param {!Object} data The JSON data to transmit.\n     */\n    BrowserPollConnection.prototype.send = function (data) {\n        var dataStr = util_2.stringify(data);\n        this.bytesSent += dataStr.length;\n        this.stats_.incrementCounter('bytes_sent', dataStr.length);\n        //first, lets get the base64-encoded data\n        var base64data = util_2.base64Encode(dataStr);\n        //We can only fit a certain amount in each URL, so we need to split this request\n        //up into multiple pieces if it doesn't fit in one request.\n        var dataSegs = util_1.splitStringBySize(base64data, MAX_PAYLOAD_SIZE);\n        //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\n        //of segments so that we can reassemble the packet on the server.\n        for (var i = 0; i < dataSegs.length; i++) {\n            this.scriptTagHolder.enqueueSegment(this.curSegmentNum, dataSegs.length, dataSegs[i]);\n            this.curSegmentNum++;\n        }\n    };\n    /**\n     * This is how we notify the server that we're leaving.\n     * We aren't able to send requests with DHTML on a window close event, but we can\n     * trigger XHR requests in some browsers (everything but Opera basically).\n     * @param {!string} id\n     * @param {!string} pw\n     */\n    BrowserPollConnection.prototype.addDisconnectPingFrame = function (id, pw) {\n        if (util_3.isNodeSdk())\n            return;\n        this.myDisconnFrame = document.createElement('iframe');\n        var urlParams = {};\n        urlParams[exports.FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\n        urlParams[exports.FIREBASE_LONGPOLL_ID_PARAM] = id;\n        urlParams[exports.FIREBASE_LONGPOLL_PW_PARAM] = pw;\n        this.myDisconnFrame.src = this.urlFn(urlParams);\n        this.myDisconnFrame.style.display = 'none';\n        document.body.appendChild(this.myDisconnFrame);\n    };\n    /**\n     * Used to track the bytes received by this client\n     * @param {*} args\n     * @private\n     */\n    BrowserPollConnection.prototype.incrementIncomingBytes_ = function (args) {\n        // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\n        var bytesReceived = util_2.stringify(args).length;\n        this.bytesReceived += bytesReceived;\n        this.stats_.incrementCounter('bytes_received', bytesReceived);\n    };\n    return BrowserPollConnection;\n}());\nexports.BrowserPollConnection = BrowserPollConnection;\n/*********************************************************************************************\n * A wrapper around an iframe that is used as a long-polling script holder.\n * @constructor\n *********************************************************************************************/\nvar FirebaseIFrameScriptHolder = /** @class */ (function () {\n    /**\n     * @param commandCB - The callback to be called when control commands are recevied from the server.\n     * @param onMessageCB - The callback to be triggered when responses arrive from the server.\n     * @param onDisconnect - The callback to be triggered when this tag holder is closed\n     * @param urlFn - A function that provides the URL of the endpoint to send data to.\n     */\n    function FirebaseIFrameScriptHolder(commandCB, onMessageCB, onDisconnect, urlFn) {\n        this.onDisconnect = onDisconnect;\n        this.urlFn = urlFn;\n        //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\n        //problems in some browsers.\n        /**\n         * @type {CountedSet.<number, number>}\n         */\n        this.outstandingRequests = new CountedSet_1.CountedSet();\n        //A queue of the pending segments waiting for transmission to the server.\n        this.pendingSegs = [];\n        //A serial number. We use this for two things:\n        // 1) A way to ensure the browser doesn't cache responses to polls\n        // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\n        //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\n        //    JSONP code in the order it was added to the iframe.\n        this.currentSerial = Math.floor(Math.random() * 100000000);\n        // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\n        // incoming data from the server that we're waiting for).\n        this.sendNewPolls = true;\n        if (!util_3.isNodeSdk()) {\n            //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\n            //iframes where we put the long-polling script tags. We have two callbacks:\n            //   1) Command Callback - Triggered for control issues, like starting a connection.\n            //   2) Message Callback - Triggered when new data arrives.\n            this.uniqueCallbackIdentifier = util_1.LUIDGenerator();\n            window[exports.FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier] = commandCB;\n            window[exports.FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] = onMessageCB;\n            //Create an iframe for us to add script tags to.\n            this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();\n            // Set the iframe's contents.\n            var script = '';\n            // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\n            // for ie9, but ie8 needs to do it again in the document itself.\n            if (this.myIFrame.src &&\n                this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:') {\n                var currentDomain = document.domain;\n                script = '<script>document.domain=\"' + currentDomain + '\";</script>';\n            }\n            var iframeContents = '<html><body>' + script + '</body></html>';\n            try {\n                this.myIFrame.doc.open();\n                this.myIFrame.doc.write(iframeContents);\n                this.myIFrame.doc.close();\n            }\n            catch (e) {\n                util_1.log('frame writing exception');\n                if (e.stack) {\n                    util_1.log(e.stack);\n                }\n                util_1.log(e);\n            }\n        }\n        else {\n            this.commandCB = commandCB;\n            this.onMessageCB = onMessageCB;\n        }\n    }\n    /**\n     * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\n     * actually use.\n     * @private\n     * @return {Element}\n     */\n    FirebaseIFrameScriptHolder.createIFrame_ = function () {\n        var iframe = document.createElement('iframe');\n        iframe.style.display = 'none';\n        // This is necessary in order to initialize the document inside the iframe\n        if (document.body) {\n            document.body.appendChild(iframe);\n            try {\n                // If document.domain has been modified in IE, this will throw an error, and we need to set the\n                // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\n                // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\n                var a = iframe.contentWindow.document;\n                if (!a) {\n                    // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\n                    util_1.log('No IE domain setting required');\n                }\n            }\n            catch (e) {\n                var domain = document.domain;\n                iframe.src =\n                    \"javascript:void((function(){document.open();document.domain='\" +\n                        domain +\n                        \"';document.close();})())\";\n            }\n        }\n        else {\n            // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\n            // never gets hit.\n            throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\n        }\n        // Get the document of the iframe in a browser-specific way.\n        if (iframe.contentDocument) {\n            iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\n        }\n        else if (iframe.contentWindow) {\n            iframe.doc = iframe.contentWindow.document; // Internet Explorer\n        }\n        else if (iframe.document) {\n            iframe.doc = iframe.document; //others?\n        }\n        return iframe;\n    };\n    /**\n     * Cancel all outstanding queries and remove the frame.\n     */\n    FirebaseIFrameScriptHolder.prototype.close = function () {\n        var _this = this;\n        //Mark this iframe as dead, so no new requests are sent.\n        this.alive = false;\n        if (this.myIFrame) {\n            //We have to actually remove all of the html inside this iframe before removing it from the\n            //window, or IE will continue loading and executing the script tags we've already added, which\n            //can lead to some errors being thrown. Setting innerHTML seems to be the easiest way to do this.\n            this.myIFrame.doc.body.innerHTML = '';\n            setTimeout(function () {\n                if (_this.myIFrame !== null) {\n                    document.body.removeChild(_this.myIFrame);\n                    _this.myIFrame = null;\n                }\n            }, Math.floor(0));\n        }\n        if (util_3.isNodeSdk() && this.myID) {\n            var urlParams = {};\n            urlParams[exports.FIREBASE_LONGPOLL_DISCONN_FRAME_PARAM] = 't';\n            urlParams[exports.FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\n            urlParams[exports.FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\n            var theURL = this.urlFn(urlParams);\n            FirebaseIFrameScriptHolder.nodeRestRequest(theURL);\n        }\n        // Protect from being called recursively.\n        var onDisconnect = this.onDisconnect;\n        if (onDisconnect) {\n            this.onDisconnect = null;\n            onDisconnect();\n        }\n    };\n    /**\n     * Actually start the long-polling session by adding the first script tag(s) to the iframe.\n     * @param {!string} id - The ID of this connection\n     * @param {!string} pw - The password for this connection\n     */\n    FirebaseIFrameScriptHolder.prototype.startLongPoll = function (id, pw) {\n        this.myID = id;\n        this.myPW = pw;\n        this.alive = true;\n        //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\n        while (this.newRequest_()) { }\n    };\n    /**\n     * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\n     * too many outstanding requests and we are still alive.\n     *\n     * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\n     * needed.\n     */\n    FirebaseIFrameScriptHolder.prototype.newRequest_ = function () {\n        // We keep one outstanding request open all the time to receive data, but if we need to send data\n        // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\n        // close the old request.\n        if (this.alive &&\n            this.sendNewPolls &&\n            this.outstandingRequests.count() < (this.pendingSegs.length > 0 ? 2 : 1)) {\n            //construct our url\n            this.currentSerial++;\n            var urlParams = {};\n            urlParams[exports.FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\n            urlParams[exports.FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\n            urlParams[exports.FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\n            var theURL = this.urlFn(urlParams);\n            //Now add as much data as we can.\n            var curDataString = '';\n            var i = 0;\n            while (this.pendingSegs.length > 0) {\n                //first, lets see if the next segment will fit.\n                var nextSeg = this.pendingSegs[0];\n                if (nextSeg.d.length + SEG_HEADER_SIZE + curDataString.length <=\n                    MAX_URL_DATA_SIZE) {\n                    //great, the segment will fit. Lets append it.\n                    var theSeg = this.pendingSegs.shift();\n                    curDataString =\n                        curDataString +\n                            '&' +\n                            exports.FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM +\n                            i +\n                            '=' +\n                            theSeg.seg +\n                            '&' +\n                            exports.FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET +\n                            i +\n                            '=' +\n                            theSeg.ts +\n                            '&' +\n                            exports.FIREBASE_LONGPOLL_DATA_PARAM +\n                            i +\n                            '=' +\n                            theSeg.d;\n                    i++;\n                }\n                else {\n                    break;\n                }\n            }\n            theURL = theURL + curDataString;\n            this.addLongPollTag_(theURL, this.currentSerial);\n            return true;\n        }\n        else {\n            return false;\n        }\n    };\n    /**\n     * Queue a packet for transmission to the server.\n     * @param segnum - A sequential id for this packet segment used for reassembly\n     * @param totalsegs - The total number of segments in this packet\n     * @param data - The data for this segment.\n     */\n    FirebaseIFrameScriptHolder.prototype.enqueueSegment = function (segnum, totalsegs, data) {\n        //add this to the queue of segments to send.\n        this.pendingSegs.push({ seg: segnum, ts: totalsegs, d: data });\n        //send the data immediately if there isn't already data being transmitted, unless\n        //startLongPoll hasn't been called yet.\n        if (this.alive) {\n            this.newRequest_();\n        }\n    };\n    /**\n     * Add a script tag for a regular long-poll request.\n     * @param {!string} url - The URL of the script tag.\n     * @param {!number} serial - The serial number of the request.\n     * @private\n     */\n    FirebaseIFrameScriptHolder.prototype.addLongPollTag_ = function (url, serial) {\n        var _this = this;\n        //remember that we sent this request.\n        this.outstandingRequests.add(serial, 1);\n        var doNewRequest = function () {\n            _this.outstandingRequests.remove(serial);\n            _this.newRequest_();\n        };\n        // If this request doesn't return on its own accord (by the server sending us some data), we'll\n        // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\n        var keepaliveTimeout = setTimeout(doNewRequest, Math.floor(KEEPALIVE_REQUEST_INTERVAL));\n        var readyStateCB = function () {\n            // Request completed.  Cancel the keepalive.\n            clearTimeout(keepaliveTimeout);\n            // Trigger a new request so we can continue receiving data.\n            doNewRequest();\n        };\n        this.addTag(url, readyStateCB);\n    };\n    /**\n     * Add an arbitrary script tag to the iframe.\n     * @param {!string} url - The URL for the script tag source.\n     * @param {!function()} loadCB - A callback to be triggered once the script has loaded.\n     */\n    FirebaseIFrameScriptHolder.prototype.addTag = function (url, loadCB) {\n        var _this = this;\n        if (util_3.isNodeSdk()) {\n            this.doNodeLongPoll(url, loadCB);\n        }\n        else {\n            setTimeout(function () {\n                try {\n                    // if we're already closed, don't add this poll\n                    if (!_this.sendNewPolls)\n                        return;\n                    var newScript_1 = _this.myIFrame.doc.createElement('script');\n                    newScript_1.type = 'text/javascript';\n                    newScript_1.async = true;\n                    newScript_1.src = url;\n                    newScript_1.onload = newScript_1.onreadystatechange = function () {\n                        var rstate = newScript_1.readyState;\n                        if (!rstate || rstate === 'loaded' || rstate === 'complete') {\n                            newScript_1.onload = newScript_1.onreadystatechange = null;\n                            if (newScript_1.parentNode) {\n                                newScript_1.parentNode.removeChild(newScript_1);\n                            }\n                            loadCB();\n                        }\n                    };\n                    newScript_1.onerror = function () {\n                        util_1.log('Long-poll script failed to load: ' + url);\n                        _this.sendNewPolls = false;\n                        _this.close();\n                    };\n                    _this.myIFrame.doc.body.appendChild(newScript_1);\n                }\n                catch (e) {\n                    // TODO: we should make this error visible somehow\n                }\n            }, Math.floor(1));\n        }\n    };\n    return FirebaseIFrameScriptHolder;\n}());\nexports.FirebaseIFrameScriptHolder = FirebaseIFrameScriptHolder;\n\n//# sourceMappingURL=BrowserPollConnection.js.map\n"]}]