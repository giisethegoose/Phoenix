["324cd255c7caad7975d45d158a793e5219abb2e3","ea521c1c22bf637798b65ea770db19378b04ed6a",[],[],{"version":3,"sources":["/home/giise/candidtwo/node_modules/@firebase/database/dist/cjs/src/core/util/SortedMap.js"],"names":["Object","defineProperty","exports","value","SortedMapIterator","node","startKey","comparator","isReverse_","resultGenerator_","nodeStack_","cmp","isEmpty","key","left","right","push","prototype","getNext","length","pop","result","hasNext","peek","LLRBNode","color","RED","SortedMap","EMPTY_NODE","copy","count","inorderTraversal","action","reverseTraversal","min_","minKey","maxKey","insert","n","fixUp_","removeMin_","isRed_","moveRedLeft_","remove","smallest","rotateRight_","moveRedRight_","rotateLeft_","colorFlip_","nl","nr","checkMaxDepth_","blackDepth","check_","Math","pow","Error","BLACK","LLRBEmptyNode","comparator_","root_","get","getPredecessorKey","rightParent","getIterator","resultGenerator","getIteratorFrom","getReverseIteratorFrom","getReverseIterator"],"mappings":"AAAA;;AAgBAA,OAAOC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C,EAAEC,OAAO,IAAT,EAA7C;;AAIA,IAAIC,oBAAmC,YAAY;AAS/C,aAASA,iBAAT,CAA2BC,IAA3B,EAAiCC,QAAjC,EAA2CC,UAA3C,EAAuDC,UAAvD,EAAmEC,gBAAnE,EAAqF;AACjF,YAAIA,qBAAqB,KAAK,CAA9B,EAAiC;AAAEA,+BAAmB,IAAnB;AAA0B;AAC7D,aAAKD,UAAL,GAAkBA,UAAlB;AACA,aAAKC,gBAAL,GAAwBA,gBAAxB;;AAIA,aAAKC,UAAL,GAAkB,EAAlB;AACA,YAAIC,MAAM,CAAV;AACA,eAAO,CAACN,KAAKO,OAAL,EAAR,EAAwB;AACpBP,mBAAOA,IAAP;AACAM,kBAAML,WAAWC,WAAWF,KAAKQ,GAAhB,EAAqBP,QAArB,CAAX,GAA4C,CAAlD;;AAEA,gBAAIE,UAAJ,EACIG,OAAO,CAAC,CAAR;AACJ,gBAAIA,MAAM,CAAV,EAAa;AAET,oBAAI,KAAKH,UAAT,EAAqB;AACjBH,2BAAOA,KAAKS,IAAZ;AACH,iBAFD,MAGK;AACDT,2BAAOA,KAAKU,KAAZ;AACH;AACJ,aARD,MASK,IAAIJ,QAAQ,CAAZ,EAAe;AAEhB,qBAAKD,UAAL,CAAgBM,IAAhB,CAAqBX,IAArB;AACA;AACH,aAJI,MAKA;AAED,qBAAKK,UAAL,CAAgBM,IAAhB,CAAqBX,IAArB;AACA,oBAAI,KAAKG,UAAT,EAAqB;AACjBH,2BAAOA,KAAKU,KAAZ;AACH,iBAFD,MAGK;AACDV,2BAAOA,KAAKS,IAAZ;AACH;AACJ;AACJ;AACJ;AACDV,sBAAkBa,SAAlB,CAA4BC,OAA5B,GAAsC,YAAY;AAC9C,YAAI,KAAKR,UAAL,CAAgBS,MAAhB,KAA2B,CAA/B,EACI,OAAO,IAAP;AACJ,YAAId,OAAO,KAAKK,UAAL,CAAgBU,GAAhB,EAAX;AACA,YAAIC,MAAJ;AACA,YAAI,KAAKZ,gBAAT,EACIY,SAAS,KAAKZ,gBAAL,CAAsBJ,KAAKQ,GAA3B,EAAgCR,KAAKF,KAArC,CAAT,CADJ,KAGIkB,SAAS,EAAER,KAAKR,KAAKQ,GAAZ,EAAiBV,OAAOE,KAAKF,KAA7B,EAAT;AACJ,YAAI,KAAKK,UAAT,EAAqB;AACjBH,mBAAOA,KAAKS,IAAZ;AACA,mBAAO,CAACT,KAAKO,OAAL,EAAR,EAAwB;AACpB,qBAAKF,UAAL,CAAgBM,IAAhB,CAAqBX,IAArB;AACAA,uBAAOA,KAAKU,KAAZ;AACH;AACJ,SAND,MAOK;AACDV,mBAAOA,KAAKU,KAAZ;AACA,mBAAO,CAACV,KAAKO,OAAL,EAAR,EAAwB;AACpB,qBAAKF,UAAL,CAAgBM,IAAhB,CAAqBX,IAArB;AACAA,uBAAOA,KAAKS,IAAZ;AACH;AACJ;AACD,eAAOO,MAAP;AACH,KAxBD;AAyBAjB,sBAAkBa,SAAlB,CAA4BK,OAA5B,GAAsC,YAAY;AAC9C,eAAO,KAAKZ,UAAL,CAAgBS,MAAhB,GAAyB,CAAhC;AACH,KAFD;AAGAf,sBAAkBa,SAAlB,CAA4BM,IAA5B,GAAmC,YAAY;AAC3C,YAAI,KAAKb,UAAL,CAAgBS,MAAhB,KAA2B,CAA/B,EACI,OAAO,IAAP;AACJ,YAAId,OAAO,KAAKK,UAAL,CAAgB,KAAKA,UAAL,CAAgBS,MAAhB,GAAyB,CAAzC,CAAX;AACA,YAAI,KAAKV,gBAAT,EAA2B;AACvB,mBAAO,KAAKA,gBAAL,CAAsBJ,KAAKQ,GAA3B,EAAgCR,KAAKF,KAArC,CAAP;AACH,SAFD,MAGK;AACD,mBAAO,EAAEU,KAAKR,KAAKQ,GAAZ,EAAiBV,OAAOE,KAAKF,KAA7B,EAAP;AACH;AACJ,KAVD;AAWA,WAAOC,iBAAP;AACH,CA1FsC,EAAvC;AA2FAF,QAAQE,iBAAR,GAA4BA,iBAA5B;;AAIA,IAAIoB,WAA0B,YAAY;AAStC,aAASA,QAAT,CAAkBX,GAAlB,EAAuBV,KAAvB,EAA8BsB,KAA9B,EAAqCX,IAArC,EAA2CC,KAA3C,EAAkD;AAC9C,aAAKF,GAAL,GAAWA,GAAX;AACA,aAAKV,KAAL,GAAaA,KAAb;AACA,aAAKsB,KAAL,GAAaA,SAAS,IAAT,GAAgBA,KAAhB,GAAwBD,SAASE,GAA9C;AACA,aAAKZ,IAAL,GACIA,QAAQ,IAAR,GAAeA,IAAf,GAAsBa,UAAUC,UADpC;AAEA,aAAKb,KAAL,GACIA,SAAS,IAAT,GAAgBA,KAAhB,GAAwBY,UAAUC,UADtC;AAEH;;AAWDJ,aAASP,SAAT,CAAmBY,IAAnB,GAA0B,UAAUhB,GAAV,EAAeV,KAAf,EAAsBsB,KAAtB,EAA6BX,IAA7B,EAAmCC,KAAnC,EAA0C;AAChE,eAAO,IAAIS,QAAJ,CAAaX,OAAO,IAAP,GAAcA,GAAd,GAAoB,KAAKA,GAAtC,EAA2CV,SAAS,IAAT,GAAgBA,KAAhB,GAAwB,KAAKA,KAAxE,EAA+EsB,SAAS,IAAT,GAAgBA,KAAhB,GAAwB,KAAKA,KAA5G,EAAmHX,QAAQ,IAAR,GAAeA,IAAf,GAAsB,KAAKA,IAA9I,EAAoJC,SAAS,IAAT,GAAgBA,KAAhB,GAAwB,KAAKA,KAAjL,CAAP;AACH,KAFD;;AAMAS,aAASP,SAAT,CAAmBa,KAAnB,GAA2B,YAAY;AACnC,eAAO,KAAKhB,IAAL,CAAUgB,KAAV,KAAoB,CAApB,GAAwB,KAAKf,KAAL,CAAWe,KAAX,EAA/B;AACH,KAFD;;AAMAN,aAASP,SAAT,CAAmBL,OAAnB,GAA6B,YAAY;AACrC,eAAO,KAAP;AACH,KAFD;;AAYAY,aAASP,SAAT,CAAmBc,gBAAnB,GAAsC,UAAUC,MAAV,EAAkB;AACpD,eAAQ,KAAKlB,IAAL,CAAUiB,gBAAV,CAA2BC,MAA3B,KACJA,OAAO,KAAKnB,GAAZ,EAAiB,KAAKV,KAAtB,CADI,IAEJ,KAAKY,KAAL,CAAWgB,gBAAX,CAA4BC,MAA5B,CAFJ;AAGH,KAJD;;AAaAR,aAASP,SAAT,CAAmBgB,gBAAnB,GAAsC,UAAUD,MAAV,EAAkB;AACpD,eAAQ,KAAKjB,KAAL,CAAWkB,gBAAX,CAA4BD,MAA5B,KACJA,OAAO,KAAKnB,GAAZ,EAAiB,KAAKV,KAAtB,CADI,IAEJ,KAAKW,IAAL,CAAUmB,gBAAV,CAA2BD,MAA3B,CAFJ;AAGH,KAJD;;AASAR,aAASP,SAAT,CAAmBiB,IAAnB,GAA0B,YAAY;AAClC,YAAI,KAAKpB,IAAL,CAAUF,OAAV,EAAJ,EAAyB;AACrB,mBAAO,IAAP;AACH,SAFD,MAGK;AACD,mBAAO,KAAKE,IAAL,CAAUoB,IAAV,EAAP;AACH;AACJ,KAPD;;AAWAV,aAASP,SAAT,CAAmBkB,MAAnB,GAA4B,YAAY;AACpC,eAAO,KAAKD,IAAL,GAAYrB,GAAnB;AACH,KAFD;;AAMAW,aAASP,SAAT,CAAmBmB,MAAnB,GAA4B,YAAY;AACpC,YAAI,KAAKrB,KAAL,CAAWH,OAAX,EAAJ,EAA0B;AACtB,mBAAO,KAAKC,GAAZ;AACH,SAFD,MAGK;AACD,mBAAO,KAAKE,KAAL,CAAWqB,MAAX,EAAP;AACH;AACJ,KAPD;;AAeAZ,aAASP,SAAT,CAAmBoB,MAAnB,GAA4B,UAAUxB,GAAV,EAAeV,KAAf,EAAsBI,UAAtB,EAAkC;AAC1D,YAAII,GAAJ,EAAS2B,CAAT;AACAA,YAAI,IAAJ;AACA3B,cAAMJ,WAAWM,GAAX,EAAgByB,EAAEzB,GAAlB,CAAN;AACA,YAAIF,MAAM,CAAV,EAAa;AACT2B,gBAAIA,EAAET,IAAF,CAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyBS,EAAExB,IAAF,CAAOuB,MAAP,CAAcxB,GAAd,EAAmBV,KAAnB,EAA0BI,UAA1B,CAAzB,EAAgE,IAAhE,CAAJ;AACH,SAFD,MAGK,IAAII,QAAQ,CAAZ,EAAe;AAChB2B,gBAAIA,EAAET,IAAF,CAAO,IAAP,EAAa1B,KAAb,EAAoB,IAApB,EAA0B,IAA1B,EAAgC,IAAhC,CAAJ;AACH,SAFI,MAGA;AACDmC,gBAAIA,EAAET,IAAF,CAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyB,IAAzB,EAA+BS,EAAEvB,KAAF,CAAQsB,MAAR,CAAexB,GAAf,EAAoBV,KAApB,EAA2BI,UAA3B,CAA/B,CAAJ;AACH;AACD,eAAO+B,EAAEC,MAAF,EAAP;AACH,KAdD;;AAmBAf,aAASP,SAAT,CAAmBuB,UAAnB,GAAgC,YAAY;AACxC,YAAI,KAAK1B,IAAL,CAAUF,OAAV,EAAJ,EAAyB;AACrB,mBAAOe,UAAUC,UAAjB;AACH;AACD,YAAIU,IAAI,IAAR;AACA,YAAI,CAACA,EAAExB,IAAF,CAAO2B,MAAP,EAAD,IAAoB,CAACH,EAAExB,IAAF,CAAOA,IAAP,CAAY2B,MAAZ,EAAzB,EACIH,IAAIA,EAAEI,YAAF,EAAJ;AACJJ,YAAIA,EAAET,IAAF,CAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyBS,EAAExB,IAAF,CAAO0B,UAAP,EAAzB,EAA8C,IAA9C,CAAJ;AACA,eAAOF,EAAEC,MAAF,EAAP;AACH,KATD;;AAeAf,aAASP,SAAT,CAAmB0B,MAAnB,GAA4B,UAAU9B,GAAV,EAAeN,UAAf,EAA2B;AACnD,YAAI+B,CAAJ,EAAOM,QAAP;AACAN,YAAI,IAAJ;AACA,YAAI/B,WAAWM,GAAX,EAAgByB,EAAEzB,GAAlB,IAAyB,CAA7B,EAAgC;AAC5B,gBAAI,CAACyB,EAAExB,IAAF,CAAOF,OAAP,EAAD,IAAqB,CAAC0B,EAAExB,IAAF,CAAO2B,MAAP,EAAtB,IAAyC,CAACH,EAAExB,IAAF,CAAOA,IAAP,CAAY2B,MAAZ,EAA9C,EAAoE;AAChEH,oBAAIA,EAAEI,YAAF,EAAJ;AACH;AACDJ,gBAAIA,EAAET,IAAF,CAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyBS,EAAExB,IAAF,CAAO6B,MAAP,CAAc9B,GAAd,EAAmBN,UAAnB,CAAzB,EAAyD,IAAzD,CAAJ;AACH,SALD,MAMK;AACD,gBAAI+B,EAAExB,IAAF,CAAO2B,MAAP,EAAJ,EACIH,IAAIA,EAAEO,YAAF,EAAJ;AACJ,gBAAI,CAACP,EAAEvB,KAAF,CAAQH,OAAR,EAAD,IAAsB,CAAC0B,EAAEvB,KAAF,CAAQ0B,MAAR,EAAvB,IAA2C,CAACH,EAAEvB,KAAF,CAAQD,IAAR,CAAa2B,MAAb,EAAhD,EAAuE;AACnEH,oBAAIA,EAAEQ,aAAF,EAAJ;AACH;AACD,gBAAIvC,WAAWM,GAAX,EAAgByB,EAAEzB,GAAlB,MAA2B,CAA/B,EAAkC;AAC9B,oBAAIyB,EAAEvB,KAAF,CAAQH,OAAR,EAAJ,EAAuB;AACnB,2BAAOe,UAAUC,UAAjB;AACH,iBAFD,MAGK;AACDgB,+BAAWN,EAAEvB,KAAF,CAAQmB,IAAR,EAAX;AACAI,wBAAIA,EAAET,IAAF,CAAOe,SAAS/B,GAAhB,EAAqB+B,SAASzC,KAA9B,EAAqC,IAArC,EAA2C,IAA3C,EAAiDmC,EAAEvB,KAAF,CAAQyB,UAAR,EAAjD,CAAJ;AACH;AACJ;AACDF,gBAAIA,EAAET,IAAF,CAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyB,IAAzB,EAA+BS,EAAEvB,KAAF,CAAQ4B,MAAR,CAAe9B,GAAf,EAAoBN,UAApB,CAA/B,CAAJ;AACH;AACD,eAAO+B,EAAEC,MAAF,EAAP;AACH,KA3BD;;AAgCAf,aAASP,SAAT,CAAmBwB,MAAnB,GAA4B,YAAY;AACpC,eAAO,KAAKhB,KAAZ;AACH,KAFD;;AAOAD,aAASP,SAAT,CAAmBsB,MAAnB,GAA4B,YAAY;AACpC,YAAID,IAAI,IAAR;AACA,YAAIA,EAAEvB,KAAF,CAAQ0B,MAAR,MAAoB,CAACH,EAAExB,IAAF,CAAO2B,MAAP,EAAzB,EACIH,IAAIA,EAAES,WAAF,EAAJ;AACJ,YAAIT,EAAExB,IAAF,CAAO2B,MAAP,MAAmBH,EAAExB,IAAF,CAAOA,IAAP,CAAY2B,MAAZ,EAAvB,EACIH,IAAIA,EAAEO,YAAF,EAAJ;AACJ,YAAIP,EAAExB,IAAF,CAAO2B,MAAP,MAAmBH,EAAEvB,KAAF,CAAQ0B,MAAR,EAAvB,EACIH,IAAIA,EAAEU,UAAF,EAAJ;AACJ,eAAOV,CAAP;AACH,KATD;;AAcAd,aAASP,SAAT,CAAmByB,YAAnB,GAAkC,YAAY;AAC1C,YAAIJ,IAAI,KAAKU,UAAL,EAAR;AACA,YAAIV,EAAEvB,KAAF,CAAQD,IAAR,CAAa2B,MAAb,EAAJ,EAA2B;AACvBH,gBAAIA,EAAET,IAAF,CAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyB,IAAzB,EAA+BS,EAAEvB,KAAF,CAAQ8B,YAAR,EAA/B,CAAJ;AACAP,gBAAIA,EAAES,WAAF,EAAJ;AACAT,gBAAIA,EAAEU,UAAF,EAAJ;AACH;AACD,eAAOV,CAAP;AACH,KARD;;AAaAd,aAASP,SAAT,CAAmB6B,aAAnB,GAAmC,YAAY;AAC3C,YAAIR,IAAI,KAAKU,UAAL,EAAR;AACA,YAAIV,EAAExB,IAAF,CAAOA,IAAP,CAAY2B,MAAZ,EAAJ,EAA0B;AACtBH,gBAAIA,EAAEO,YAAF,EAAJ;AACAP,gBAAIA,EAAEU,UAAF,EAAJ;AACH;AACD,eAAOV,CAAP;AACH,KAPD;;AAYAd,aAASP,SAAT,CAAmB8B,WAAnB,GAAiC,YAAY;AACzC,YAAIE,KAAK,KAAKpB,IAAL,CAAU,IAAV,EAAgB,IAAhB,EAAsBL,SAASE,GAA/B,EAAoC,IAApC,EAA0C,KAAKX,KAAL,CAAWD,IAArD,CAAT;AACA,eAAO,KAAKC,KAAL,CAAWc,IAAX,CAAgB,IAAhB,EAAsB,IAAtB,EAA4B,KAAKJ,KAAjC,EAAwCwB,EAAxC,EAA4C,IAA5C,CAAP;AACH,KAHD;;AAQAzB,aAASP,SAAT,CAAmB4B,YAAnB,GAAkC,YAAY;AAC1C,YAAIK,KAAK,KAAKrB,IAAL,CAAU,IAAV,EAAgB,IAAhB,EAAsBL,SAASE,GAA/B,EAAoC,KAAKZ,IAAL,CAAUC,KAA9C,EAAqD,IAArD,CAAT;AACA,eAAO,KAAKD,IAAL,CAAUe,IAAV,CAAe,IAAf,EAAqB,IAArB,EAA2B,KAAKJ,KAAhC,EAAuC,IAAvC,EAA6CyB,EAA7C,CAAP;AACH,KAHD;;AAQA1B,aAASP,SAAT,CAAmB+B,UAAnB,GAAgC,YAAY;AACxC,YAAIlC,OAAO,KAAKA,IAAL,CAAUe,IAAV,CAAe,IAAf,EAAqB,IAArB,EAA2B,CAAC,KAAKf,IAAL,CAAUW,KAAtC,EAA6C,IAA7C,EAAmD,IAAnD,CAAX;AACA,YAAIV,QAAQ,KAAKA,KAAL,CAAWc,IAAX,CAAgB,IAAhB,EAAsB,IAAtB,EAA4B,CAAC,KAAKd,KAAL,CAAWU,KAAxC,EAA+C,IAA/C,EAAqD,IAArD,CAAZ;AACA,eAAO,KAAKI,IAAL,CAAU,IAAV,EAAgB,IAAhB,EAAsB,CAAC,KAAKJ,KAA5B,EAAmCX,IAAnC,EAAyCC,KAAzC,CAAP;AACH,KAJD;;AAWAS,aAASP,SAAT,CAAmBkC,cAAnB,GAAoC,YAAY;AAC5C,YAAIC,aAAa,KAAKC,MAAL,EAAjB;AACA,eAAOC,KAAKC,GAAL,CAAS,GAAT,EAAcH,UAAd,KAA6B,KAAKtB,KAAL,KAAe,CAAnD;AACH,KAHD;;AAQAN,aAASP,SAAT,CAAmBoC,MAAnB,GAA4B,YAAY;AACpC,YAAID,UAAJ;AACA,YAAI,KAAKX,MAAL,MAAiB,KAAK3B,IAAL,CAAU2B,MAAV,EAArB,EAAyC;AACrC,kBAAM,IAAIe,KAAJ,CAAU,4BAA4B,KAAK3C,GAAjC,GAAuC,GAAvC,GAA6C,KAAKV,KAAlD,GAA0D,GAApE,CAAN;AACH;AACD,YAAI,KAAKY,KAAL,CAAW0B,MAAX,EAAJ,EAAyB;AACrB,kBAAM,IAAIe,KAAJ,CAAU,qBAAqB,KAAK3C,GAA1B,GAAgC,GAAhC,GAAsC,KAAKV,KAA3C,GAAmD,UAA7D,CAAN;AACH;AACDiD,qBAAa,KAAKtC,IAAL,CAAUuC,MAAV,EAAb;AACA,YAAID,eAAe,KAAKrC,KAAL,CAAWsC,MAAX,EAAnB,EAAwC;AACpC,kBAAM,IAAIG,KAAJ,CAAU,qBAAV,CAAN;AACH,SAFD,MAGK;AACD,mBAAOJ,cAAc,KAAKX,MAAL,KAAgB,CAAhB,GAAoB,CAAlC,CAAP;AACH;AACJ,KAfD;AAgBAjB,aAASE,GAAT,GAAe,IAAf;AACAF,aAASiC,KAAT,GAAiB,KAAjB;AACA,WAAOjC,QAAP;AACH,CAhR6B,EAA9B;AAiRAtB,QAAQsB,QAAR,GAAmBA,QAAnB;;AAIA,IAAIkC,gBAA+B,YAAY;AAC3C,aAASA,aAAT,GAAyB,CACxB;;AAMDA,kBAAczC,SAAd,CAAwBY,IAAxB,GAA+B,UAAUhB,GAAV,EAAeV,KAAf,EAAsBsB,KAAtB,EAA6BX,IAA7B,EAAmCC,KAAnC,EAA0C;AACrE,eAAO,IAAP;AACH,KAFD;;AAWA2C,kBAAczC,SAAd,CAAwBoB,MAAxB,GAAiC,UAAUxB,GAAV,EAAeV,KAAf,EAAsBI,UAAtB,EAAkC;AAC/D,eAAO,IAAIiB,QAAJ,CAAaX,GAAb,EAAkBV,KAAlB,EAAyB,IAAzB,CAAP;AACH,KAFD;;AAUAuD,kBAAczC,SAAd,CAAwB0B,MAAxB,GAAiC,UAAU9B,GAAV,EAAeN,UAAf,EAA2B;AACxD,eAAO,IAAP;AACH,KAFD;;AAMAmD,kBAAczC,SAAd,CAAwBa,KAAxB,GAAgC,YAAY;AACxC,eAAO,CAAP;AACH,KAFD;;AAMA4B,kBAAczC,SAAd,CAAwBL,OAAxB,GAAkC,YAAY;AAC1C,eAAO,IAAP;AACH,KAFD;;AAWA8C,kBAAczC,SAAd,CAAwBc,gBAAxB,GAA2C,UAAUC,MAAV,EAAkB;AACzD,eAAO,KAAP;AACH,KAFD;;AAWA0B,kBAAczC,SAAd,CAAwBgB,gBAAxB,GAA2C,UAAUD,MAAV,EAAkB;AACzD,eAAO,KAAP;AACH,KAFD;;AAMA0B,kBAAczC,SAAd,CAAwBkB,MAAxB,GAAiC,YAAY;AACzC,eAAO,IAAP;AACH,KAFD;;AAMAuB,kBAAczC,SAAd,CAAwBmB,MAAxB,GAAiC,YAAY;AACzC,eAAO,IAAP;AACH,KAFD;;AAOAsB,kBAAczC,SAAd,CAAwBoC,MAAxB,GAAiC,YAAY;AACzC,eAAO,CAAP;AACH,KAFD;;AAOAK,kBAAczC,SAAd,CAAwBwB,MAAxB,GAAiC,YAAY;AACzC,eAAO,KAAP;AACH,KAFD;AAGA,WAAOiB,aAAP;AACH,CA7FkC,EAAnC;AA8FAxD,QAAQwD,aAAR,GAAwBA,aAAxB;;AAKA,IAAI/B,YAA2B,YAAY;AAMvC,aAASA,SAAT,CAAmBgC,WAAnB,EAAgCC,KAAhC,EAAuC;AACnC,YAAIA,UAAU,KAAK,CAAnB,EAAsB;AAAEA,oBAAQjC,UAAUC,UAAlB;AAA+B;AACvD,aAAK+B,WAAL,GAAmBA,WAAnB;AACA,aAAKC,KAAL,GAAaA,KAAb;AACH;;AASDjC,cAAUV,SAAV,CAAoBoB,MAApB,GAA6B,UAAUxB,GAAV,EAAeV,KAAf,EAAsB;AAC/C,eAAO,IAAIwB,SAAJ,CAAc,KAAKgC,WAAnB,EAAgC,KAAKC,KAAL,CAClCvB,MADkC,CAC3BxB,GAD2B,EACtBV,KADsB,EACf,KAAKwD,WADU,EAElC9B,IAFkC,CAE7B,IAF6B,EAEvB,IAFuB,EAEjBL,SAASiC,KAFQ,EAED,IAFC,EAEK,IAFL,CAAhC,CAAP;AAGH,KAJD;;AAWA9B,cAAUV,SAAV,CAAoB0B,MAApB,GAA6B,UAAU9B,GAAV,EAAe;AACxC,eAAO,IAAIc,SAAJ,CAAc,KAAKgC,WAAnB,EAAgC,KAAKC,KAAL,CAClCjB,MADkC,CAC3B9B,GAD2B,EACtB,KAAK8C,WADiB,EAElC9B,IAFkC,CAE7B,IAF6B,EAEvB,IAFuB,EAEjBL,SAASiC,KAFQ,EAED,IAFC,EAEK,IAFL,CAAhC,CAAP;AAGH,KAJD;;AAYA9B,cAAUV,SAAV,CAAoB4C,GAApB,GAA0B,UAAUhD,GAAV,EAAe;AACrC,YAAIF,GAAJ;AACA,YAAIN,OAAO,KAAKuD,KAAhB;AACA,eAAO,CAACvD,KAAKO,OAAL,EAAR,EAAwB;AACpBD,kBAAM,KAAKgD,WAAL,CAAiB9C,GAAjB,EAAsBR,KAAKQ,GAA3B,CAAN;AACA,gBAAIF,QAAQ,CAAZ,EAAe;AACX,uBAAON,KAAKF,KAAZ;AACH,aAFD,MAGK,IAAIQ,MAAM,CAAV,EAAa;AACdN,uBAAOA,KAAKS,IAAZ;AACH,aAFI,MAGA,IAAIH,MAAM,CAAV,EAAa;AACdN,uBAAOA,KAAKU,KAAZ;AACH;AACJ;AACD,eAAO,IAAP;AACH,KAhBD;;AAsBAY,cAAUV,SAAV,CAAoB6C,iBAApB,GAAwC,UAAUjD,GAAV,EAAe;AACnD,YAAIF,GAAJ;AAAA,YAASN,OAAO,KAAKuD,KAArB;AAAA,YAA4BG,cAAc,IAA1C;AACA,eAAO,CAAC1D,KAAKO,OAAL,EAAR,EAAwB;AACpBD,kBAAM,KAAKgD,WAAL,CAAiB9C,GAAjB,EAAsBR,KAAKQ,GAA3B,CAAN;AACA,gBAAIF,QAAQ,CAAZ,EAAe;AACX,oBAAI,CAACN,KAAKS,IAAL,CAAUF,OAAV,EAAL,EAA0B;AACtBP,2BAAOA,KAAKS,IAAZ;AACA,2BAAO,CAACT,KAAKU,KAAL,CAAWH,OAAX,EAAR;AACIP,+BAAOA,KAAKU,KAAZ;AADJ,qBAEA,OAAOV,KAAKQ,GAAZ;AACH,iBALD,MAMK,IAAIkD,WAAJ,EAAiB;AAClB,2BAAOA,YAAYlD,GAAnB;AACH,iBAFI,MAGA;AACD,2BAAO,IAAP;AACH;AACJ,aAbD,MAcK,IAAIF,MAAM,CAAV,EAAa;AACdN,uBAAOA,KAAKS,IAAZ;AACH,aAFI,MAGA,IAAIH,MAAM,CAAV,EAAa;AACdoD,8BAAc1D,IAAd;AACAA,uBAAOA,KAAKU,KAAZ;AACH;AACJ;AACD,cAAM,IAAIyC,KAAJ,CAAU,uEAAV,CAAN;AACH,KA3BD;;AA+BA7B,cAAUV,SAAV,CAAoBL,OAApB,GAA8B,YAAY;AACtC,eAAO,KAAKgD,KAAL,CAAWhD,OAAX,EAAP;AACH,KAFD;;AAMAe,cAAUV,SAAV,CAAoBa,KAApB,GAA4B,YAAY;AACpC,eAAO,KAAK8B,KAAL,CAAW9B,KAAX,EAAP;AACH,KAFD;;AAMAH,cAAUV,SAAV,CAAoBkB,MAApB,GAA6B,YAAY;AACrC,eAAO,KAAKyB,KAAL,CAAWzB,MAAX,EAAP;AACH,KAFD;;AAMAR,cAAUV,SAAV,CAAoBmB,MAApB,GAA6B,YAAY;AACrC,eAAO,KAAKwB,KAAL,CAAWxB,MAAX,EAAP;AACH,KAFD;;AAYAT,cAAUV,SAAV,CAAoBc,gBAApB,GAAuC,UAAUC,MAAV,EAAkB;AACrD,eAAO,KAAK4B,KAAL,CAAW7B,gBAAX,CAA4BC,MAA5B,CAAP;AACH,KAFD;;AAWAL,cAAUV,SAAV,CAAoBgB,gBAApB,GAAuC,UAAUD,MAAV,EAAkB;AACrD,eAAO,KAAK4B,KAAL,CAAW3B,gBAAX,CAA4BD,MAA5B,CAAP;AACH,KAFD;;AASAL,cAAUV,SAAV,CAAoB+C,WAApB,GAAkC,UAAUC,eAAV,EAA2B;AACzD,eAAO,IAAI7D,iBAAJ,CAAsB,KAAKwD,KAA3B,EAAkC,IAAlC,EAAwC,KAAKD,WAA7C,EAA0D,KAA1D,EAAiEM,eAAjE,CAAP;AACH,KAFD;AAGAtC,cAAUV,SAAV,CAAoBiD,eAApB,GAAsC,UAAUrD,GAAV,EAAeoD,eAAf,EAAgC;AAClE,eAAO,IAAI7D,iBAAJ,CAAsB,KAAKwD,KAA3B,EAAkC/C,GAAlC,EAAuC,KAAK8C,WAA5C,EAAyD,KAAzD,EAAgEM,eAAhE,CAAP;AACH,KAFD;AAGAtC,cAAUV,SAAV,CAAoBkD,sBAApB,GAA6C,UAAUtD,GAAV,EAAeoD,eAAf,EAAgC;AACzE,eAAO,IAAI7D,iBAAJ,CAAsB,KAAKwD,KAA3B,EAAkC/C,GAAlC,EAAuC,KAAK8C,WAA5C,EAAyD,IAAzD,EAA+DM,eAA/D,CAAP;AACH,KAFD;AAGAtC,cAAUV,SAAV,CAAoBmD,kBAApB,GAAyC,UAAUH,eAAV,EAA2B;AAChE,eAAO,IAAI7D,iBAAJ,CAAsB,KAAKwD,KAA3B,EAAkC,IAAlC,EAAwC,KAAKD,WAA7C,EAA0D,IAA1D,EAAgEM,eAAhE,CAAP;AACH,KAFD;;AAOAtC,cAAUC,UAAV,GAAuB,IAAI8B,aAAJ,EAAvB;AACA,WAAO/B,SAAP;AACH,CAnK8B,EAA/B;AAoKAzB,QAAQyB,SAAR,GAAoBA,SAApB","sourcesContent":["\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * An iterator over an LLRBNode.\n */\nvar SortedMapIterator = /** @class */ (function () {\n    /**\n     * @template K, V, T\n     * @param {LLRBNode|LLRBEmptyNode} node Node to iterate.\n     * @param {?K} startKey\n     * @param {function(K, K): number} comparator\n     * @param {boolean} isReverse_ Whether or not to iterate in reverse\n     * @param {(function(K, V):T)=} resultGenerator_\n     */\n    function SortedMapIterator(node, startKey, comparator, isReverse_, resultGenerator_) {\n        if (resultGenerator_ === void 0) { resultGenerator_ = null; }\n        this.isReverse_ = isReverse_;\n        this.resultGenerator_ = resultGenerator_;\n        /** @private\n         * @type {Array.<!LLRBNode>}\n         */\n        this.nodeStack_ = [];\n        var cmp = 1;\n        while (!node.isEmpty()) {\n            node = node;\n            cmp = startKey ? comparator(node.key, startKey) : 1;\n            // flip the comparison if we're going in reverse\n            if (isReverse_)\n                cmp *= -1;\n            if (cmp < 0) {\n                // This node is less than our start key. ignore it\n                if (this.isReverse_) {\n                    node = node.left;\n                }\n                else {\n                    node = node.right;\n                }\n            }\n            else if (cmp === 0) {\n                // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\n                this.nodeStack_.push(node);\n                break;\n            }\n            else {\n                // This node is greater than our start key, add it to the stack and move to the next one\n                this.nodeStack_.push(node);\n                if (this.isReverse_) {\n                    node = node.right;\n                }\n                else {\n                    node = node.left;\n                }\n            }\n        }\n    }\n    SortedMapIterator.prototype.getNext = function () {\n        if (this.nodeStack_.length === 0)\n            return null;\n        var node = this.nodeStack_.pop();\n        var result;\n        if (this.resultGenerator_)\n            result = this.resultGenerator_(node.key, node.value);\n        else\n            result = { key: node.key, value: node.value };\n        if (this.isReverse_) {\n            node = node.left;\n            while (!node.isEmpty()) {\n                this.nodeStack_.push(node);\n                node = node.right;\n            }\n        }\n        else {\n            node = node.right;\n            while (!node.isEmpty()) {\n                this.nodeStack_.push(node);\n                node = node.left;\n            }\n        }\n        return result;\n    };\n    SortedMapIterator.prototype.hasNext = function () {\n        return this.nodeStack_.length > 0;\n    };\n    SortedMapIterator.prototype.peek = function () {\n        if (this.nodeStack_.length === 0)\n            return null;\n        var node = this.nodeStack_[this.nodeStack_.length - 1];\n        if (this.resultGenerator_) {\n            return this.resultGenerator_(node.key, node.value);\n        }\n        else {\n            return { key: node.key, value: node.value };\n        }\n    };\n    return SortedMapIterator;\n}());\nexports.SortedMapIterator = SortedMapIterator;\n/**\n * Represents a node in a Left-leaning Red-Black tree.\n */\nvar LLRBNode = /** @class */ (function () {\n    /**\n     * @template K, V\n     * @param {!K} key Key associated with this node.\n     * @param {!V} value Value associated with this node.\n     * @param {?boolean} color Whether this node is red.\n     * @param {?(LLRBNode|LLRBEmptyNode)=} left Left child.\n     * @param {?(LLRBNode|LLRBEmptyNode)=} right Right child.\n     */\n    function LLRBNode(key, value, color, left, right) {\n        this.key = key;\n        this.value = value;\n        this.color = color != null ? color : LLRBNode.RED;\n        this.left =\n            left != null ? left : SortedMap.EMPTY_NODE;\n        this.right =\n            right != null ? right : SortedMap.EMPTY_NODE;\n    }\n    /**\n     * Returns a copy of the current node, optionally replacing pieces of it.\n     *\n     * @param {?K} key New key for the node, or null.\n     * @param {?V} value New value for the node, or null.\n     * @param {?boolean} color New color for the node, or null.\n     * @param {?LLRBNode|LLRBEmptyNode} left New left child for the node, or null.\n     * @param {?LLRBNode|LLRBEmptyNode} right New right child for the node, or null.\n     * @return {!LLRBNode} The node copy.\n     */\n    LLRBNode.prototype.copy = function (key, value, color, left, right) {\n        return new LLRBNode(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);\n    };\n    /**\n     * @return {number} The total number of nodes in the tree.\n     */\n    LLRBNode.prototype.count = function () {\n        return this.left.count() + 1 + this.right.count();\n    };\n    /**\n     * @return {boolean} True if the tree is empty.\n     */\n    LLRBNode.prototype.isEmpty = function () {\n        return false;\n    };\n    /**\n     * Traverses the tree in key order and calls the specified action function\n     * for each node.\n     *\n     * @param {function(!K, !V):*} action Callback function to be called for each\n     *   node.  If it returns true, traversal is aborted.\n     * @return {*} The first truthy value returned by action, or the last falsey\n     *   value returned by action\n     */\n    LLRBNode.prototype.inorderTraversal = function (action) {\n        return (this.left.inorderTraversal(action) ||\n            action(this.key, this.value) ||\n            this.right.inorderTraversal(action));\n    };\n    /**\n     * Traverses the tree in reverse key order and calls the specified action function\n     * for each node.\n     *\n     * @param {function(!Object, !Object)} action Callback function to be called for each\n     * node.  If it returns true, traversal is aborted.\n     * @return {*} True if traversal was aborted.\n     */\n    LLRBNode.prototype.reverseTraversal = function (action) {\n        return (this.right.reverseTraversal(action) ||\n            action(this.key, this.value) ||\n            this.left.reverseTraversal(action));\n    };\n    /**\n     * @return {!Object} The minimum node in the tree.\n     * @private\n     */\n    LLRBNode.prototype.min_ = function () {\n        if (this.left.isEmpty()) {\n            return this;\n        }\n        else {\n            return this.left.min_();\n        }\n    };\n    /**\n     * @return {!K} The maximum key in the tree.\n     */\n    LLRBNode.prototype.minKey = function () {\n        return this.min_().key;\n    };\n    /**\n     * @return {!K} The maximum key in the tree.\n     */\n    LLRBNode.prototype.maxKey = function () {\n        if (this.right.isEmpty()) {\n            return this.key;\n        }\n        else {\n            return this.right.maxKey();\n        }\n    };\n    /**\n     *\n     * @param {!Object} key Key to insert.\n     * @param {!Object} value Value to insert.\n     * @param {Comparator} comparator Comparator.\n     * @return {!LLRBNode} New tree, with the key/value added.\n     */\n    LLRBNode.prototype.insert = function (key, value, comparator) {\n        var cmp, n;\n        n = this;\n        cmp = comparator(key, n.key);\n        if (cmp < 0) {\n            n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\n        }\n        else if (cmp === 0) {\n            n = n.copy(null, value, null, null, null);\n        }\n        else {\n            n = n.copy(null, null, null, null, n.right.insert(key, value, comparator));\n        }\n        return n.fixUp_();\n    };\n    /**\n     * @private\n     * @return {!LLRBNode|LLRBEmptyNode} New tree, with the minimum key removed.\n     */\n    LLRBNode.prototype.removeMin_ = function () {\n        if (this.left.isEmpty()) {\n            return SortedMap.EMPTY_NODE;\n        }\n        var n = this;\n        if (!n.left.isRed_() && !n.left.left.isRed_())\n            n = n.moveRedLeft_();\n        n = n.copy(null, null, null, n.left.removeMin_(), null);\n        return n.fixUp_();\n    };\n    /**\n     * @param {!Object} key The key of the item to remove.\n     * @param {Comparator} comparator Comparator.\n     * @return {!LLRBNode|LLRBEmptyNode} New tree, with the specified item removed.\n     */\n    LLRBNode.prototype.remove = function (key, comparator) {\n        var n, smallest;\n        n = this;\n        if (comparator(key, n.key) < 0) {\n            if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\n                n = n.moveRedLeft_();\n            }\n            n = n.copy(null, null, null, n.left.remove(key, comparator), null);\n        }\n        else {\n            if (n.left.isRed_())\n                n = n.rotateRight_();\n            if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\n                n = n.moveRedRight_();\n            }\n            if (comparator(key, n.key) === 0) {\n                if (n.right.isEmpty()) {\n                    return SortedMap.EMPTY_NODE;\n                }\n                else {\n                    smallest = n.right.min_();\n                    n = n.copy(smallest.key, smallest.value, null, null, n.right.removeMin_());\n                }\n            }\n            n = n.copy(null, null, null, null, n.right.remove(key, comparator));\n        }\n        return n.fixUp_();\n    };\n    /**\n     * @private\n     * @return {boolean} Whether this is a RED node.\n     */\n    LLRBNode.prototype.isRed_ = function () {\n        return this.color;\n    };\n    /**\n     * @private\n     * @return {!LLRBNode} New tree after performing any needed rotations.\n     */\n    LLRBNode.prototype.fixUp_ = function () {\n        var n = this;\n        if (n.right.isRed_() && !n.left.isRed_())\n            n = n.rotateLeft_();\n        if (n.left.isRed_() && n.left.left.isRed_())\n            n = n.rotateRight_();\n        if (n.left.isRed_() && n.right.isRed_())\n            n = n.colorFlip_();\n        return n;\n    };\n    /**\n     * @private\n     * @return {!LLRBNode} New tree, after moveRedLeft.\n     */\n    LLRBNode.prototype.moveRedLeft_ = function () {\n        var n = this.colorFlip_();\n        if (n.right.left.isRed_()) {\n            n = n.copy(null, null, null, null, n.right.rotateRight_());\n            n = n.rotateLeft_();\n            n = n.colorFlip_();\n        }\n        return n;\n    };\n    /**\n     * @private\n     * @return {!LLRBNode} New tree, after moveRedRight.\n     */\n    LLRBNode.prototype.moveRedRight_ = function () {\n        var n = this.colorFlip_();\n        if (n.left.left.isRed_()) {\n            n = n.rotateRight_();\n            n = n.colorFlip_();\n        }\n        return n;\n    };\n    /**\n     * @private\n     * @return {!LLRBNode} New tree, after rotateLeft.\n     */\n    LLRBNode.prototype.rotateLeft_ = function () {\n        var nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\n        return this.right.copy(null, null, this.color, nl, null);\n    };\n    /**\n     * @private\n     * @return {!LLRBNode} New tree, after rotateRight.\n     */\n    LLRBNode.prototype.rotateRight_ = function () {\n        var nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\n        return this.left.copy(null, null, this.color, null, nr);\n    };\n    /**\n     * @private\n     * @return {!LLRBNode} New tree, after colorFlip.\n     */\n    LLRBNode.prototype.colorFlip_ = function () {\n        var left = this.left.copy(null, null, !this.left.color, null, null);\n        var right = this.right.copy(null, null, !this.right.color, null, null);\n        return this.copy(null, null, !this.color, left, right);\n    };\n    /**\n     * For testing.\n     *\n     * @private\n     * @return {boolean} True if all is well.\n     */\n    LLRBNode.prototype.checkMaxDepth_ = function () {\n        var blackDepth = this.check_();\n        return Math.pow(2.0, blackDepth) <= this.count() + 1;\n    };\n    /**\n     * @private\n     * @return {number} Not sure what this returns exactly. :-).\n     */\n    LLRBNode.prototype.check_ = function () {\n        var blackDepth;\n        if (this.isRed_() && this.left.isRed_()) {\n            throw new Error('Red node has red child(' + this.key + ',' + this.value + ')');\n        }\n        if (this.right.isRed_()) {\n            throw new Error('Right child of (' + this.key + ',' + this.value + ') is red');\n        }\n        blackDepth = this.left.check_();\n        if (blackDepth !== this.right.check_()) {\n            throw new Error('Black depths differ');\n        }\n        else {\n            return blackDepth + (this.isRed_() ? 0 : 1);\n        }\n    };\n    LLRBNode.RED = true;\n    LLRBNode.BLACK = false;\n    return LLRBNode;\n}());\nexports.LLRBNode = LLRBNode;\n/**\n * Represents an empty node (a leaf node in the Red-Black Tree).\n */\nvar LLRBEmptyNode = /** @class */ (function () {\n    function LLRBEmptyNode() {\n    }\n    /**\n     * Returns a copy of the current node.\n     *\n     * @return {!LLRBEmptyNode} The node copy.\n     */\n    LLRBEmptyNode.prototype.copy = function (key, value, color, left, right) {\n        return this;\n    };\n    /**\n     * Returns a copy of the tree, with the specified key/value added.\n     *\n     * @param {!K} key Key to be added.\n     * @param {!V} value Value to be added.\n     * @param {Comparator} comparator Comparator.\n     * @return {!LLRBNode} New tree, with item added.\n     */\n    LLRBEmptyNode.prototype.insert = function (key, value, comparator) {\n        return new LLRBNode(key, value, null);\n    };\n    /**\n     * Returns a copy of the tree, with the specified key removed.\n     *\n     * @param {!K} key The key to remove.\n     * @param {Comparator} comparator Comparator.\n     * @return {!LLRBEmptyNode} New tree, with item removed.\n     */\n    LLRBEmptyNode.prototype.remove = function (key, comparator) {\n        return this;\n    };\n    /**\n     * @return {number} The total number of nodes in the tree.\n     */\n    LLRBEmptyNode.prototype.count = function () {\n        return 0;\n    };\n    /**\n     * @return {boolean} True if the tree is empty.\n     */\n    LLRBEmptyNode.prototype.isEmpty = function () {\n        return true;\n    };\n    /**\n     * Traverses the tree in key order and calls the specified action function\n     * for each node.\n     *\n     * @param {function(!K, !V):*} action Callback function to be called for each\n     * node.  If it returns true, traversal is aborted.\n     * @return {boolean} True if traversal was aborted.\n     */\n    LLRBEmptyNode.prototype.inorderTraversal = function (action) {\n        return false;\n    };\n    /**\n     * Traverses the tree in reverse key order and calls the specified action function\n     * for each node.\n     *\n     * @param {function(!K, !V)} action Callback function to be called for each\n     * node.  If it returns true, traversal is aborted.\n     * @return {boolean} True if traversal was aborted.\n     */\n    LLRBEmptyNode.prototype.reverseTraversal = function (action) {\n        return false;\n    };\n    /**\n     * @return {null}\n     */\n    LLRBEmptyNode.prototype.minKey = function () {\n        return null;\n    };\n    /**\n     * @return {null}\n     */\n    LLRBEmptyNode.prototype.maxKey = function () {\n        return null;\n    };\n    /**\n     * @private\n     * @return {number} Not sure what this returns exactly. :-).\n     */\n    LLRBEmptyNode.prototype.check_ = function () {\n        return 0;\n    };\n    /**\n     * @private\n     * @return {boolean} Whether this node is red.\n     */\n    LLRBEmptyNode.prototype.isRed_ = function () {\n        return false;\n    };\n    return LLRBEmptyNode;\n}());\nexports.LLRBEmptyNode = LLRBEmptyNode;\n/**\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\n * tree.\n */\nvar SortedMap = /** @class */ (function () {\n    /**\n     * @template K, V\n     * @param {function(K, K):number} comparator_ Key comparator.\n     * @param {LLRBNode=} root_ (Optional) Root node for the map.\n     */\n    function SortedMap(comparator_, root_) {\n        if (root_ === void 0) { root_ = SortedMap.EMPTY_NODE; }\n        this.comparator_ = comparator_;\n        this.root_ = root_;\n    }\n    /**\n     * Returns a copy of the map, with the specified key/value added or replaced.\n     * (TODO: We should perhaps rename this method to 'put')\n     *\n     * @param {!K} key Key to be added.\n     * @param {!V} value Value to be added.\n     * @return {!SortedMap.<K, V>} New map, with item added.\n     */\n    SortedMap.prototype.insert = function (key, value) {\n        return new SortedMap(this.comparator_, this.root_\n            .insert(key, value, this.comparator_)\n            .copy(null, null, LLRBNode.BLACK, null, null));\n    };\n    /**\n     * Returns a copy of the map, with the specified key removed.\n     *\n     * @param {!K} key The key to remove.\n     * @return {!SortedMap.<K, V>} New map, with item removed.\n     */\n    SortedMap.prototype.remove = function (key) {\n        return new SortedMap(this.comparator_, this.root_\n            .remove(key, this.comparator_)\n            .copy(null, null, LLRBNode.BLACK, null, null));\n    };\n    /**\n     * Returns the value of the node with the given key, or null.\n     *\n     * @param {!K} key The key to look up.\n     * @return {?V} The value of the node with the given key, or null if the\n     * key doesn't exist.\n     */\n    SortedMap.prototype.get = function (key) {\n        var cmp;\n        var node = this.root_;\n        while (!node.isEmpty()) {\n            cmp = this.comparator_(key, node.key);\n            if (cmp === 0) {\n                return node.value;\n            }\n            else if (cmp < 0) {\n                node = node.left;\n            }\n            else if (cmp > 0) {\n                node = node.right;\n            }\n        }\n        return null;\n    };\n    /**\n     * Returns the key of the item *before* the specified key, or null if key is the first item.\n     * @param {K} key The key to find the predecessor of\n     * @return {?K} The predecessor key.\n     */\n    SortedMap.prototype.getPredecessorKey = function (key) {\n        var cmp, node = this.root_, rightParent = null;\n        while (!node.isEmpty()) {\n            cmp = this.comparator_(key, node.key);\n            if (cmp === 0) {\n                if (!node.left.isEmpty()) {\n                    node = node.left;\n                    while (!node.right.isEmpty())\n                        node = node.right;\n                    return node.key;\n                }\n                else if (rightParent) {\n                    return rightParent.key;\n                }\n                else {\n                    return null; // first item.\n                }\n            }\n            else if (cmp < 0) {\n                node = node.left;\n            }\n            else if (cmp > 0) {\n                rightParent = node;\n                node = node.right;\n            }\n        }\n        throw new Error('Attempted to find predecessor key for a nonexistent key.  What gives?');\n    };\n    /**\n     * @return {boolean} True if the map is empty.\n     */\n    SortedMap.prototype.isEmpty = function () {\n        return this.root_.isEmpty();\n    };\n    /**\n     * @return {number} The total number of nodes in the map.\n     */\n    SortedMap.prototype.count = function () {\n        return this.root_.count();\n    };\n    /**\n     * @return {?K} The minimum key in the map.\n     */\n    SortedMap.prototype.minKey = function () {\n        return this.root_.minKey();\n    };\n    /**\n     * @return {?K} The maximum key in the map.\n     */\n    SortedMap.prototype.maxKey = function () {\n        return this.root_.maxKey();\n    };\n    /**\n     * Traverses the map in key order and calls the specified action function\n     * for each key/value pair.\n     *\n     * @param {function(!K, !V):*} action Callback function to be called\n     * for each key/value pair.  If action returns true, traversal is aborted.\n     * @return {*} The first truthy value returned by action, or the last falsey\n     *   value returned by action\n     */\n    SortedMap.prototype.inorderTraversal = function (action) {\n        return this.root_.inorderTraversal(action);\n    };\n    /**\n     * Traverses the map in reverse key order and calls the specified action function\n     * for each key/value pair.\n     *\n     * @param {function(!Object, !Object)} action Callback function to be called\n     * for each key/value pair.  If action returns true, traversal is aborted.\n     * @return {*} True if the traversal was aborted.\n     */\n    SortedMap.prototype.reverseTraversal = function (action) {\n        return this.root_.reverseTraversal(action);\n    };\n    /**\n     * Returns an iterator over the SortedMap.\n     * @template T\n     * @param {(function(K, V):T)=} resultGenerator\n     * @return {SortedMapIterator.<K, V, T>} The iterator.\n     */\n    SortedMap.prototype.getIterator = function (resultGenerator) {\n        return new SortedMapIterator(this.root_, null, this.comparator_, false, resultGenerator);\n    };\n    SortedMap.prototype.getIteratorFrom = function (key, resultGenerator) {\n        return new SortedMapIterator(this.root_, key, this.comparator_, false, resultGenerator);\n    };\n    SortedMap.prototype.getReverseIteratorFrom = function (key, resultGenerator) {\n        return new SortedMapIterator(this.root_, key, this.comparator_, true, resultGenerator);\n    };\n    SortedMap.prototype.getReverseIterator = function (resultGenerator) {\n        return new SortedMapIterator(this.root_, null, this.comparator_, true, resultGenerator);\n    };\n    /**\n     * Always use the same empty node, to reduce memory.\n     * @const\n     */\n    SortedMap.EMPTY_NODE = new LLRBEmptyNode();\n    return SortedMap;\n}());\nexports.SortedMap = SortedMap;\n\n//# sourceMappingURL=SortedMap.js.map\n"]}]