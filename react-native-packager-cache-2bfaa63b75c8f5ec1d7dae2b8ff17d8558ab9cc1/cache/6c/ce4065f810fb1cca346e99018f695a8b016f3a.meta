["83fe63cd23db553e5e25e7a5e108906b1a13e149","b1527529c65d7121ca5d71a42f44146bf00b041c",["./Operation","./Overwrite","../util/Path","@firebase/util"],[104,146,183,221],{"version":3,"sources":["/home/giise/candidtwo/node_modules/@firebase/database/dist/cjs/src/core/operation/Merge.js"],"names":["Object","defineProperty","exports","value","Operation_1","require","Overwrite_1","Path_1","util_1","Merge","source","path","children","type","OperationType","MERGE","prototype","operationForChild","childName","isEmpty","childTree","subtree","Path","Overwrite","Empty","assert","getFront","popFront","toString"],"mappings":"AAAA;;AAgBAA,OAAOC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C,EAAEC,OAAO,IAAT,EAA7C;AACA,IAAIC,cAAcC,QAAQ,aAAR,CAAlB;AACA,IAAIC,cAAcD,QAAQ,aAAR,CAAlB;AACA,IAAIE,SAASF,QAAQ,cAAR,CAAb;AACA,IAAIG,SAASH,OAAT,kBAAJ;;AAQA,IAAII,QAAuB,YAAY;AACnC,aAASA,KAAT,CACsBC,MADtB,EAEsBC,IAFtB,EAGsBC,QAHtB,EAGgC;AAC5B,aAAKF,MAAL,GAAcA,MAAd;AACA,aAAKC,IAAL,GAAYA,IAAZ;AACA,aAAKC,QAAL,GAAgBA,QAAhB;;AAEA,aAAKC,IAAL,GAAYT,YAAYU,aAAZ,CAA0BC,KAAtC;AACH;;AAIDN,UAAMO,SAAN,CAAgBC,iBAAhB,GAAoC,UAAUC,SAAV,EAAqB;AACrD,YAAI,KAAKP,IAAL,CAAUQ,OAAV,EAAJ,EAAyB;AACrB,gBAAIC,YAAY,KAAKR,QAAL,CAAcS,OAAd,CAAsB,IAAId,OAAOe,IAAX,CAAgBJ,SAAhB,CAAtB,CAAhB;AACA,gBAAIE,UAAUD,OAAV,EAAJ,EAAyB;AAErB,uBAAO,IAAP;AACH,aAHD,MAIK,IAAIC,UAAUjB,KAAd,EAAqB;AAEtB,uBAAO,IAAIG,YAAYiB,SAAhB,CAA0B,KAAKb,MAA/B,EAAuCH,OAAOe,IAAP,CAAYE,KAAnD,EAA0DJ,UAAUjB,KAApE,CAAP;AACH,aAHI,MAIA;AAED,uBAAO,IAAIM,KAAJ,CAAU,KAAKC,MAAf,EAAuBH,OAAOe,IAAP,CAAYE,KAAnC,EAA0CJ,SAA1C,CAAP;AACH;AACJ,SAdD,MAeK;AACDZ,mBAAOiB,MAAP,CAAc,KAAKd,IAAL,CAAUe,QAAV,OAAyBR,SAAvC,EAAkD,gEAAlD;AACA,mBAAO,IAAIT,KAAJ,CAAU,KAAKC,MAAf,EAAuB,KAAKC,IAAL,CAAUgB,QAAV,EAAvB,EAA6C,KAAKf,QAAlD,CAAP;AACH;AACJ,KApBD;;AAwBAH,UAAMO,SAAN,CAAgBY,QAAhB,GAA2B,YAAY;AACnC,eAAQ,eACJ,KAAKjB,IADD,GAEJ,IAFI,GAGJ,KAAKD,MAAL,CAAYkB,QAAZ,EAHI,GAIJ,UAJI,GAKJ,KAAKhB,QAAL,CAAcgB,QAAd,EALI,GAMJ,GANJ;AAOH,KARD;AASA,WAAOnB,KAAP;AACH,CAhD0B,EAA3B;AAiDAP,QAAQO,KAAR,GAAgBA,KAAhB","sourcesContent":["\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Operation_1 = require(\"./Operation\");\nvar Overwrite_1 = require(\"./Overwrite\");\nvar Path_1 = require(\"../util/Path\");\nvar util_1 = require(\"@firebase/util\");\n/**\n * @param {!OperationSource} source\n * @param {!Path} path\n * @param {!ImmutableTree.<!Node>} children\n * @constructor\n * @implements {Operation}\n */\nvar Merge = /** @class */ (function () {\n    function Merge(\n        /**@inheritDoc */ source, \n        /**@inheritDoc */ path, \n        /**@inheritDoc */ children) {\n        this.source = source;\n        this.path = path;\n        this.children = children;\n        /** @inheritDoc */\n        this.type = Operation_1.OperationType.MERGE;\n    }\n    /**\n     * @inheritDoc\n     */\n    Merge.prototype.operationForChild = function (childName) {\n        if (this.path.isEmpty()) {\n            var childTree = this.children.subtree(new Path_1.Path(childName));\n            if (childTree.isEmpty()) {\n                // This child is unaffected\n                return null;\n            }\n            else if (childTree.value) {\n                // We have a snapshot for the child in question.  This becomes an overwrite of the child.\n                return new Overwrite_1.Overwrite(this.source, Path_1.Path.Empty, childTree.value);\n            }\n            else {\n                // This is a merge at a deeper level\n                return new Merge(this.source, Path_1.Path.Empty, childTree);\n            }\n        }\n        else {\n            util_1.assert(this.path.getFront() === childName, \"Can't get a merge for a child not on the path of the operation\");\n            return new Merge(this.source, this.path.popFront(), this.children);\n        }\n    };\n    /**\n     * @inheritDoc\n     */\n    Merge.prototype.toString = function () {\n        return ('Operation(' +\n            this.path +\n            ': ' +\n            this.source.toString() +\n            ' merge: ' +\n            this.children.toString() +\n            ')');\n    };\n    return Merge;\n}());\nexports.Merge = Merge;\n\n//# sourceMappingURL=Merge.js.map\n"]}]