["f4bc68f3854f9f23d8d4354195ad94d2ae1438a3","1ecb0dbe6a176df0932641dd73b0b0bbcb834743",["react","./PlatformHelpers","./NavigationActions","./addNavigationHelpers","./utils/invariant"],[132,233,289,433,575],{"version":3,"sources":["/home/giise/candidtwo/node_modules/react-navigation/src/createNavigationContainer.js"],"names":["createNavigationContainer","Component","NavigationContainer","props","subs","_handleOpenURL","url","parsedUrl","_urlToPathAndParams","path","params","action","router","getActionForPathAndParams","dispatch","inputAction","mapDeprecatedActionAndWarn","_isStateful","oldNav","state","nav","getStateForAction","setState","_onNavigationStateChange","_validateProps","init","navigation","screenProps","containerProps","keys","Object","length","Error","join","delimiter","uriPrefix","split","prevNav","onNavigationStateChange","process","env","REACT_NAV_LOGGING","console","group","log","groupEnd","newState","lastState","nextProps","addEventListener","back","getInitialURL","then","removeEventListener","remove","_navigation"],"mappings":"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","sourcesContent":["/* @flow */\n\nimport React from 'react';\nimport { BackHandler, Linking } from './PlatformHelpers';\nimport NavigationActions from './NavigationActions';\nimport addNavigationHelpers from './addNavigationHelpers';\nimport invariant from './utils/invariant';\n\nimport type {\n  NavigationAction,\n  NavigationState,\n  NavigationScreenProp,\n  NavigationNavigator,\n  PossiblyDeprecatedNavigationAction,\n  NavigationInitAction,\n} from './TypeDefinition';\n\ntype Props<O> = {\n  uriPrefix?: string | RegExp,\n  onNavigationStateChange?: (\n    NavigationState,\n    NavigationState,\n    NavigationAction\n  ) => void,\n  navigation?: NavigationScreenProp<NavigationState>,\n  screenProps?: *,\n  navigationOptions?: O,\n};\n\ntype State = {\n  nav: ?NavigationState,\n};\n\n/**\n * Create an HOC that injects the navigation and manages the navigation state\n * in case it's not passed from above.\n * This allows to use e.g. the StackNavigator and TabNavigator as root-level\n * components.\n */\nexport default function createNavigationContainer<A: *, O: *>(\n  Component: NavigationNavigator<NavigationState, A | NavigationInitAction, O>\n) {\n  class NavigationContainer extends React.Component<Props<O>, State> {\n    subs: ?{\n      remove: () => void,\n    } = null;\n\n    static router = Component.router;\n\n    constructor(props: Props<O>) {\n      super(props);\n\n      this._validateProps(props);\n\n      this.state = {\n        nav: this._isStateful()\n          ? Component.router.getStateForAction(NavigationActions.init())\n          : null,\n      };\n    }\n\n    _isStateful(): boolean {\n      return !this.props.navigation;\n    }\n\n    _validateProps(props: Props<O>) {\n      if (this._isStateful()) {\n        return;\n      }\n\n      const { navigation, screenProps, ...containerProps } = props;\n\n      const keys = Object.keys(containerProps);\n\n      if (keys.length !== 0) {\n        throw new Error(\n          'This navigator has both navigation and container props, so it is ' +\n            `unclear if it should own its own state. Remove props: \"${keys.join(\n              ', '\n            )}\" ` +\n            'if the navigator should get its state from the navigation prop. If the ' +\n            'navigator should maintain its own state, do not pass a navigation prop.'\n        );\n      }\n    }\n\n    _urlToPathAndParams(url: string) {\n      const params = {};\n      const delimiter = this.props.uriPrefix || '://';\n      let path = url.split(delimiter)[1];\n      if (typeof path === 'undefined') {\n        path = url;\n      }\n      return {\n        path,\n        params,\n      };\n    }\n\n    _handleOpenURL = ({ url }: { url: string }) => {\n      const parsedUrl = this._urlToPathAndParams(url);\n      if (parsedUrl) {\n        const { path, params } = parsedUrl;\n        const action = Component.router.getActionForPathAndParams(path, params);\n        if (action) {\n          this.dispatch(action);\n        }\n      }\n    };\n\n    _onNavigationStateChange(\n      prevNav: NavigationState,\n      nav: NavigationState,\n      action: NavigationAction\n    ) {\n      if (\n        typeof this.props.onNavigationStateChange === 'undefined' &&\n        this._isStateful() &&\n        !!process.env.REACT_NAV_LOGGING\n      ) {\n        /* eslint-disable no-console */\n        if (console.group) {\n          console.group('Navigation Dispatch: ');\n          console.log('Action: ', action);\n          console.log('New State: ', nav);\n          console.log('Last State: ', prevNav);\n          console.groupEnd();\n        } else {\n          console.log('Navigation Dispatch: ', {\n            action,\n            newState: nav,\n            lastState: prevNav,\n          });\n        }\n        /* eslint-enable no-console */\n        return;\n      }\n\n      if (typeof this.props.onNavigationStateChange === 'function') {\n        this.props.onNavigationStateChange(prevNav, nav, action);\n      }\n    }\n\n    componentWillReceiveProps(nextProps: *) {\n      this._validateProps(nextProps);\n    }\n\n    componentDidMount() {\n      if (!this._isStateful()) {\n        return;\n      }\n\n      this.subs = BackHandler.addEventListener('hardwareBackPress', () =>\n        this.dispatch(NavigationActions.back())\n      );\n\n      Linking.addEventListener('url', this._handleOpenURL);\n\n      Linking.getInitialURL().then(\n        (url: ?string) => url && this._handleOpenURL({ url })\n      );\n    }\n\n    componentWillUnmount() {\n      Linking.removeEventListener('url', this._handleOpenURL);\n      this.subs && this.subs.remove();\n    }\n\n    dispatch = (inputAction: PossiblyDeprecatedNavigationAction) => {\n      // $FlowFixMe remove after we deprecate the old actions\n      const action: A = NavigationActions.mapDeprecatedActionAndWarn(\n        inputAction\n      );\n      if (!this._isStateful()) {\n        return false;\n      }\n      const oldNav = this.state.nav;\n      invariant(oldNav, 'should be set in constructor if stateful');\n      const nav = Component.router.getStateForAction(action, oldNav);\n      if (nav && nav !== oldNav) {\n        this.setState({ nav }, () =>\n          this._onNavigationStateChange(oldNav, nav, action)\n        );\n        return true;\n      }\n      return false;\n    };\n\n    _navigation: ?NavigationScreenProp<NavigationState>;\n\n    render() {\n      let navigation = this.props.navigation;\n      if (this._isStateful()) {\n        const nav = this.state.nav;\n        invariant(nav, 'should be set in constructor if stateful');\n        if (!this._navigation || this._navigation.state !== nav) {\n          this._navigation = addNavigationHelpers({\n            dispatch: this.dispatch,\n            state: nav,\n          });\n        }\n        navigation = this._navigation;\n      }\n      invariant(navigation, 'failed to get navigation');\n      return <Component {...this.props} navigation={navigation} />;\n    }\n  }\n\n  return NavigationContainer;\n}\n"]}]