["819fd6e8024bc82269732bb88523d69fcc224e47","d6f09e043ca461284ca3ede4f5a43be1e6d15109",["./Index","../Node","../../util/util","@firebase/util"],[639,672,705,746],{"version":3,"sources":["/home/giise/candidtwo/node_modules/@firebase/database/dist/cjs/src/core/snap/indexes/KeyIndex.js"],"names":["__extends","extendStatics","Object","setPrototypeOf","__proto__","Array","d","b","p","hasOwnProperty","__","constructor","prototype","create","defineProperty","exports","value","Index_1","require","Node_1","util_1","util_2","__EMPTY_NODE","KeyIndex","_super","apply","arguments","get","set","val","enumerable","configurable","compare","a","nameCompare","name","isDefinedOn","node","assertionError","indexedValueChanged","oldNode","newNode","minPost","NamedNode","MIN","maxPost","MAX_NAME","makePost","indexValue","assert","toString","Index","KEY_INDEX"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Index_1 = require(\"./Index\");\nvar Node_1 = require(\"../Node\");\nvar util_1 = require(\"../../util/util\");\nvar util_2 = require(\"@firebase/util\");\nvar __EMPTY_NODE;\nvar KeyIndex = /** @class */ (function (_super) {\n    __extends(KeyIndex, _super);\n    function KeyIndex() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Object.defineProperty(KeyIndex, \"__EMPTY_NODE\", {\n        get: function () {\n            return __EMPTY_NODE;\n        },\n        set: function (val) {\n            __EMPTY_NODE = val;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @inheritDoc\n     */\n    KeyIndex.prototype.compare = function (a, b) {\n        return util_1.nameCompare(a.name, b.name);\n    };\n    /**\n     * @inheritDoc\n     */\n    KeyIndex.prototype.isDefinedOn = function (node) {\n        // We could probably return true here (since every node has a key), but it's never called\n        // so just leaving unimplemented for now.\n        throw util_2.assertionError('KeyIndex.isDefinedOn not expected to be called.');\n    };\n    /**\n     * @inheritDoc\n     */\n    KeyIndex.prototype.indexedValueChanged = function (oldNode, newNode) {\n        return false; // The key for a node never changes.\n    };\n    /**\n     * @inheritDoc\n     */\n    KeyIndex.prototype.minPost = function () {\n        return Node_1.NamedNode.MIN;\n    };\n    /**\n     * @inheritDoc\n     */\n    KeyIndex.prototype.maxPost = function () {\n        // TODO: This should really be created once and cached in a static property, but\n        // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\n        return new Node_1.NamedNode(util_1.MAX_NAME, __EMPTY_NODE);\n    };\n    /**\n     * @param {*} indexValue\n     * @param {string} name\n     * @return {!NamedNode}\n     */\n    KeyIndex.prototype.makePost = function (indexValue, name) {\n        util_2.assert(typeof indexValue === 'string', 'KeyIndex indexValue must always be a string.');\n        // We just use empty node, but it'll never be compared, since our comparator only looks at name.\n        return new Node_1.NamedNode(indexValue, __EMPTY_NODE);\n    };\n    /**\n     * @return {!string} String representation for inclusion in a query spec\n     */\n    KeyIndex.prototype.toString = function () {\n        return '.key';\n    };\n    return KeyIndex;\n}(Index_1.Index));\nexports.KeyIndex = KeyIndex;\nexports.KEY_INDEX = new KeyIndex();\n\n//# sourceMappingURL=KeyIndex.js.map\n"]}]