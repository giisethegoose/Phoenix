["1a22be7a1b01bd4abb8a802cf8a973d44ea463cc","6a517f2981d84cb3e9069911689eeb6cebe6652b",["../Node","../../util/util"],[99,132],{"version":3,"sources":["/home/giise/candidtwo/node_modules/@firebase/database/dist/cjs/src/core/snap/indexes/Index.js"],"names":["Object","defineProperty","exports","value","Node_1","require","util_1","Index","prototype","getCompare","compare","bind","indexedValueChanged","oldNode","newNode","oldWrapped","NamedNode","MIN_NAME","newWrapped","minPost","MIN"],"mappings":"AAAA;;AAgBAA,OAAOC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C,EAAEC,OAAO,IAAT,EAA7C;AACA,IAAIC,SAASC,QAAQ,SAAR,CAAb;AACA,IAAIC,SAASD,QAAQ,iBAAR,CAAb;;AAKA,IAAIE,QAAuB,YAAY;AACnC,WAASA,KAAT,GAAiB,CAChB;;AAKDA,QAAMC,SAAN,CAAgBC,UAAhB,GAA6B,YAAY;AACrC,WAAO,KAAKC,OAAL,CAAaC,IAAb,CAAkB,IAAlB,CAAP;AACH,GAFD;;AAWAJ,QAAMC,SAAN,CAAgBI,mBAAhB,GAAsC,UAAUC,OAAV,EAAmBC,OAAnB,EAA4B;AAC9D,QAAIC,aAAa,IAAIX,OAAOY,SAAX,CAAqBV,OAAOW,QAA5B,EAAsCJ,OAAtC,CAAjB;AACA,QAAIK,aAAa,IAAId,OAAOY,SAAX,CAAqBV,OAAOW,QAA5B,EAAsCH,OAAtC,CAAjB;AACA,WAAO,KAAKJ,OAAL,CAAaK,UAAb,EAAyBG,UAAzB,MAAyC,CAAhD;AACH,GAJD;;AASAX,QAAMC,SAAN,CAAgBW,OAAhB,GAA0B,YAAY;AAClC,WAAOf,OAAOY,SAAP,CAAiBI,GAAxB;AACH,GAFD;AAGA,SAAOb,KAAP;AACH,CA/B0B,EAA3B;AAgCAL,QAAQK,KAAR,GAAgBA,KAAhB","sourcesContent":["\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Node_1 = require(\"../Node\");\nvar util_1 = require(\"../../util/util\");\n/**\n *\n * @constructor\n */\nvar Index = /** @class */ (function () {\n    function Index() {\n    }\n    /**\n     * @return {function(!NamedNode, !NamedNode):number} A standalone comparison function for\n     * this index\n     */\n    Index.prototype.getCompare = function () {\n        return this.compare.bind(this);\n    };\n    /**\n     * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\n     * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\n     *\n     * @param {!Node} oldNode\n     * @param {!Node} newNode\n     * @return {boolean} True if the portion of the snapshot being indexed changed between oldNode and newNode\n     */\n    Index.prototype.indexedValueChanged = function (oldNode, newNode) {\n        var oldWrapped = new Node_1.NamedNode(util_1.MIN_NAME, oldNode);\n        var newWrapped = new Node_1.NamedNode(util_1.MIN_NAME, newNode);\n        return this.compare(oldWrapped, newWrapped) !== 0;\n    };\n    /**\n     * @return {!NamedNode} a node wrapper that will sort equal to or less than\n     * any other node wrapper, using this index\n     */\n    Index.prototype.minPost = function () {\n        return Node_1.NamedNode.MIN;\n    };\n    return Index;\n}());\nexports.Index = Index;\n\n//# sourceMappingURL=Index.js.map\n"]}]