["0951bd3b1035e24f13fb7d0d2c8aea80b791ed75","2faf84584ae1f7eef1b2d92f81063ad1b0ac7212",["react","./../../../../react-transform-hmr/lib/index.js","prop-types","React","StyleSheet","View","ViewPropTypes","requireNativeComponent"],[22,102,2746,2781,2816,2850,2887,2942],{"version":3,"sources":["/home/giise/candidtwo/node_modules/react-native/Libraries/Components/MaskedView/MaskedViewIOS.ios.js"],"names":["PropTypes","require","React","StyleSheet","View","ViewPropTypes","requireNativeComponent","_hasWarnedInvalidRenderMask","props","maskElement","children","otherViewProps","isValidElement","console","warn","absoluteFill","Component","propTypes","element","isRequired","RCTMaskedView","name","displayName","module","exports","MaskedViewIOS"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAYA,IAAMA,YAAYC,OAAZ,cAAN;AACA,IAAMC,QAAQD,OAAR,SAAN;AACA,IAAME,aAAaF,OAAb,cAAN;AACA,IAAMG,OAAOH,OAAP,QAAN;AACA,IAAMI,gBAAgBJ,OAAhB,iBAAN;AACA,IAAMK,yBAAyBL,OAAzB,0BAAN;;;;;;;;;;;;;;;;oMAyDEM,2B,GAA8B,K;;;;;6BAErB;AAAA,mBAC8C,KAAKC,KADnD;AAAA,UACCC,WADD,UACCA,WADD;AAAA,UACcC,QADd,UACcA,QADd;AAAA,UAC2BC,cAD3B;;AAGP,UAAI,CAACT,MAAMU,cAAN,CAAqBH,WAArB,CAAL,EAAwC;AACtC,YAAI,CAAC,KAAKF,2BAAV,EAAuC;AACrCM,kBAAQC,IAAR,CACE,sEACE,gDAFJ;AAIA,eAAKP,2BAAL,GAAmC,IAAnC;AACD;AACD,eAAO;AAAC,cAAD;AAAUI,wBAAV;AAA2BD;AAA3B,SAAP;AACD;;AAED,aACE;AAAC,qBAAD;AAAmBC,sBAAnB;AACE;AAAC,cAAD;AAAA,YAAM,eAAc,MAApB,EAA2B,OAAOR,WAAWY,YAA7C;AACGN;AADH,SADF;AAIGC;AAJH,OADF;AAQD;;;;EAhCyBR,MAAMc,S,UAGzBC,S,gBACFZ,a;AACHI,eAAaT,UAAUkB,OAAV,CAAkBC;;;AA8BnC,IAAMC,gBAAgBd,uBAAuB,eAAvB,EAAwC;AAC5De,QAAM,eADsD;AAE5DC,eAAa,eAF+C;AAG5DL,0BACKZ,aADL;AAH4D,CAAxC,CAAtB;;AAQAkB,OAAOC,OAAP,GAAiBC,aAAjB","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule MaskedViewIOS\n * @flow\n */\n\nconst PropTypes = require('prop-types');\nconst React = require('React');\nconst StyleSheet = require('StyleSheet');\nconst View = require('View');\nconst ViewPropTypes = require('ViewPropTypes');\nconst requireNativeComponent = require('requireNativeComponent');\n\nimport type { ViewProps } from 'ViewPropTypes';\n\ntype Props = ViewProps & {\n  children: any,\n  /**\n   * Should be a React element to be rendered and applied as the\n   * mask for the child element.\n   */\n  maskElement: React.Element<*>,\n};\n\n/**\n * Renders the child view with a mask specified in the `maskElement` prop.\n *\n * ```\n * import React from 'react';\n * import { MaskedView, Text, View } from 'react-native';\n *\n * class MyMaskedView extends React.Component {\n *   render() {\n *     return (\n *       <MaskedView\n *         style={{ flex: 1 }}\n *         maskElement={\n *           <View style={styles.maskContainerStyle}>\n *             <Text style={styles.maskTextStyle}>\n *               Basic Mask\n *             </Text>\n *           </View>\n *         }\n *       >\n *         <View style={{ flex: 1, backgroundColor: 'blue' }} />\n *       </MaskedView>\n *     );\n *   }\n * }\n * ```\n *\n * The above example will render a view with a blue background that fills its\n * parent, and then mask that view with text that says \"Basic Mask\".\n *\n * The alpha channel of the view rendered by the `maskElement` prop determines how\n * much of the view's content and background shows through. Fully or partially\n * opaque pixels allow the underlying content to show through but fully\n * transparent pixels block that content.\n *\n */\nclass MaskedViewIOS extends React.Component {\n  props: Props;\n\n  static propTypes = {\n    ...ViewPropTypes,\n    maskElement: PropTypes.element.isRequired,\n  };\n\n  _hasWarnedInvalidRenderMask = false;\n\n  render() {\n    const { maskElement, children, ...otherViewProps } = this.props;\n\n    if (!React.isValidElement(maskElement)) {\n      if (!this._hasWarnedInvalidRenderMask) {\n        console.warn(\n          'MaskedView: Invalid `maskElement` prop was passed to MaskedView. ' +\n            'Expected a React Element. No mask will render.'\n        );\n        this._hasWarnedInvalidRenderMask = true;\n      }\n      return <View {...otherViewProps}>{children}</View>;\n    }\n\n    return (\n      <RCTMaskedView {...otherViewProps}>\n        <View pointerEvents=\"none\" style={StyleSheet.absoluteFill}>\n          {maskElement}\n        </View>\n        {children}\n      </RCTMaskedView>\n    );\n  }\n}\n\nconst RCTMaskedView = requireNativeComponent('RCTMaskedView', {\n  name: 'RCTMaskedView',\n  displayName: 'RCTMaskedView',\n  propTypes: {\n    ...ViewPropTypes,\n  },\n});\n\nmodule.exports = MaskedViewIOS;\n"]}]