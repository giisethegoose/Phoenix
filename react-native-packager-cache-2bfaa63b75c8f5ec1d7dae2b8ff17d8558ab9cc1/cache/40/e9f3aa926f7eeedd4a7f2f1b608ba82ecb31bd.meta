["3164675e8cf3a8104c179ea8f6ade765c27f7943","be056a00b063dbc3a7e852e4a928a3e25385371f",["react","./../../../../react-transform-hmr/lib/index.js","react-native","./PointerEventsContainer"],[88,167,859,915],{"version":3,"sources":["/home/giise/candidtwo/node_modules/react-navigation/src/views/CardStack/Card.js"],"names":["React","props","children","pointerEvents","style","onComponentRef","styles","main","Component","create","backgroundColor","bottom","left","position","right","shadowColor","shadowOffset","width","height","shadowOpacity","shadowRadius","top","Card"],"mappings":";;;;;;IAEYA,K;;;;;;;;AAEZ;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;YAJYA,K;;;;;;;;;;;;;;;;;;;;6BAoBD;AAAA,mBACoC,KAAKC,KADzC;AAAA,UACCC,QADD,UACCA,QADD;AAAA,UACWC,aADX,UACWA,aADX;AAAA,UAC0BC,KAD1B,UAC0BA,KAD1B;;AAEP,aACE;AAAA,8BAAU,IAAV;AAAA;AACE,yBAAeD,aADjB;AAEE,eAAK,KAAKF,KAAL,CAAWI,cAFlB;AAGE,iBAAO,CAACC,OAAOC,IAAR,EAAcH,KAAd;AAHT;AAKGF;AALH,OADF;AASD;;;;EAZgBF,MAAMQ,S;;AAezB,IAAMF,SAAS,wBAAWG,MAAX,CAAkB;AAC/BF,QAAM;AACJG,qBAAiB,SADb;AAEJC,YAAQ,CAFJ;AAGJC,UAAM,CAHF;AAIJC,cAAU,UAJN;AAKJC,WAAO,CALH;AAMJC,iBAAa,OANT;AAOJC,kBAAc,EAAEC,OAAO,CAAT,EAAYC,QAAQ,CAApB,EAPV;AAQJC,mBAAe,GARX;AASJC,kBAAc,CATV;AAUJC,SAAK;AAVD;AADyB,CAAlB,CAAf;;AAeAC,OAAO,sCAA6BA,IAA7B,CAAP;;kBAEeA,I","sourcesContent":["/* @flow */\n\nimport * as React from 'react';\n\nimport { Animated, StyleSheet } from 'react-native';\n\nimport createPointerEventsContainer from './PointerEventsContainer';\n\nimport type { NavigationSceneRendererProps } from '../../TypeDefinition';\n\ntype Props = {\n  ...$Exact<NavigationSceneRendererProps>,\n  children: React.ChildrenArray<*>,\n  onComponentRef: React.Ref<typeof Animated.View>,\n  pointerEvents: string,\n  style: any,\n};\n\n/**\n * Component that renders the scene as card for the <NavigationCardStack />.\n */\nclass Card extends React.Component<Props> {\n  render() {\n    const { children, pointerEvents, style } = this.props;\n    return (\n      <Animated.View\n        pointerEvents={pointerEvents}\n        ref={this.props.onComponentRef}\n        style={[styles.main, style]}\n      >\n        {children}\n      </Animated.View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  main: {\n    backgroundColor: '#E9E9EF',\n    bottom: 0,\n    left: 0,\n    position: 'absolute',\n    right: 0,\n    shadowColor: 'black',\n    shadowOffset: { width: 0, height: 0 },\n    shadowOpacity: 0.2,\n    shadowRadius: 5,\n    top: 0,\n  },\n});\n\nCard = createPointerEventsContainer(Card);\n\nexport default Card;\n"]}]