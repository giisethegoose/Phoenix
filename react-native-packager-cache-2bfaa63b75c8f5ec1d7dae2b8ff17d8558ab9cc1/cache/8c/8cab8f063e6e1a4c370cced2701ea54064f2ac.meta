["e28013e2429916a8bdf130f9991f04749165a9b2","86012948595ec7f8bab68982716fe4f07705f39a",["@firebase/util","../util/util","./snap"],[99,139,177],{"version":3,"sources":["/home/giise/candidtwo/node_modules/@firebase/database/dist/cjs/src/core/snap/LeafNode.js"],"names":["Object","defineProperty","exports","value","util_1","require","util_2","snap_1","__childrenNodeConstructor","LeafNode","value_","priorityNode_","EMPTY_NODE","lazyHash_","assert","undefined","validatePriorityNode","get","set","val","enumerable","configurable","prototype","isLeafNode","getPriority","updatePriority","newPriorityNode","getImmediateChild","childName","getChild","path","isEmpty","getFront","hasChild","getPredecessorChildName","childNode","updateImmediateChild","newChildNode","updateChild","front","getLength","popFront","numChildren","forEachChild","index","action","exportFormat","getValue","hash","toHash","priorityHashText","type","doubleToIEEE754String","sha1","compareTo","other","compareToLeafNode_","otherLeaf","otherLeafType","thisLeafType","otherIndex","VALUE_TYPE_ORDER","indexOf","thisIndex","withIndex","isIndexed","equals"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util_1 = require(\"@firebase/util\");\nvar util_2 = require(\"../util/util\");\nvar snap_1 = require(\"./snap\");\nvar __childrenNodeConstructor;\n/**\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\n * implements Node and stores the value of the node (a string,\n * number, or boolean) accessible via getValue().\n */\nvar LeafNode = /** @class */ (function () {\n    /**\n     * @implements {Node}\n     * @param {!(string|number|boolean|Object)} value_ The value to store in this leaf node.\n     *                                         The object type is possible in the event of a deferred value\n     * @param {!Node=} priorityNode_ The priority of this node.\n     */\n    function LeafNode(value_, priorityNode_) {\n        if (priorityNode_ === void 0) { priorityNode_ = LeafNode.__childrenNodeConstructor.EMPTY_NODE; }\n        this.value_ = value_;\n        this.priorityNode_ = priorityNode_;\n        this.lazyHash_ = null;\n        util_1.assert(this.value_ !== undefined && this.value_ !== null, \"LeafNode shouldn't be created with null/undefined value.\");\n        snap_1.validatePriorityNode(this.priorityNode_);\n    }\n    Object.defineProperty(LeafNode, \"__childrenNodeConstructor\", {\n        get: function () {\n            return __childrenNodeConstructor;\n        },\n        set: function (val) {\n            __childrenNodeConstructor = val;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** @inheritDoc */\n    LeafNode.prototype.isLeafNode = function () {\n        return true;\n    };\n    /** @inheritDoc */\n    LeafNode.prototype.getPriority = function () {\n        return this.priorityNode_;\n    };\n    /** @inheritDoc */\n    LeafNode.prototype.updatePriority = function (newPriorityNode) {\n        return new LeafNode(this.value_, newPriorityNode);\n    };\n    /** @inheritDoc */\n    LeafNode.prototype.getImmediateChild = function (childName) {\n        // Hack to treat priority as a regular child\n        if (childName === '.priority') {\n            return this.priorityNode_;\n        }\n        else {\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n        }\n    };\n    /** @inheritDoc */\n    LeafNode.prototype.getChild = function (path) {\n        if (path.isEmpty()) {\n            return this;\n        }\n        else if (path.getFront() === '.priority') {\n            return this.priorityNode_;\n        }\n        else {\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n        }\n    };\n    /**\n     * @inheritDoc\n     */\n    LeafNode.prototype.hasChild = function () {\n        return false;\n    };\n    /** @inheritDoc */\n    LeafNode.prototype.getPredecessorChildName = function (childName, childNode) {\n        return null;\n    };\n    /** @inheritDoc */\n    LeafNode.prototype.updateImmediateChild = function (childName, newChildNode) {\n        if (childName === '.priority') {\n            return this.updatePriority(newChildNode);\n        }\n        else if (newChildNode.isEmpty() && childName !== '.priority') {\n            return this;\n        }\n        else {\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE\n                .updateImmediateChild(childName, newChildNode)\n                .updatePriority(this.priorityNode_);\n        }\n    };\n    /** @inheritDoc */\n    LeafNode.prototype.updateChild = function (path, newChildNode) {\n        var front = path.getFront();\n        if (front === null) {\n            return newChildNode;\n        }\n        else if (newChildNode.isEmpty() && front !== '.priority') {\n            return this;\n        }\n        else {\n            util_1.assert(front !== '.priority' || path.getLength() === 1, '.priority must be the last token in a path');\n            return this.updateImmediateChild(front, LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(path.popFront(), newChildNode));\n        }\n    };\n    /** @inheritDoc */\n    LeafNode.prototype.isEmpty = function () {\n        return false;\n    };\n    /** @inheritDoc */\n    LeafNode.prototype.numChildren = function () {\n        return 0;\n    };\n    /** @inheritDoc */\n    LeafNode.prototype.forEachChild = function (index, action) {\n        return false;\n    };\n    /**\n     * @inheritDoc\n     */\n    LeafNode.prototype.val = function (exportFormat) {\n        if (exportFormat && !this.getPriority().isEmpty())\n            return {\n                '.value': this.getValue(),\n                '.priority': this.getPriority().val()\n            };\n        else\n            return this.getValue();\n    };\n    /** @inheritDoc */\n    LeafNode.prototype.hash = function () {\n        if (this.lazyHash_ === null) {\n            var toHash = '';\n            if (!this.priorityNode_.isEmpty())\n                toHash +=\n                    'priority:' +\n                        snap_1.priorityHashText(this.priorityNode_.val()) +\n                        ':';\n            var type = typeof this.value_;\n            toHash += type + ':';\n            if (type === 'number') {\n                toHash += util_2.doubleToIEEE754String(this.value_);\n            }\n            else {\n                toHash += this.value_;\n            }\n            this.lazyHash_ = util_2.sha1(toHash);\n        }\n        return this.lazyHash_;\n    };\n    /**\n     * Returns the value of the leaf node.\n     * @return {Object|string|number|boolean} The value of the node.\n     */\n    LeafNode.prototype.getValue = function () {\n        return this.value_;\n    };\n    /**\n     * @inheritDoc\n     */\n    LeafNode.prototype.compareTo = function (other) {\n        if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\n            return 1;\n        }\n        else if (other instanceof LeafNode.__childrenNodeConstructor) {\n            return -1;\n        }\n        else {\n            util_1.assert(other.isLeafNode(), 'Unknown node type');\n            return this.compareToLeafNode_(other);\n        }\n    };\n    /**\n     * Comparison specifically for two leaf nodes\n     * @param {!LeafNode} otherLeaf\n     * @return {!number}\n     * @private\n     */\n    LeafNode.prototype.compareToLeafNode_ = function (otherLeaf) {\n        var otherLeafType = typeof otherLeaf.value_;\n        var thisLeafType = typeof this.value_;\n        var otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\n        var thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\n        util_1.assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\n        util_1.assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\n        if (otherIndex === thisIndex) {\n            // Same type, compare values\n            if (thisLeafType === 'object') {\n                // Deferred value nodes are all equal, but we should also never get to this point...\n                return 0;\n            }\n            else {\n                // Note that this works because true > false, all others are number or string comparisons\n                if (this.value_ < otherLeaf.value_) {\n                    return -1;\n                }\n                else if (this.value_ === otherLeaf.value_) {\n                    return 0;\n                }\n                else {\n                    return 1;\n                }\n            }\n        }\n        else {\n            return thisIndex - otherIndex;\n        }\n    };\n    /**\n     * @inheritDoc\n     */\n    LeafNode.prototype.withIndex = function () {\n        return this;\n    };\n    /**\n     * @inheritDoc\n     */\n    LeafNode.prototype.isIndexed = function () {\n        return true;\n    };\n    /**\n     * @inheritDoc\n     */\n    LeafNode.prototype.equals = function (other) {\n        /**\n         * @inheritDoc\n         */\n        if (other === this) {\n            return true;\n        }\n        else if (other.isLeafNode()) {\n            var otherLeaf = other;\n            return (this.value_ === otherLeaf.value_ &&\n                this.priorityNode_.equals(otherLeaf.priorityNode_));\n        }\n        else {\n            return false;\n        }\n    };\n    /**\n     * The sort order for comparing leaf nodes of different types. If two leaf nodes have\n     * the same type, the comparison falls back to their value\n     * @type {Array.<!string>}\n     * @const\n     */\n    LeafNode.VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\n    return LeafNode;\n}());\nexports.LeafNode = LeafNode;\n\n//# sourceMappingURL=LeafNode.js.map\n"]}]