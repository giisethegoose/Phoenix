["51c0f6742ce8dd5f2f59d8951ee0f713455eb68c","96d8a3bf31914b17da14ed9523b5e699ccebf7f4",["@firebase/util","../util/util","./StatsListener"],[99,139,186],{"version":3,"sources":["/home/giise/candidtwo/node_modules/@firebase/database/dist/cjs/src/core/stats/StatsReporter.js"],"names":["Object","defineProperty","exports","value","util_1","require","util_2","StatsListener_1","FIRST_STATS_MIN_TIME","FIRST_STATS_MAX_TIME","REPORT_STATS_INTERVAL","StatsReporter","collection","server_","statsToReport_","statsListener_","StatsListener","timeout","Math","random","setTimeoutNonBlocking","reportStats_","bind","floor","prototype","includeStat","stat","_this","stats","get","reportedStats","haveStatsToReport","forEach","contains","reportStats"],"mappings":"AAAA;;AAgBAA,OAAOC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C,EAAEC,OAAO,IAAT,EAA7C;AACA,IAAIC,SAASC,OAAT,kBAAJ;AACA,IAAIC,SAASD,QAAQ,cAAR,CAAb;AACA,IAAIE,kBAAkBF,QAAQ,iBAAR,CAAtB;;AAIA,IAAIG,uBAAuB,KAAK,IAAhC;AACA,IAAIC,uBAAuB,KAAK,IAAhC;;AAEA,IAAIC,wBAAwB,IAAI,EAAJ,GAAS,IAArC;;AAIA,IAAIC,gBAA+B,YAAY;AAK3C,aAASA,aAAT,CAAuBC,UAAvB,EAAmCC,OAAnC,EAA4C;AACxC,aAAKA,OAAL,GAAeA,OAAf;AACA,aAAKC,cAAL,GAAsB,EAAtB;AACA,aAAKC,cAAL,GAAsB,IAAIR,gBAAgBS,aAApB,CAAkCJ,UAAlC,CAAtB;AACA,YAAIK,UAAUT,uBACV,CAACC,uBAAuBD,oBAAxB,IAAgDU,KAAKC,MAAL,EADpD;AAEAb,eAAOc,qBAAP,CAA6B,KAAKC,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAA7B,EAA2DJ,KAAKK,KAAL,CAAWN,OAAX,CAA3D;AACH;AACDN,kBAAca,SAAd,CAAwBC,WAAxB,GAAsC,UAAUC,IAAV,EAAgB;AAClD,aAAKZ,cAAL,CAAoBY,IAApB,IAA4B,IAA5B;AACH,KAFD;AAGAf,kBAAca,SAAd,CAAwBH,YAAxB,GAAuC,YAAY;AAC/C,YAAIM,QAAQ,IAAZ;AACA,YAAIC,QAAQ,KAAKb,cAAL,CAAoBc,GAApB,EAAZ;AACA,YAAIC,gBAAgB,EAApB;AACA,YAAIC,oBAAoB,KAAxB;AACA3B,eAAO4B,OAAP,CAAeJ,KAAf,EAAsB,UAAUF,IAAV,EAAgBvB,KAAhB,EAAuB;AACzC,gBAAIA,QAAQ,CAAR,IAAaC,OAAO6B,QAAP,CAAgBN,MAAMb,cAAtB,EAAsCY,IAAtC,CAAjB,EAA8D;AAC1DI,8BAAcJ,IAAd,IAAsBvB,KAAtB;AACA4B,oCAAoB,IAApB;AACH;AACJ,SALD;AAMA,YAAIA,iBAAJ,EAAuB;AACnB,iBAAKlB,OAAL,CAAaqB,WAAb,CAAyBJ,aAAzB;AACH;;AAEDxB,eAAOc,qBAAP,CAA6B,KAAKC,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAA7B,EAA2DJ,KAAKK,KAAL,CAAWL,KAAKC,MAAL,KAAgB,CAAhB,GAAoBT,qBAA/B,CAA3D;AACH,KAhBD;AAiBA,WAAOC,aAAP;AACH,CAlCkC,EAAnC;AAmCAT,QAAQS,aAAR,GAAwBA,aAAxB","sourcesContent":["\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util_1 = require(\"@firebase/util\");\nvar util_2 = require(\"../util/util\");\nvar StatsListener_1 = require(\"./StatsListener\");\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\n// seconds to try to ensure the Firebase connection is established / settled.\nvar FIRST_STATS_MIN_TIME = 10 * 1000;\nvar FIRST_STATS_MAX_TIME = 30 * 1000;\n// We'll continue to report stats on average every 5 minutes.\nvar REPORT_STATS_INTERVAL = 5 * 60 * 1000;\n/**\n * @constructor\n */\nvar StatsReporter = /** @class */ (function () {\n    /**\n     * @param collection\n     * @param server_\n     */\n    function StatsReporter(collection, server_) {\n        this.server_ = server_;\n        this.statsToReport_ = {};\n        this.statsListener_ = new StatsListener_1.StatsListener(collection);\n        var timeout = FIRST_STATS_MIN_TIME +\n            (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\n        util_2.setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\n    }\n    StatsReporter.prototype.includeStat = function (stat) {\n        this.statsToReport_[stat] = true;\n    };\n    StatsReporter.prototype.reportStats_ = function () {\n        var _this = this;\n        var stats = this.statsListener_.get();\n        var reportedStats = {};\n        var haveStatsToReport = false;\n        util_1.forEach(stats, function (stat, value) {\n            if (value > 0 && util_1.contains(_this.statsToReport_, stat)) {\n                reportedStats[stat] = value;\n                haveStatsToReport = true;\n            }\n        });\n        if (haveStatsToReport) {\n            this.server_.reportStats(reportedStats);\n        }\n        // queue our next run.\n        util_2.setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL));\n    };\n    return StatsReporter;\n}());\nexports.StatsReporter = StatsReporter;\n\n//# sourceMappingURL=StatsReporter.js.map\n"]}]