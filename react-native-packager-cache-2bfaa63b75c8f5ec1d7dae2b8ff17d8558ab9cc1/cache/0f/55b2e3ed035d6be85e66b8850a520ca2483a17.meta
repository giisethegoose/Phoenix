["eeac9f7ff718a36c61b95885ceadd3caeec20131","4b394f1548af2d996c40162e26e3a687958383e8",["./assert"],[101],{"version":3,"sources":["/home/giise/candidtwo/node_modules/@firebase/util/dist/cjs/src/utf8.js"],"names":["Object","defineProperty","exports","value","assert_1","require","stringToByteArray","str","out","p","i","length","c","charCodeAt","high","assert","low","stringLength"],"mappings":"AAAA;;AAgBAA,OAAOC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C,EAAEC,OAAO,IAAT,EAA7C;AACA,IAAIC,WAAWC,QAAQ,UAAR,CAAf;;AAcAH,QAAQI,iBAAR,GAA4B,UAAUC,GAAV,EAAe;AACvC,QAAIC,MAAM,EAAV;AAAA,QAAcC,IAAI,CAAlB;AACA,SAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIH,IAAII,MAAxB,EAAgCD,GAAhC,EAAqC;AACjC,YAAIE,IAAIL,IAAIM,UAAJ,CAAeH,CAAf,CAAR;;AAEA,YAAIE,KAAK,MAAL,IAAeA,KAAK,MAAxB,EAAgC;AAC5B,gBAAIE,OAAOF,IAAI,MAAf;AACAF;AACAN,qBAASW,MAAT,CAAgBL,IAAIH,IAAII,MAAxB,EAAgC,yCAAhC;AACA,gBAAIK,MAAMT,IAAIM,UAAJ,CAAeH,CAAf,IAAoB,MAA9B;AACAE,gBAAI,WAAWE,QAAQ,EAAnB,IAAyBE,GAA7B;AACH;AACD,YAAIJ,IAAI,GAAR,EAAa;AACTJ,gBAAIC,GAAJ,IAAWG,CAAX;AACH,SAFD,MAGK,IAAIA,IAAI,IAAR,EAAc;AACfJ,gBAAIC,GAAJ,IAAYG,KAAK,CAAN,GAAW,GAAtB;AACAJ,gBAAIC,GAAJ,IAAYG,IAAI,EAAL,GAAW,GAAtB;AACH,SAHI,MAIA,IAAIA,IAAI,KAAR,EAAe;AAChBJ,gBAAIC,GAAJ,IAAYG,KAAK,EAAN,GAAY,GAAvB;AACAJ,gBAAIC,GAAJ,IAAaG,KAAK,CAAN,GAAW,EAAZ,GAAkB,GAA7B;AACAJ,gBAAIC,GAAJ,IAAYG,IAAI,EAAL,GAAW,GAAtB;AACH,SAJI,MAKA;AACDJ,gBAAIC,GAAJ,IAAYG,KAAK,EAAN,GAAY,GAAvB;AACAJ,gBAAIC,GAAJ,IAAaG,KAAK,EAAN,GAAY,EAAb,GAAmB,GAA9B;AACAJ,gBAAIC,GAAJ,IAAaG,KAAK,CAAN,GAAW,EAAZ,GAAkB,GAA7B;AACAJ,gBAAIC,GAAJ,IAAYG,IAAI,EAAL,GAAW,GAAtB;AACH;AACJ;AACD,WAAOJ,GAAP;AACH,CAhCD;;AAsCAN,QAAQe,YAAR,GAAuB,UAAUV,GAAV,EAAe;AAClC,QAAIE,IAAI,CAAR;AACA,SAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIH,IAAII,MAAxB,EAAgCD,GAAhC,EAAqC;AACjC,YAAIE,IAAIL,IAAIM,UAAJ,CAAeH,CAAf,CAAR;AACA,YAAIE,IAAI,GAAR,EAAa;AACTH;AACH,SAFD,MAGK,IAAIG,IAAI,IAAR,EAAc;AACfH,iBAAK,CAAL;AACH,SAFI,MAGA,IAAIG,KAAK,MAAL,IAAeA,KAAK,MAAxB,EAAgC;AAEjCH,iBAAK,CAAL;AACAC;AACH,SAJI,MAKA;AACDD,iBAAK,CAAL;AACH;AACJ;AACD,WAAOA,CAAP;AACH,CApBD","sourcesContent":["\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar assert_1 = require(\"./assert\");\n// Code originally came from goog.crypt.stringToUtf8ByteArray, but for some reason they\n// automatically replaced '\\r\\n' with '\\n', and they didn't handle surrogate pairs,\n// so it's been modified.\n// Note that not all Unicode characters appear as single characters in JavaScript strings.\n// fromCharCode returns the UTF-16 encoding of a character - so some Unicode characters\n// use 2 characters in Javascript.  All 4-byte UTF-8 characters begin with a first\n// character in the range 0xD800 - 0xDBFF (the first character of a so-called surrogate\n// pair).\n// See http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3\n/**\n * @param {string} str\n * @return {Array}\n */\nexports.stringToByteArray = function (str) {\n    var out = [], p = 0;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charCodeAt(i);\n        // Is this the lead surrogate in a surrogate pair?\n        if (c >= 0xd800 && c <= 0xdbff) {\n            var high = c - 0xd800; // the high 10 bits.\n            i++;\n            assert_1.assert(i < str.length, 'Surrogate pair missing trail surrogate.');\n            var low = str.charCodeAt(i) - 0xdc00; // the low 10 bits.\n            c = 0x10000 + (high << 10) + low;\n        }\n        if (c < 128) {\n            out[p++] = c;\n        }\n        else if (c < 2048) {\n            out[p++] = (c >> 6) | 192;\n            out[p++] = (c & 63) | 128;\n        }\n        else if (c < 65536) {\n            out[p++] = (c >> 12) | 224;\n            out[p++] = ((c >> 6) & 63) | 128;\n            out[p++] = (c & 63) | 128;\n        }\n        else {\n            out[p++] = (c >> 18) | 240;\n            out[p++] = ((c >> 12) & 63) | 128;\n            out[p++] = ((c >> 6) & 63) | 128;\n            out[p++] = (c & 63) | 128;\n        }\n    }\n    return out;\n};\n/**\n * Calculate length without actually converting; useful for doing cheaper validation.\n * @param {string} str\n * @return {number}\n */\nexports.stringLength = function (str) {\n    var p = 0;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charCodeAt(i);\n        if (c < 128) {\n            p++;\n        }\n        else if (c < 2048) {\n            p += 2;\n        }\n        else if (c >= 0xd800 && c <= 0xdbff) {\n            // Lead surrogate of a surrogate pair.  The pair together will take 4 bytes to represent.\n            p += 4;\n            i++; // skip trail surrogate.\n        }\n        else {\n            p += 3;\n        }\n    }\n    return p;\n};\n\n//# sourceMappingURL=utf8.js.map\n"]}]