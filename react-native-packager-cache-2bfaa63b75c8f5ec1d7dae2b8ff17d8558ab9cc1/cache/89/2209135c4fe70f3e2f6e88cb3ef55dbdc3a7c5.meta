["c04fd1b403458e96add0c75e88ac3165d3382cc4","4b76b3744a37ded1fc4c93980531c14556d74324",["../util/SortedMap"],[104,152],{"version":3,"sources":["/home/giise/candidtwo/node_modules/@firebase/database/dist/cjs/src/core/snap/childSet.js"],"names":["Object","defineProperty","exports","value","SortedMap_1","require","SortedMap_2","LOG_2","Math","log","Base12Num","length","logBase2","num","parseInt","bitMask","bits","Array","join","count","current_","mask","bits_","prototype","nextBitIsOne","result","buildChildSet","childList","cmp","keyFn","mapSortFn","sort","buildBalancedTree","low","high","namedNode","key","LLRBNode","node","BLACK","middle","left","right","buildFrom12Array","base12","root","index","buildPennant","chunkSize","color","childTree","attachPennant","pennant","i","isOne","pow","RED","SortedMap"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar SortedMap_1 = require(\"../util/SortedMap\");\nvar SortedMap_2 = require(\"../util/SortedMap\");\nvar LOG_2 = Math.log(2);\n/**\n * @constructor\n */\nvar Base12Num = /** @class */ (function () {\n    /**\n     * @param {number} length\n     */\n    function Base12Num(length) {\n        var logBase2 = function (num) {\n            return parseInt((Math.log(num) / LOG_2), 10);\n        };\n        var bitMask = function (bits) { return parseInt(Array(bits + 1).join('1'), 2); };\n        this.count = logBase2(length + 1);\n        this.current_ = this.count - 1;\n        var mask = bitMask(this.count);\n        this.bits_ = (length + 1) & mask;\n    }\n    /**\n     * @return {boolean}\n     */\n    Base12Num.prototype.nextBitIsOne = function () {\n        //noinspection JSBitwiseOperatorUsage\n        var result = !(this.bits_ & (0x1 << this.current_));\n        this.current_--;\n        return result;\n    };\n    return Base12Num;\n}());\n/**\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\n * function\n *\n * Uses the algorithm described in the paper linked here:\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\n *\n * @template K, V\n * @param {Array.<!NamedNode>} childList Unsorted list of children\n * @param {function(!NamedNode, !NamedNode):number} cmp The comparison method to be used\n * @param {(function(NamedNode):K)=} keyFn An optional function to extract K from a node wrapper, if K's\n *                                                        type is not NamedNode\n * @param {(function(K, K):number)=} mapSortFn An optional override for comparator used by the generated sorted map\n * @return {SortedMap.<K, V>}\n */\nexports.buildChildSet = function (childList, cmp, keyFn, mapSortFn) {\n    childList.sort(cmp);\n    var buildBalancedTree = function (low, high) {\n        var length = high - low;\n        var namedNode;\n        var key;\n        if (length == 0) {\n            return null;\n        }\n        else if (length == 1) {\n            namedNode = childList[low];\n            key = keyFn ? keyFn(namedNode) : namedNode;\n            return new SortedMap_1.LLRBNode(key, namedNode.node, SortedMap_1.LLRBNode.BLACK, null, null);\n        }\n        else {\n            var middle = parseInt((length / 2), 10) + low;\n            var left = buildBalancedTree(low, middle);\n            var right = buildBalancedTree(middle + 1, high);\n            namedNode = childList[middle];\n            key = keyFn ? keyFn(namedNode) : namedNode;\n            return new SortedMap_1.LLRBNode(key, namedNode.node, SortedMap_1.LLRBNode.BLACK, left, right);\n        }\n    };\n    var buildFrom12Array = function (base12) {\n        var node = null;\n        var root = null;\n        var index = childList.length;\n        var buildPennant = function (chunkSize, color) {\n            var low = index - chunkSize;\n            var high = index;\n            index -= chunkSize;\n            var childTree = buildBalancedTree(low + 1, high);\n            var namedNode = childList[low];\n            var key = keyFn ? keyFn(namedNode) : namedNode;\n            attachPennant(new SortedMap_1.LLRBNode(key, namedNode.node, color, null, childTree));\n        };\n        var attachPennant = function (pennant) {\n            if (node) {\n                node.left = pennant;\n                node = pennant;\n            }\n            else {\n                root = pennant;\n                node = pennant;\n            }\n        };\n        for (var i = 0; i < base12.count; ++i) {\n            var isOne = base12.nextBitIsOne();\n            // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\n            var chunkSize = Math.pow(2, base12.count - (i + 1));\n            if (isOne) {\n                buildPennant(chunkSize, SortedMap_1.LLRBNode.BLACK);\n            }\n            else {\n                // current == 2\n                buildPennant(chunkSize, SortedMap_1.LLRBNode.BLACK);\n                buildPennant(chunkSize, SortedMap_1.LLRBNode.RED);\n            }\n        }\n        return root;\n    };\n    var base12 = new Base12Num(childList.length);\n    var root = buildFrom12Array(base12);\n    return new SortedMap_2.SortedMap(mapSortFn || cmp, root);\n};\n\n//# sourceMappingURL=childSet.js.map\n"]}]