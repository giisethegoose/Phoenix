["344021b757f02295c13ad390b3ccc9b35985fc07","0e20d21fbdf9460914a31b71fd8f54a7c0988d7a",["./array","./blob","./error","./metadata","./object","./requestinfo","./type","./url"],[98,131,170,210,246,287,324,358],{"version":3,"sources":["/home/giise/candidtwo/node_modules/@firebase/storage/dist/cjs/src/implementation/requests.js"],"names":["Object","defineProperty","exports","value","array","require","blob_1","errorsExports","MetadataUtils","object","requestinfo_1","type","UrlUtils","handlerCheck","cndn","unknown","metadataHandler","authWrapper","mappings","handler","xhr","text","metadata","fromResourceString","sharedErrorHandler","location","errorHandler","err","newErr","getStatus","unauthenticated","quotaExceeded","bucket","unauthorized","path","setServerResponseProp","serverResponseProp","objectErrorHandler","shared","objectNotFound","getMetadata","urlPart","fullServerUrl","url","makeNormalUrl","method","timeout","maxOperationRetryTime","requestInfo","RequestInfo","updateMetadata","body","toResourceString","headers","deleteObject","successCodes","determineContentType_","blob","metadataForUpload_","opt_metadata","clone","size","multipartUpload","bucketOnlyServerUrl","genBoundary","str","i","Math","random","toString","slice","boundary","metadataString","preBlobPart","postBlobPart","FbsBlob","getBlob","cannotSliceBlob","urlParams","name","makeUploadUrl","maxUploadRetryTime","uploadData","ResumableUploadStatus","current","total","finalized","checkResumeHeader_","opt_allowed","status","getResponseHeader","e","allowed","contains","createResumableUpload","isString","getResumableUploadStatus","sizeString","parseInt","isNaN","resumableUploadChunkSize","continueResumableUpload","chunkSize","opt_status","opt_progressCallback","serverFileWrongSize","bytesLeft","bytesToUpload","min","startByte","endByte","uploadCommand","uploadStatus","newCurrent","progressCallback"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar array = require(\"./array\");\nvar blob_1 = require(\"./blob\");\nvar errorsExports = require(\"./error\");\nvar MetadataUtils = require(\"./metadata\");\nvar object = require(\"./object\");\nvar requestinfo_1 = require(\"./requestinfo\");\nvar type = require(\"./type\");\nvar UrlUtils = require(\"./url\");\n/**\n * Throws the UNKNOWN FirebaseStorageError if cndn is false.\n */\nfunction handlerCheck(cndn) {\n    if (!cndn) {\n        throw errorsExports.unknown();\n    }\n}\nexports.handlerCheck = handlerCheck;\nfunction metadataHandler(authWrapper, mappings) {\n    function handler(xhr, text) {\n        var metadata = MetadataUtils.fromResourceString(authWrapper, text, mappings);\n        handlerCheck(metadata !== null);\n        return metadata;\n    }\n    return handler;\n}\nexports.metadataHandler = metadataHandler;\nfunction sharedErrorHandler(location) {\n    function errorHandler(xhr, err) {\n        var newErr;\n        if (xhr.getStatus() === 401) {\n            newErr = errorsExports.unauthenticated();\n        }\n        else {\n            if (xhr.getStatus() === 402) {\n                newErr = errorsExports.quotaExceeded(location.bucket);\n            }\n            else {\n                if (xhr.getStatus() === 403) {\n                    newErr = errorsExports.unauthorized(location.path);\n                }\n                else {\n                    newErr = err;\n                }\n            }\n        }\n        newErr.setServerResponseProp(err.serverResponseProp());\n        return newErr;\n    }\n    return errorHandler;\n}\nexports.sharedErrorHandler = sharedErrorHandler;\nfunction objectErrorHandler(location) {\n    var shared = sharedErrorHandler(location);\n    function errorHandler(xhr, err) {\n        var newErr = shared(xhr, err);\n        if (xhr.getStatus() === 404) {\n            newErr = errorsExports.objectNotFound(location.path);\n        }\n        newErr.setServerResponseProp(err.serverResponseProp());\n        return newErr;\n    }\n    return errorHandler;\n}\nexports.objectErrorHandler = objectErrorHandler;\nfunction getMetadata(authWrapper, location, mappings) {\n    var urlPart = location.fullServerUrl();\n    var url = UrlUtils.makeNormalUrl(urlPart);\n    var method = 'GET';\n    var timeout = authWrapper.maxOperationRetryTime();\n    var requestInfo = new requestinfo_1.RequestInfo(url, method, metadataHandler(authWrapper, mappings), timeout);\n    requestInfo.errorHandler = objectErrorHandler(location);\n    return requestInfo;\n}\nexports.getMetadata = getMetadata;\nfunction updateMetadata(authWrapper, location, metadata, mappings) {\n    var urlPart = location.fullServerUrl();\n    var url = UrlUtils.makeNormalUrl(urlPart);\n    var method = 'PATCH';\n    var body = MetadataUtils.toResourceString(metadata, mappings);\n    var headers = { 'Content-Type': 'application/json; charset=utf-8' };\n    var timeout = authWrapper.maxOperationRetryTime();\n    var requestInfo = new requestinfo_1.RequestInfo(url, method, metadataHandler(authWrapper, mappings), timeout);\n    requestInfo.headers = headers;\n    requestInfo.body = body;\n    requestInfo.errorHandler = objectErrorHandler(location);\n    return requestInfo;\n}\nexports.updateMetadata = updateMetadata;\nfunction deleteObject(authWrapper, location) {\n    var urlPart = location.fullServerUrl();\n    var url = UrlUtils.makeNormalUrl(urlPart);\n    var method = 'DELETE';\n    var timeout = authWrapper.maxOperationRetryTime();\n    function handler(xhr, text) { }\n    var requestInfo = new requestinfo_1.RequestInfo(url, method, handler, timeout);\n    requestInfo.successCodes = [200, 204];\n    requestInfo.errorHandler = objectErrorHandler(location);\n    return requestInfo;\n}\nexports.deleteObject = deleteObject;\nfunction determineContentType_(metadata, blob) {\n    return ((metadata && metadata['contentType']) ||\n        (blob && blob.type()) ||\n        'application/octet-stream');\n}\nexports.determineContentType_ = determineContentType_;\nfunction metadataForUpload_(location, blob, opt_metadata) {\n    var metadata = object.clone(opt_metadata);\n    metadata['fullPath'] = location.path;\n    metadata['size'] = blob.size();\n    if (!metadata['contentType']) {\n        metadata['contentType'] = determineContentType_(null, blob);\n    }\n    return metadata;\n}\nexports.metadataForUpload_ = metadataForUpload_;\nfunction multipartUpload(authWrapper, location, mappings, blob, opt_metadata) {\n    var urlPart = location.bucketOnlyServerUrl();\n    var headers = {\n        'X-Goog-Upload-Protocol': 'multipart'\n    };\n    function genBoundary() {\n        var str = '';\n        for (var i = 0; i < 2; i++) {\n            str =\n                str +\n                    Math.random()\n                        .toString()\n                        .slice(2);\n        }\n        return str;\n    }\n    var boundary = genBoundary();\n    headers['Content-Type'] = 'multipart/related; boundary=' + boundary;\n    var metadata = metadataForUpload_(location, blob, opt_metadata);\n    var metadataString = MetadataUtils.toResourceString(metadata, mappings);\n    var preBlobPart = '--' +\n        boundary +\n        '\\r\\n' +\n        'Content-Type: application/json; charset=utf-8\\r\\n\\r\\n' +\n        metadataString +\n        '\\r\\n--' +\n        boundary +\n        '\\r\\n' +\n        'Content-Type: ' +\n        metadata['contentType'] +\n        '\\r\\n\\r\\n';\n    var postBlobPart = '\\r\\n--' + boundary + '--';\n    var body = blob_1.FbsBlob.getBlob(preBlobPart, blob, postBlobPart);\n    if (body === null) {\n        throw errorsExports.cannotSliceBlob();\n    }\n    var urlParams = { name: metadata['fullPath'] };\n    var url = UrlUtils.makeUploadUrl(urlPart);\n    var method = 'POST';\n    var timeout = authWrapper.maxUploadRetryTime();\n    var requestInfo = new requestinfo_1.RequestInfo(url, method, metadataHandler(authWrapper, mappings), timeout);\n    requestInfo.urlParams = urlParams;\n    requestInfo.headers = headers;\n    requestInfo.body = body.uploadData();\n    requestInfo.errorHandler = sharedErrorHandler(location);\n    return requestInfo;\n}\nexports.multipartUpload = multipartUpload;\n/**\n * @param current The number of bytes that have been uploaded so far.\n * @param total The total number of bytes in the upload.\n * @param opt_finalized True if the server has finished the upload.\n * @param opt_metadata The upload metadata, should\n *     only be passed if opt_finalized is true.\n * @struct\n */\nvar ResumableUploadStatus = /** @class */ (function () {\n    function ResumableUploadStatus(current, total, finalized, metadata) {\n        this.current = current;\n        this.total = total;\n        this.finalized = !!finalized;\n        this.metadata = metadata || null;\n    }\n    return ResumableUploadStatus;\n}());\nexports.ResumableUploadStatus = ResumableUploadStatus;\nfunction checkResumeHeader_(xhr, opt_allowed) {\n    var status;\n    try {\n        status = xhr.getResponseHeader('X-Goog-Upload-Status');\n    }\n    catch (e) {\n        handlerCheck(false);\n    }\n    var allowed = opt_allowed || ['active'];\n    handlerCheck(array.contains(allowed, status));\n    return status;\n}\nexports.checkResumeHeader_ = checkResumeHeader_;\nfunction createResumableUpload(authWrapper, location, mappings, blob, opt_metadata) {\n    var urlPart = location.bucketOnlyServerUrl();\n    var metadata = metadataForUpload_(location, blob, opt_metadata);\n    var urlParams = { name: metadata['fullPath'] };\n    var url = UrlUtils.makeUploadUrl(urlPart);\n    var method = 'POST';\n    var headers = {\n        'X-Goog-Upload-Protocol': 'resumable',\n        'X-Goog-Upload-Command': 'start',\n        'X-Goog-Upload-Header-Content-Length': blob.size(),\n        'X-Goog-Upload-Header-Content-Type': metadata['contentType'],\n        'Content-Type': 'application/json; charset=utf-8'\n    };\n    var body = MetadataUtils.toResourceString(metadata, mappings);\n    var timeout = authWrapper.maxUploadRetryTime();\n    function handler(xhr, text) {\n        checkResumeHeader_(xhr);\n        var url;\n        try {\n            url = xhr.getResponseHeader('X-Goog-Upload-URL');\n        }\n        catch (e) {\n            handlerCheck(false);\n        }\n        handlerCheck(type.isString(url));\n        return url;\n    }\n    var requestInfo = new requestinfo_1.RequestInfo(url, method, handler, timeout);\n    requestInfo.urlParams = urlParams;\n    requestInfo.headers = headers;\n    requestInfo.body = body;\n    requestInfo.errorHandler = sharedErrorHandler(location);\n    return requestInfo;\n}\nexports.createResumableUpload = createResumableUpload;\n/**\n * @param url From a call to fbs.requests.createResumableUpload.\n */\nfunction getResumableUploadStatus(authWrapper, location, url, blob) {\n    var headers = { 'X-Goog-Upload-Command': 'query' };\n    function handler(xhr, text) {\n        var status = checkResumeHeader_(xhr, ['active', 'final']);\n        var sizeString;\n        try {\n            sizeString = xhr.getResponseHeader('X-Goog-Upload-Size-Received');\n        }\n        catch (e) {\n            handlerCheck(false);\n        }\n        var size = parseInt(sizeString, 10);\n        handlerCheck(!isNaN(size));\n        return new ResumableUploadStatus(size, blob.size(), status === 'final');\n    }\n    var method = 'POST';\n    var timeout = authWrapper.maxUploadRetryTime();\n    var requestInfo = new requestinfo_1.RequestInfo(url, method, handler, timeout);\n    requestInfo.headers = headers;\n    requestInfo.errorHandler = sharedErrorHandler(location);\n    return requestInfo;\n}\nexports.getResumableUploadStatus = getResumableUploadStatus;\n/**\n * Any uploads via the resumable upload API must transfer a number of bytes\n * that is a multiple of this number.\n */\nexports.resumableUploadChunkSize = 256 * 1024;\n/**\n * @param url From a call to fbs.requests.createResumableUpload.\n * @param chunkSize Number of bytes to upload.\n * @param opt_status The previous status.\n *     If not passed or null, we start from the beginning.\n * @throws fbs.Error If the upload is already complete, the passed in status\n *     has a final size inconsistent with the blob, or the blob cannot be sliced\n *     for upload.\n */\nfunction continueResumableUpload(location, authWrapper, url, blob, chunkSize, mappings, opt_status, opt_progressCallback) {\n    // TODO(andysoto): standardize on internal asserts\n    // assert(!(opt_status && opt_status.finalized));\n    var status = new ResumableUploadStatus(0, 0);\n    if (opt_status) {\n        status.current = opt_status.current;\n        status.total = opt_status.total;\n    }\n    else {\n        status.current = 0;\n        status.total = blob.size();\n    }\n    if (blob.size() !== status.total) {\n        throw errorsExports.serverFileWrongSize();\n    }\n    var bytesLeft = status.total - status.current;\n    var bytesToUpload = bytesLeft;\n    if (chunkSize > 0) {\n        bytesToUpload = Math.min(bytesToUpload, chunkSize);\n    }\n    var startByte = status.current;\n    var endByte = startByte + bytesToUpload;\n    var uploadCommand = bytesToUpload === bytesLeft ? 'upload, finalize' : 'upload';\n    var headers = {\n        'X-Goog-Upload-Command': uploadCommand,\n        'X-Goog-Upload-Offset': status.current\n    };\n    var body = blob.slice(startByte, endByte);\n    if (body === null) {\n        throw errorsExports.cannotSliceBlob();\n    }\n    function handler(xhr, text) {\n        // TODO(andysoto): Verify the MD5 of each uploaded range:\n        // the 'x-range-md5' header comes back with status code 308 responses.\n        // We'll only be able to bail out though, because you can't re-upload a\n        // range that you previously uploaded.\n        var uploadStatus = checkResumeHeader_(xhr, ['active', 'final']);\n        var newCurrent = status.current + bytesToUpload;\n        var size = blob.size();\n        var metadata;\n        if (uploadStatus === 'final') {\n            metadata = metadataHandler(authWrapper, mappings)(xhr, text);\n        }\n        else {\n            metadata = null;\n        }\n        return new ResumableUploadStatus(newCurrent, size, uploadStatus === 'final', metadata);\n    }\n    var method = 'POST';\n    var timeout = authWrapper.maxUploadRetryTime();\n    var requestInfo = new requestinfo_1.RequestInfo(url, method, handler, timeout);\n    requestInfo.headers = headers;\n    requestInfo.body = body.uploadData();\n    requestInfo.progressCallback = opt_progressCallback || null;\n    requestInfo.errorHandler = sharedErrorHandler(location);\n    return requestInfo;\n}\nexports.continueResumableUpload = continueResumableUpload;\n\n//# sourceMappingURL=requests.js.map\n"]}]