["0083ebaf6e8e3da36d8f17b1d856173f9121af98","543027e4c31a13978263bc6c7c785f4856ecc7c7",["react","./../../../react-transform-hmr/lib/index.js","react-native"],[88,167,1135],{"version":3,"sources":["/home/giise/candidtwo/node_modules/react-navigation/src/views/TouchableItem.js"],"names":["React","ANDROID_VERSION_LOLLIPOP","OS","Version","props","style","rest","Ripple","pressColor","borderless","Children","only","children","Component","defaultProps"],"mappings":";;;;;;IAWYA,K;;;;;;;;;;;;AACZ;;;;;;;;;;;;;;;;;;;;;;;;YADYA,K;;;;;;;;;AASZ,IAAMC,2BAA2B,EAAjC;;;;;;;;;;;;;6BAkBW;AASP,UACE,sBAASC,EAAT,KAAgB,SAAhB,IACA,sBAASC,OAAT,IAAoBF,wBAFtB,EAGE;AAAA,qBAC2B,KAAKG,KADhC;AAAA,YACQC,MADR,UACQA,KADR;AAAA,YACkBC,IADlB;;AAEA,eACE;AAAA;AAAA,uBACMA,IADN;AAEE,mBAAO,IAFT;AAGE,wBAAY,qCAAwBC,MAAxB,CACV,KAAKH,KAAL,CAAWI,UAAX,IAAyB,EADf,EAEV,KAAKJ,KAAL,CAAWK,UAAX,IAAyB,KAFf;AAHd;AAQE;AAAA;AAAA,cAAM,OAAOJ,MAAb;AAAqBL,kBAAMU,QAAN,CAAeC,IAAf,CAAoB,KAAKP,KAAL,CAAWQ,QAA/B;AAArB;AARF,SADF;AAYD;;AAED,aACE;AAAA;AAAsB,aAAKR,KAA3B;AAAmC,aAAKA,KAAL,CAAWQ;AAA9C,OADF;AAGD;;;;EArCwCZ,MAAMa,S,UACxCC,Y,GAAe;AACpBL,cAAY,KADQ;AAEpBD,cAAY;AAFQ,C","sourcesContent":["/* @flow */\n\n/**\n * TouchableItem renders a touchable that looks native on both iOS and Android.\n *\n * It provides an abstraction on top of TouchableNativeFeedback and\n * TouchableOpacity.\n *\n * On iOS you can pass the props of TouchableOpacity, on Android pass the props\n * of TouchableNativeFeedback.\n */\nimport * as React from 'react';\nimport {\n  Platform,\n  TouchableNativeFeedback,\n  TouchableOpacity,\n  View,\n} from 'react-native';\nimport type { ViewStyleProp } from '../TypeDefinition';\n\nconst ANDROID_VERSION_LOLLIPOP = 21;\n\ntype Props = {\n  onPress?: () => void,\n  delayPressIn?: number,\n  borderless?: boolean,\n  pressColor?: string,\n  activeOpacity?: number,\n  children?: React.ChildrenArray<*>,\n  style?: ViewStyleProp,\n};\n\nexport default class TouchableItem extends React.Component<Props> {\n  static defaultProps = {\n    borderless: false,\n    pressColor: 'rgba(0, 0, 0, .32)',\n  };\n\n  render() {\n    /*\n     * TouchableNativeFeedback.Ripple causes a crash on old Android versions,\n     * therefore only enable it on Android Lollipop and above.\n     *\n     * All touchables on Android should have the ripple effect according to\n     * platform design guidelines.\n     * We need to pass the background prop to specify a borderless ripple effect.\n     */\n    if (\n      Platform.OS === 'android' &&\n      Platform.Version >= ANDROID_VERSION_LOLLIPOP\n    ) {\n      const { style, ...rest } = this.props;\n      return (\n        <TouchableNativeFeedback\n          {...rest}\n          style={null}\n          background={TouchableNativeFeedback.Ripple(\n            this.props.pressColor || '',\n            this.props.borderless || false\n          )}\n        >\n          <View style={style}>{React.Children.only(this.props.children)}</View>\n        </TouchableNativeFeedback>\n      );\n    }\n\n    return (\n      <TouchableOpacity {...this.props}>{this.props.children}</TouchableOpacity>\n    );\n  }\n}\n"]}]