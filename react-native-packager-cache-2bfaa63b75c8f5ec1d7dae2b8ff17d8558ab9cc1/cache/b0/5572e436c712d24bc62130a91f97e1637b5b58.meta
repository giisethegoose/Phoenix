["cda5360527e4a87697615e9555496c6131717b21","b2e8968be755f41503e18d66cb00de5b53ddbfe8",["./implementation/taskenums","./implementation/observer","./tasksnapshot","./implementation/args","./implementation/array","./implementation/async","./implementation/error","./implementation/promise_external","./implementation/requests","./implementation/type"],[104,160,216,276,317,366,415,463,519,583,640,695],{"version":3,"sources":["/home/giise/candidtwo/node_modules/@firebase/storage/dist/cjs/src/task.js"],"names":["Object","defineProperty","exports","value","taskenums_1","require","observer_1","taskenums_2","tasksnapshot_1","fbsArgs","fbsArray","async_1","errors","fbsPromiseimpl","fbsRequests","fbsTaskEnums","typeUtils","UploadTask","ref","authWrapper","location","mappings","blob","metadata","_this","transferred_","needToFetchStatus_","needToFetchMetadata_","observers_","error_","uploadUrl_","request_","chunkMultiplier_","resolve_","reject_","ref_","authWrapper_","location_","blob_","metadata_","mappings_","resumable_","shouldDoResumable_","state_","InternalTaskState","RUNNING","errorHandler_","error","codeEquals","Code","CANCELED","completeTransitions_","transition_","ERROR","metadataErrorHandler_","promise_","make","resolve","reject","start_","then","prototype","makeProgressCallback_","sizeBefore","loaded","total","updateProgress_","size","createResumable_","fetchStatus_","fetchMetadata_","continueUpload_","oneShotUpload_","resolveToken_","callback","getAuthToken","authToken","CANCELING","PAUSING","PAUSED","requestInfo","createResumableUpload","createRequest","makeRequest","getPromise","url","getResumableUploadStatus","statusRequest","status","current","finalized","chunkSize","resumableUploadChunkSize","ResumableUploadStatus","continueResumableUpload","e","uploadRequest","newStatus","increaseMultiplier_","SUCCESS","currentSize","getMetadata","metadataRequest","multipartUpload","multipartRequest","transferred","old","notifyObservers_","state","cancel","wasPaused","canceled","get","externalState","taskStateFromInternalTaskState","UploadTaskSnapshot","enumerable","configurable","on","type","nextOrObserver","completed","undefined","typeValidator","_p","TaskEvent","STATE_CHANGED","nextOrObserverMessage","nextValidator","nullFunctionSpec","validator","observerValidator","looseObjectSpec","nextOrObserverValidator","p","anyDefined","isJustDef","specs","stringSpec","validate","arguments","self","makeBinder","binder","opt_complete","observer","Observer","addObserver_","removeObserver_","binderNextOrObserverValidator","binderSpecs","typeOnly","onFulfilled","onRejected","catch","push","notifyObserver_","remove","finishPromise_","observers","clone","forEach","triggered","TaskState","async","bind","snapshot","toCall","next","complete","resume","valid","pause"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Defines types for interacting with blob transfer tasks.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar taskenums_1 = require(\"./implementation/taskenums\");\nvar observer_1 = require(\"./implementation/observer\");\nvar taskenums_2 = require(\"./implementation/taskenums\");\nvar tasksnapshot_1 = require(\"./tasksnapshot\");\nvar fbsArgs = require(\"./implementation/args\");\nvar fbsArray = require(\"./implementation/array\");\nvar async_1 = require(\"./implementation/async\");\nvar errors = require(\"./implementation/error\");\nvar fbsPromiseimpl = require(\"./implementation/promise_external\");\nvar fbsRequests = require(\"./implementation/requests\");\nvar fbsTaskEnums = require(\"./implementation/taskenums\");\nvar typeUtils = require(\"./implementation/type\");\n/**\n * Represents a blob being uploaded. Can be used to pause/resume/cancel the\n * upload and manage callbacks for various events.\n */\nvar UploadTask = /** @class */ (function () {\n    /**\n     * @param ref The firebaseStorage.Reference object this task came\n     *     from, untyped to avoid cyclic dependencies.\n     * @param blob The blob to upload.\n     */\n    function UploadTask(ref, authWrapper, location, mappings, blob, metadata) {\n        if (metadata === void 0) { metadata = null; }\n        var _this = this;\n        this.transferred_ = 0;\n        this.needToFetchStatus_ = false;\n        this.needToFetchMetadata_ = false;\n        this.observers_ = [];\n        this.error_ = null;\n        this.uploadUrl_ = null;\n        this.request_ = null;\n        this.chunkMultiplier_ = 1;\n        this.resolve_ = null;\n        this.reject_ = null;\n        this.ref_ = ref;\n        this.authWrapper_ = authWrapper;\n        this.location_ = location;\n        this.blob_ = blob;\n        this.metadata_ = metadata;\n        this.mappings_ = mappings;\n        this.resumable_ = this.shouldDoResumable_(this.blob_);\n        this.state_ = taskenums_1.InternalTaskState.RUNNING;\n        this.errorHandler_ = function (error) {\n            _this.request_ = null;\n            _this.chunkMultiplier_ = 1;\n            if (error.codeEquals(errors.Code.CANCELED)) {\n                _this.needToFetchStatus_ = true;\n                _this.completeTransitions_();\n            }\n            else {\n                _this.error_ = error;\n                _this.transition_(taskenums_1.InternalTaskState.ERROR);\n            }\n        };\n        this.metadataErrorHandler_ = function (error) {\n            _this.request_ = null;\n            if (error.codeEquals(errors.Code.CANCELED)) {\n                _this.completeTransitions_();\n            }\n            else {\n                _this.error_ = error;\n                _this.transition_(taskenums_1.InternalTaskState.ERROR);\n            }\n        };\n        this.promise_ = fbsPromiseimpl.make(function (resolve, reject) {\n            _this.resolve_ = resolve;\n            _this.reject_ = reject;\n            _this.start_();\n        });\n        // Prevent uncaught rejections on the internal promise from bubbling out\n        // to the top level with a dummy handler.\n        this.promise_.then(null, function () { });\n    }\n    UploadTask.prototype.makeProgressCallback_ = function () {\n        var _this = this;\n        var sizeBefore = this.transferred_;\n        return function (loaded, total) {\n            _this.updateProgress_(sizeBefore + loaded);\n        };\n    };\n    UploadTask.prototype.shouldDoResumable_ = function (blob) {\n        return blob.size() > 256 * 1024;\n    };\n    UploadTask.prototype.start_ = function () {\n        if (this.state_ !== taskenums_1.InternalTaskState.RUNNING) {\n            // This can happen if someone pauses us in a resume callback, for example.\n            return;\n        }\n        if (this.request_ !== null) {\n            return;\n        }\n        if (this.resumable_) {\n            if (this.uploadUrl_ === null) {\n                this.createResumable_();\n            }\n            else {\n                if (this.needToFetchStatus_) {\n                    this.fetchStatus_();\n                }\n                else {\n                    if (this.needToFetchMetadata_) {\n                        // Happens if we miss the metadata on upload completion.\n                        this.fetchMetadata_();\n                    }\n                    else {\n                        this.continueUpload_();\n                    }\n                }\n            }\n        }\n        else {\n            this.oneShotUpload_();\n        }\n    };\n    UploadTask.prototype.resolveToken_ = function (callback) {\n        var _this = this;\n        this.authWrapper_.getAuthToken().then(function (authToken) {\n            switch (_this.state_) {\n                case taskenums_1.InternalTaskState.RUNNING:\n                    callback(authToken);\n                    break;\n                case taskenums_1.InternalTaskState.CANCELING:\n                    _this.transition_(taskenums_1.InternalTaskState.CANCELED);\n                    break;\n                case taskenums_1.InternalTaskState.PAUSING:\n                    _this.transition_(taskenums_1.InternalTaskState.PAUSED);\n                    break;\n                default:\n            }\n        });\n    };\n    // TODO(andysoto): assert false\n    UploadTask.prototype.createResumable_ = function () {\n        var _this = this;\n        this.resolveToken_(function (authToken) {\n            var requestInfo = fbsRequests.createResumableUpload(_this.authWrapper_, _this.location_, _this.mappings_, _this.blob_, _this.metadata_);\n            var createRequest = _this.authWrapper_.makeRequest(requestInfo, authToken);\n            _this.request_ = createRequest;\n            createRequest.getPromise().then(function (url) {\n                _this.request_ = null;\n                _this.uploadUrl_ = url;\n                _this.needToFetchStatus_ = false;\n                _this.completeTransitions_();\n            }, _this.errorHandler_);\n        });\n    };\n    UploadTask.prototype.fetchStatus_ = function () {\n        var _this = this;\n        // TODO(andysoto): assert(this.uploadUrl_ !== null);\n        var url = this.uploadUrl_;\n        this.resolveToken_(function (authToken) {\n            var requestInfo = fbsRequests.getResumableUploadStatus(_this.authWrapper_, _this.location_, url, _this.blob_);\n            var statusRequest = _this.authWrapper_.makeRequest(requestInfo, authToken);\n            _this.request_ = statusRequest;\n            statusRequest.getPromise().then(function (status) {\n                status = status;\n                _this.request_ = null;\n                _this.updateProgress_(status.current);\n                _this.needToFetchStatus_ = false;\n                if (status.finalized) {\n                    _this.needToFetchMetadata_ = true;\n                }\n                _this.completeTransitions_();\n            }, _this.errorHandler_);\n        });\n    };\n    UploadTask.prototype.continueUpload_ = function () {\n        var _this = this;\n        var chunkSize = fbsRequests.resumableUploadChunkSize * this.chunkMultiplier_;\n        var status = new fbsRequests.ResumableUploadStatus(this.transferred_, this.blob_.size());\n        // TODO(andysoto): assert(this.uploadUrl_ !== null);\n        var url = this.uploadUrl_;\n        this.resolveToken_(function (authToken) {\n            var requestInfo;\n            try {\n                requestInfo = fbsRequests.continueResumableUpload(_this.location_, _this.authWrapper_, url, _this.blob_, chunkSize, _this.mappings_, status, _this.makeProgressCallback_());\n            }\n            catch (e) {\n                _this.error_ = e;\n                _this.transition_(taskenums_1.InternalTaskState.ERROR);\n                return;\n            }\n            var uploadRequest = _this.authWrapper_.makeRequest(requestInfo, authToken);\n            _this.request_ = uploadRequest;\n            uploadRequest\n                .getPromise()\n                .then(function (newStatus) {\n                _this.increaseMultiplier_();\n                _this.request_ = null;\n                _this.updateProgress_(newStatus.current);\n                if (newStatus.finalized) {\n                    _this.metadata_ = newStatus.metadata;\n                    _this.transition_(taskenums_1.InternalTaskState.SUCCESS);\n                }\n                else {\n                    _this.completeTransitions_();\n                }\n            }, _this.errorHandler_);\n        });\n    };\n    UploadTask.prototype.increaseMultiplier_ = function () {\n        var currentSize = fbsRequests.resumableUploadChunkSize * this.chunkMultiplier_;\n        // Max chunk size is 32M.\n        if (currentSize < 32 * 1024 * 1024) {\n            this.chunkMultiplier_ *= 2;\n        }\n    };\n    UploadTask.prototype.fetchMetadata_ = function () {\n        var _this = this;\n        this.resolveToken_(function (authToken) {\n            var requestInfo = fbsRequests.getMetadata(_this.authWrapper_, _this.location_, _this.mappings_);\n            var metadataRequest = _this.authWrapper_.makeRequest(requestInfo, authToken);\n            _this.request_ = metadataRequest;\n            metadataRequest.getPromise().then(function (metadata) {\n                _this.request_ = null;\n                _this.metadata_ = metadata;\n                _this.transition_(taskenums_1.InternalTaskState.SUCCESS);\n            }, _this.metadataErrorHandler_);\n        });\n    };\n    UploadTask.prototype.oneShotUpload_ = function () {\n        var _this = this;\n        this.resolveToken_(function (authToken) {\n            var requestInfo = fbsRequests.multipartUpload(_this.authWrapper_, _this.location_, _this.mappings_, _this.blob_, _this.metadata_);\n            var multipartRequest = _this.authWrapper_.makeRequest(requestInfo, authToken);\n            _this.request_ = multipartRequest;\n            multipartRequest.getPromise().then(function (metadata) {\n                _this.request_ = null;\n                _this.metadata_ = metadata;\n                _this.updateProgress_(_this.blob_.size());\n                _this.transition_(taskenums_1.InternalTaskState.SUCCESS);\n            }, _this.errorHandler_);\n        });\n    };\n    UploadTask.prototype.updateProgress_ = function (transferred) {\n        var old = this.transferred_;\n        this.transferred_ = transferred;\n        // A progress update can make the \"transferred\" value smaller (e.g. a\n        // partial upload not completed by server, after which the \"transferred\"\n        // value may reset to the value at the beginning of the request).\n        if (this.transferred_ !== old) {\n            this.notifyObservers_();\n        }\n    };\n    UploadTask.prototype.transition_ = function (state) {\n        if (this.state_ === state) {\n            return;\n        }\n        switch (state) {\n            case taskenums_1.InternalTaskState.CANCELING:\n                // TODO(andysoto):\n                // assert(this.state_ === InternalTaskState.RUNNING ||\n                //        this.state_ === InternalTaskState.PAUSING);\n                this.state_ = state;\n                if (this.request_ !== null) {\n                    this.request_.cancel();\n                }\n                break;\n            case taskenums_1.InternalTaskState.PAUSING:\n                // TODO(andysoto):\n                // assert(this.state_ === InternalTaskState.RUNNING);\n                this.state_ = state;\n                if (this.request_ !== null) {\n                    this.request_.cancel();\n                }\n                break;\n            case taskenums_1.InternalTaskState.RUNNING:\n                // TODO(andysoto):\n                // assert(this.state_ === InternalTaskState.PAUSED ||\n                //        this.state_ === InternalTaskState.PAUSING);\n                var wasPaused = this.state_ === taskenums_1.InternalTaskState.PAUSED;\n                this.state_ = state;\n                if (wasPaused) {\n                    this.notifyObservers_();\n                    this.start_();\n                }\n                break;\n            case taskenums_1.InternalTaskState.PAUSED:\n                // TODO(andysoto):\n                // assert(this.state_ === InternalTaskState.PAUSING);\n                this.state_ = state;\n                this.notifyObservers_();\n                break;\n            case taskenums_1.InternalTaskState.CANCELED:\n                // TODO(andysoto):\n                // assert(this.state_ === InternalTaskState.PAUSED ||\n                //        this.state_ === InternalTaskState.CANCELING);\n                this.error_ = errors.canceled();\n                this.state_ = state;\n                this.notifyObservers_();\n                break;\n            case taskenums_1.InternalTaskState.ERROR:\n                // TODO(andysoto):\n                // assert(this.state_ === InternalTaskState.RUNNING ||\n                //        this.state_ === InternalTaskState.PAUSING ||\n                //        this.state_ === InternalTaskState.CANCELING);\n                this.state_ = state;\n                this.notifyObservers_();\n                break;\n            case taskenums_1.InternalTaskState.SUCCESS:\n                // TODO(andysoto):\n                // assert(this.state_ === InternalTaskState.RUNNING ||\n                //        this.state_ === InternalTaskState.PAUSING ||\n                //        this.state_ === InternalTaskState.CANCELING);\n                this.state_ = state;\n                this.notifyObservers_();\n                break;\n        }\n    };\n    UploadTask.prototype.completeTransitions_ = function () {\n        switch (this.state_) {\n            case taskenums_1.InternalTaskState.PAUSING:\n                this.transition_(taskenums_1.InternalTaskState.PAUSED);\n                break;\n            case taskenums_1.InternalTaskState.CANCELING:\n                this.transition_(taskenums_1.InternalTaskState.CANCELED);\n                break;\n            case taskenums_1.InternalTaskState.RUNNING:\n                this.start_();\n                break;\n            default:\n                // TODO(andysoto): assert(false);\n                break;\n        }\n    };\n    Object.defineProperty(UploadTask.prototype, \"snapshot\", {\n        get: function () {\n            var externalState = fbsTaskEnums.taskStateFromInternalTaskState(this.state_);\n            return new tasksnapshot_1.UploadTaskSnapshot(this.transferred_, this.blob_.size(), externalState, this.metadata_, this, this.ref_);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Adds a callback for an event.\n     * @param type The type of event to listen for.\n     */\n    UploadTask.prototype.on = function (type, nextOrObserver, error, completed) {\n        if (nextOrObserver === void 0) { nextOrObserver = undefined; }\n        if (error === void 0) { error = undefined; }\n        if (completed === void 0) { completed = undefined; }\n        function typeValidator(_p) {\n            if (type !== taskenums_2.TaskEvent.STATE_CHANGED) {\n                throw \"Expected one of the event types: [\" + taskenums_2.TaskEvent.STATE_CHANGED + \"].\";\n            }\n        }\n        var nextOrObserverMessage = 'Expected a function or an Object with one of ' +\n            '`next`, `error`, `complete` properties.';\n        var nextValidator = fbsArgs.nullFunctionSpec(true).validator;\n        var observerValidator = fbsArgs.looseObjectSpec(null, true).validator;\n        function nextOrObserverValidator(p) {\n            try {\n                nextValidator(p);\n                return;\n            }\n            catch (e) { }\n            try {\n                observerValidator(p);\n                var anyDefined = typeUtils.isJustDef(p['next']) ||\n                    typeUtils.isJustDef(p['error']) ||\n                    typeUtils.isJustDef(p['complete']);\n                if (!anyDefined) {\n                    throw '';\n                }\n                return;\n            }\n            catch (e) {\n                throw nextOrObserverMessage;\n            }\n        }\n        var specs = [\n            fbsArgs.stringSpec(typeValidator),\n            fbsArgs.looseObjectSpec(nextOrObserverValidator, true),\n            fbsArgs.nullFunctionSpec(true),\n            fbsArgs.nullFunctionSpec(true)\n        ];\n        fbsArgs.validate('on', specs, arguments);\n        var self = this;\n        function makeBinder(specs) {\n            function binder(nextOrObserver, error, opt_complete) {\n                if (specs !== null) {\n                    fbsArgs.validate('on', specs, arguments);\n                }\n                var observer = new observer_1.Observer(nextOrObserver, error, completed);\n                self.addObserver_(observer);\n                return function () {\n                    self.removeObserver_(observer);\n                };\n            }\n            return binder;\n        }\n        function binderNextOrObserverValidator(p) {\n            if (p === null) {\n                throw nextOrObserverMessage;\n            }\n            nextOrObserverValidator(p);\n        }\n        var binderSpecs = [\n            fbsArgs.looseObjectSpec(binderNextOrObserverValidator),\n            fbsArgs.nullFunctionSpec(true),\n            fbsArgs.nullFunctionSpec(true)\n        ];\n        var typeOnly = !(typeUtils.isJustDef(nextOrObserver) ||\n            typeUtils.isJustDef(error) ||\n            typeUtils.isJustDef(completed));\n        if (typeOnly) {\n            return makeBinder(binderSpecs);\n        }\n        else {\n            return makeBinder(null)(nextOrObserver, error, completed);\n        }\n    };\n    /**\n     * This object behaves like a Promise, and resolves with its snapshot data\n     * when the upload completes.\n     * @param onFulfilled The fulfillment callback. Promise chaining works as normal.\n     * @param onRejected The rejection callback.\n     */\n    UploadTask.prototype.then = function (onFulfilled, onRejected) {\n        // These casts are needed so that TypeScript can infer the types of the\n        // resulting Promise.\n        return this.promise_.then(onFulfilled, onRejected);\n    };\n    /**\n     * Equivalent to calling `then(null, onRejected)`.\n     */\n    UploadTask.prototype.catch = function (onRejected) {\n        return this.then(null, onRejected);\n    };\n    /**\n     * Adds the given observer.\n     */\n    UploadTask.prototype.addObserver_ = function (observer) {\n        this.observers_.push(observer);\n        this.notifyObserver_(observer);\n    };\n    /**\n     * Removes the given observer.\n     */\n    UploadTask.prototype.removeObserver_ = function (observer) {\n        fbsArray.remove(this.observers_, observer);\n    };\n    UploadTask.prototype.notifyObservers_ = function () {\n        var _this = this;\n        this.finishPromise_();\n        var observers = fbsArray.clone(this.observers_);\n        observers.forEach(function (observer) {\n            _this.notifyObserver_(observer);\n        });\n    };\n    UploadTask.prototype.finishPromise_ = function () {\n        if (this.resolve_ !== null) {\n            var triggered = true;\n            switch (fbsTaskEnums.taskStateFromInternalTaskState(this.state_)) {\n                case taskenums_2.TaskState.SUCCESS:\n                    async_1.async(this.resolve_.bind(null, this.snapshot))();\n                    break;\n                case taskenums_2.TaskState.CANCELED:\n                case taskenums_2.TaskState.ERROR:\n                    var toCall = this.reject_;\n                    async_1.async(toCall.bind(null, this.error_))();\n                    break;\n                default:\n                    triggered = false;\n                    break;\n            }\n            if (triggered) {\n                this.resolve_ = null;\n                this.reject_ = null;\n            }\n        }\n    };\n    UploadTask.prototype.notifyObserver_ = function (observer) {\n        var externalState = fbsTaskEnums.taskStateFromInternalTaskState(this.state_);\n        switch (externalState) {\n            case taskenums_2.TaskState.RUNNING:\n            case taskenums_2.TaskState.PAUSED:\n                if (observer.next !== null) {\n                    async_1.async(observer.next.bind(observer, this.snapshot))();\n                }\n                break;\n            case taskenums_2.TaskState.SUCCESS:\n                if (observer.complete !== null) {\n                    async_1.async(observer.complete.bind(observer))();\n                }\n                break;\n            case taskenums_2.TaskState.CANCELED:\n            case taskenums_2.TaskState.ERROR:\n                if (observer.error !== null) {\n                    async_1.async(observer.error.bind(observer, this.error_))();\n                }\n                break;\n            default:\n                // TODO(andysoto): assert(false);\n                if (observer.error !== null) {\n                    async_1.async(observer.error.bind(observer, this.error_))();\n                }\n        }\n    };\n    /**\n     * Resumes a paused task. Has no effect on a currently running or failed task.\n     * @return True if the operation took effect, false if ignored.\n     */\n    UploadTask.prototype.resume = function () {\n        fbsArgs.validate('resume', [], arguments);\n        var valid = this.state_ === taskenums_1.InternalTaskState.PAUSED ||\n            this.state_ === taskenums_1.InternalTaskState.PAUSING;\n        if (valid) {\n            this.transition_(taskenums_1.InternalTaskState.RUNNING);\n        }\n        return valid;\n    };\n    /**\n     * Pauses a currently running task. Has no effect on a paused or failed task.\n     * @return True if the operation took effect, false if ignored.\n     */\n    UploadTask.prototype.pause = function () {\n        fbsArgs.validate('pause', [], arguments);\n        var valid = this.state_ === taskenums_1.InternalTaskState.RUNNING;\n        if (valid) {\n            this.transition_(taskenums_1.InternalTaskState.PAUSING);\n        }\n        return valid;\n    };\n    /**\n     * Cancels a currently running or paused task. Has no effect on a complete or\n     * failed task.\n     * @return True if the operation took effect, false if ignored.\n     */\n    UploadTask.prototype.cancel = function () {\n        fbsArgs.validate('cancel', [], arguments);\n        var valid = this.state_ === taskenums_1.InternalTaskState.RUNNING ||\n            this.state_ === taskenums_1.InternalTaskState.PAUSING;\n        if (valid) {\n            this.transition_(taskenums_1.InternalTaskState.CANCELING);\n        }\n        return valid;\n    };\n    return UploadTask;\n}());\nexports.UploadTask = UploadTask;\n\n//# sourceMappingURL=task.js.map\n"]}]