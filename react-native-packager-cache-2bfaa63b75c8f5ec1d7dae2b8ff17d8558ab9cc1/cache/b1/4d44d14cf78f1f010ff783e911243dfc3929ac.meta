["4b31d3953d474434f21f9b6c1b347f478e1fc4c2","c914102f654c87e7c73daaded4df55ff6db93c8d",["../snap/Node","./Change","@firebase/util"],[99,139,173],{"version":3,"sources":["/home/giise/candidtwo/node_modules/@firebase/database/dist/cjs/src/core/view/EventGenerator.js"],"names":["Object","defineProperty","exports","value","Node_1","require","Change_1","util_1","EventGenerator","query_","index_","getQueryParams","getIndex","prototype","generateEventsForChanges","changes","eventCache","eventRegistrations","_this","events","moves","forEach","change","type","Change","CHILD_CHANGED","indexedValueChanged","oldSnap","snapshotNode","push","childMovedChange","childName","generateEventsForType_","CHILD_REMOVED","CHILD_ADDED","CHILD_MOVED","VALUE","eventType","registrations","filteredChanges","filter","sort","compareChanges_","bind","materializedChange","materializeSingleChange_","registration","respondsTo","createEvent","prevName","getPredecessorChildName","a","b","assertionError","aWrapped","NamedNode","bWrapped","compare"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Node_1 = require(\"../snap/Node\");\nvar Change_1 = require(\"./Change\");\nvar util_1 = require(\"@firebase/util\");\n/**\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\n * for details.\n *\n * @constructor\n */\nvar EventGenerator = /** @class */ (function () {\n    /**\n     *\n     * @param {!Query} query_\n     */\n    function EventGenerator(query_) {\n        this.query_ = query_;\n        /**\n         * @private\n         * @type {!Index}\n         */\n        this.index_ = this.query_.getQueryParams().getIndex();\n    }\n    /**\n     * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\n     * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\n     *\n     * Notes:\n     *  - child_moved events will be synthesized at this time for any child_changed events that affect\n     *    our index.\n     *  - prevName will be calculated based on the index ordering.\n     *\n     * @param {!Array.<!Change>} changes\n     * @param {!Node} eventCache\n     * @param {!Array.<!EventRegistration>} eventRegistrations\n     * @return {!Array.<!Event>}\n     */\n    EventGenerator.prototype.generateEventsForChanges = function (changes, eventCache, eventRegistrations) {\n        var _this = this;\n        var events = [];\n        var moves = [];\n        changes.forEach(function (change) {\n            if (change.type === Change_1.Change.CHILD_CHANGED &&\n                _this.index_.indexedValueChanged(change.oldSnap, change.snapshotNode)) {\n                moves.push(Change_1.Change.childMovedChange(change.childName, change.snapshotNode));\n            }\n        });\n        this.generateEventsForType_(events, Change_1.Change.CHILD_REMOVED, changes, eventRegistrations, eventCache);\n        this.generateEventsForType_(events, Change_1.Change.CHILD_ADDED, changes, eventRegistrations, eventCache);\n        this.generateEventsForType_(events, Change_1.Change.CHILD_MOVED, moves, eventRegistrations, eventCache);\n        this.generateEventsForType_(events, Change_1.Change.CHILD_CHANGED, changes, eventRegistrations, eventCache);\n        this.generateEventsForType_(events, Change_1.Change.VALUE, changes, eventRegistrations, eventCache);\n        return events;\n    };\n    /**\n     * Given changes of a single change type, generate the corresponding events.\n     *\n     * @param {!Array.<!Event>} events\n     * @param {!string} eventType\n     * @param {!Array.<!Change>} changes\n     * @param {!Array.<!EventRegistration>} registrations\n     * @param {!Node} eventCache\n     * @private\n     */\n    EventGenerator.prototype.generateEventsForType_ = function (events, eventType, changes, registrations, eventCache) {\n        var _this = this;\n        var filteredChanges = changes.filter(function (change) { return change.type === eventType; });\n        filteredChanges.sort(this.compareChanges_.bind(this));\n        filteredChanges.forEach(function (change) {\n            var materializedChange = _this.materializeSingleChange_(change, eventCache);\n            registrations.forEach(function (registration) {\n                if (registration.respondsTo(change.type)) {\n                    events.push(registration.createEvent(materializedChange, _this.query_));\n                }\n            });\n        });\n    };\n    /**\n     * @param {!Change} change\n     * @param {!Node} eventCache\n     * @return {!Change}\n     * @private\n     */\n    EventGenerator.prototype.materializeSingleChange_ = function (change, eventCache) {\n        if (change.type === 'value' || change.type === 'child_removed') {\n            return change;\n        }\n        else {\n            change.prevName = eventCache.getPredecessorChildName(\n            /** @type {!string} */\n            change.childName, change.snapshotNode, this.index_);\n            return change;\n        }\n    };\n    /**\n     * @param {!Change} a\n     * @param {!Change} b\n     * @return {number}\n     * @private\n     */\n    EventGenerator.prototype.compareChanges_ = function (a, b) {\n        if (a.childName == null || b.childName == null) {\n            throw util_1.assertionError('Should only compare child_ events.');\n        }\n        var aWrapped = new Node_1.NamedNode(a.childName, a.snapshotNode);\n        var bWrapped = new Node_1.NamedNode(b.childName, b.snapshotNode);\n        return this.index_.compare(aWrapped, bWrapped);\n    };\n    return EventGenerator;\n}());\nexports.EventGenerator = EventGenerator;\n\n//# sourceMappingURL=EventGenerator.js.map\n"]}]