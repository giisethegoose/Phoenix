["91aa902c1bed552f96b2ce7735334a921e1ae59b","eb6d7f2097046544cd70303d9caab3e199c7a2ce",["../utils/log.js"],[114],{"version":3,"sources":["/home/giise/candidtwo/node_modules/react-native-fetch-blob/polyfill/EventTarget.js"],"names":["log","disable","EventTarget","info","listeners","type","cb","push","handlers","i","splice","removeEventListener","event","call"],"mappings":";;;;;AAIA;;;;AAEA,IAAMA,MAAM,kBAAQ,aAAR,CAAZ;;AAEAA,IAAIC,OAAJ;;IAEqBC,W;AAInB,yBAAc;AAAA;;AACZF,QAAIG,IAAJ,CAAS,oBAAT;AACA,SAAKC,SAAL,GAAiB,EAAjB;AACD;;;;qCAOgBC,I,EAAaC,E,EAAiB;AAC7CN,UAAIG,IAAJ,CAAS,oBAAT,EAA+BE,IAA/B,EAAqCC,EAArC;AACA,UAAG,EAAED,QAAQ,KAAKD,SAAf,CAAH,EAA8B;AAC5B,aAAKA,SAAL,CAAeC,IAAf,IAAuB,EAAvB;AACD;AACD,WAAKD,SAAL,CAAeC,IAAf,EAAqBE,IAArB,CAA0BD,EAA1B;AACD;;;wCAQmBD,I,EAAaC,E,EAAe;AAC9CN,UAAIG,IAAJ,CAAS,uBAAT,EAAkCE,IAAlC,EAAwCC,EAAxC;AACA,UAAG,EAAED,QAAQ,KAAKD,SAAf,CAAH,EACE;AACF,UAAII,WAAW,KAAKJ,SAAL,CAAeC,IAAf,CAAf;AACA,WAAI,IAAII,CAAR,IAAaD,QAAb,EAAuB;AACrB,YAAGF,OAAOE,SAASC,CAAT,CAAV,EAAuB;AACrBD,mBAASE,MAAT,CAAgBD,CAAhB,EAAkB,CAAlB;AACA,iBAAO,KAAKE,mBAAL,CAAyBN,IAAzB,EAA+BC,EAA/B,CAAP;AACD;AACF;AACF;;;kCAOaD,I,EAAYO,K,EAAa;AACrCZ,UAAIG,IAAJ,CAAS,gBAAT,EAA2BS,KAA3B;AACA,UAAG,EAAEP,QAAQ,KAAKD,SAAf,CAAH,EACE;AACF,UAAII,WAAW,KAAKJ,SAAL,CAAeC,IAAf,CAAf;AACA,WAAI,IAAII,CAAR,IAAaD,QAAb,EAAuB;AACrBA,iBAASC,CAAT,EAAYI,IAAZ,CAAiB,IAAjB,EAAuBD,KAAvB;AACD;AAEF;;;0CAOqB;AACpB,WAAI,IAAIH,CAAR,IAAa,KAAKL,SAAlB,EAA6B;AAC3B,eAAO,KAAKA,SAAL,CAAeK,CAAf,CAAP;AACD;AACF;;;;;kBAlEkBP,W","sourcesContent":["// Copyright 2016 wkh237@github. All rights reserved.\n// Use of this source code is governed by a MIT-style license that can be\n// found in the LICENSE file.\n\nimport Log from '../utils/log.js'\n\nconst log = new Log('EventTarget')\n\nlog.disable()\n\nexport default class EventTarget {\n\n  listeners : any;\n\n  constructor() {\n    log.info('constructor called')\n    this.listeners = {}\n  }\n\n  /**\n   * Add an event listener to given event type\n   * @param {string} type Event type string\n   * @param {(Event) => void} cb   Event handler function\n   */\n  addEventListener(type:string, cb : () => void) {\n    log.info('add event listener', type, cb)\n    if(!(type in this.listeners)) {\n      this.listeners[type] = []\n    }\n    this.listeners[type].push(cb)\n  }\n\n  /**\n   * Remove an event listener\n   * @param  {string} type Type of the event listener\n   * @param  {()=>void} cb Event listener function.\n   * @return {[type]}             [description]\n   */\n  removeEventListener(type:string, cb:() => void) {\n    log.info('remove event listener', type, cb)\n    if(!(type in this.listeners))\n      return\n    let handlers = this.listeners[type]\n    for(let i in handlers) {\n      if(cb === handlers[i]) {\n        handlers.splice(i,1)\n        return this.removeEventListener(type, cb)\n      }\n    }\n  }\n\n  /**\n   * Dispatch an event\n   * @param {string} type Event type.\n   * @param {Event} event Event data payload.\n   */\n  dispatchEvent(type:string,event:Event) {\n    log.info('dispatch event', event)\n    if(!(type in this.listeners))\n      return\n    let handlers = this.listeners[type]\n    for(let i in handlers) {\n      handlers[i].call(this, event)\n    }\n\n  }\n\n  /**\n   * Remove all registered listeners from this object.\n   * @nonstandard\n   * @return {[type]} [description]\n   */\n  clearEventListeners() {\n    for(let i in this.listeners) {\n      delete this.listeners[i]\n    }\n  }\n\n}"]}]