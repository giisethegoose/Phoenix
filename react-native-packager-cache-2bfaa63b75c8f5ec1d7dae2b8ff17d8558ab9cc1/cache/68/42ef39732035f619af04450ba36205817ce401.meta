["b631afc934d226f43f4f42cf4d739253e0b61ebf","3fe267cef11c13aa4d2491bf3c53f47df142bde3",["../index.js","./ProgressEvent.js","./EventTarget","./Blob","../utils/log.js","../fs"],[116,221,348,459,547,641],{"version":3,"sources":["/home/giise/candidtwo/node_modules/react-native-fetch-blob/polyfill/FileReader.js"],"names":["log","level","FileReader","_readState","verbose","_result","b","label","event","e","_readyState"],"mappings":";;;;;AAIA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA,IAAMA,MAAM,kBAAQ,YAAR,CAAZ;;AAEAA,IAAIC,KAAJ,CAAU,CAAV;;IAEqBC,U;;;;wBAiBC;AAAE,aAAO,IAAP;AAAa;;;wBAfjB;AAChB,aAAO,CAAP;AACD;;;wBACmB;AAClB,aAAO,CAAP;AACD;;;wBACgB;AACf,aAAO,CAAP;AACD;;;AAiBD,wBAAc;AAAA;;AAAA;;AAAA,UAddC,UAcc,GAdM,CAcN;;AAEZH,QAAII,OAAJ,CAAY,mBAAZ;AACA,UAAKC,OAAL,GAAe,IAAf;AAHY;AAIb;;;;4BAEO;AACNL,UAAII,OAAJ,CAAY,OAAZ;AACD;;;sCAEiBE,C,EAAQ;AACxBN,UAAII,OAAJ,CAAY,mBAAZ,EAAiCE,CAAjC;AACD;;;uCAEkBA,C,EAAQ;AACzBN,UAAII,OAAJ,CAAY,oBAAZ,EAAkCE,CAAlC;AACD;;;+BAEUA,C,EAAQC,K,EAAe;AAChCP,UAAII,OAAJ,CAAY,YAAZ,EAA0BE,CAA1B,EAA6BC,KAA7B;AACD;;;kCAEaD,C,EAAQ;AACpBN,UAAII,OAAJ,CAAY,eAAZ,EAA6BE,CAA7B;AACD;;;kCAEaE,K,EAAOC,C,EAAG;AACtBT,UAAII,OAAJ,CAAY,gBAAZ,EAA8BI,KAA9B,EAAqCC,CAArC;AACA,wIAAoBD,KAApB,EAA2BC,CAA3B;AACA,UAAG,OAAO,YAAUD,KAAV,CAAP,KAA8B,UAAjC,EAA6C;AAC3C,oBAAUA,KAAV,EAAmBC,CAAnB;AACD;AACF;;;wBAMgB;AACf,aAAO,KAAKC,WAAZ;AACD;;;wBAEY;AACX,aAAO,KAAKL,OAAZ;AACD;;;;;kBAvEkBH,U","sourcesContent":["// Copyright 2016 wkh237@github. All rights reserved.\n// Use of this source code is governed by a MIT-style license that can be\n// found in the LICENSE file.\n\nimport RNFetchBlob from '../index.js'\nimport ProgressEvent from './ProgressEvent.js'\nimport EventTarget from './EventTarget'\nimport Blob from './Blob'\nimport Log from '../utils/log.js'\nimport fs from '../fs'\n\nconst log = new Log('FileReader')\n\nlog.level(3)\n\nexport default class FileReader extends EventTarget {\n\n  static get EMPTY(){\n    return 0\n  }\n  static get LOADING(){\n    return 1\n  }\n  static get DONE(){\n    return 2\n  }\n\n  // properties\n  _readState:number = 0;\n  _result:any;\n  _error:any;\n\n  get isRNFBPolyFill(){ return true }\n\n  // event handlers\n  onloadstart:(e:Event) => void;\n  onprogress:(e:Event) => void;\n  onload:(e:Event) => void;\n  onabort:(e:Event) => void;\n  onerror:(e:Event) => void;\n  onloadend:(e:Event) => void;\n\n  constructor() {\n    super()\n    log.verbose('file reader const')\n    this._result = null\n  }\n\n  abort() {\n    log.verbose('abort')\n  }\n\n  readAsArrayBuffer(b:Blob) {\n    log.verbose('readAsArrayBuffer', b)\n  }\n\n  readAsBinaryString(b:Blob) {\n    log.verbose('readAsBinaryString', b)\n  }\n\n  readAsText(b:Blob, label:?string) {\n    log.verbose('readAsText', b, label)\n  }\n\n  readAsDataURL(b:Blob) {\n    log.verbose('readAsDataURL', b)\n  }\n\n  dispatchEvent(event, e) {\n    log.verbose('dispatch event', event, e)\n    super.dispatchEvent(event, e)\n    if(typeof this[`on${event}`] === 'function') {\n      this[`on${event}`](e)\n    }\n  }\n\n  // private methods\n\n  // getters and setters\n\n  get readyState() {\n    return this._readyState\n  }\n\n  get result() {\n    return this._result\n  }\n\n\n\n}\n"]}]