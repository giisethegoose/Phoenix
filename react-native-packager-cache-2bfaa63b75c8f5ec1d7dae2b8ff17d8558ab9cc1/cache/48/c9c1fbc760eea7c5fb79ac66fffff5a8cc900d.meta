["47c3a9e4f51890cc4f7329cfb2b03de152f993a3","22d4aee719ab13d757ae0601114656571cc25322",["@firebase/util","./util/Path","./CompoundWrite","./snap/indexes/PriorityIndex","./snap/ChildrenNode"],[99,139,179,225,275,337],{"version":3,"sources":["/home/giise/candidtwo/node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js"],"names":["Object","defineProperty","exports","value","util_1","require","util_2","Path_1","CompoundWrite_1","PriorityIndex_1","ChildrenNode_1","WriteTree","visibleWrites_","CompoundWrite","Empty","allWrites_","lastWriteId_","prototype","childWrites","path","WriteTreeRef","addOverwrite","snap","writeId","visible","assert","undefined","push","addWrite","addMerge","changedChildren","children","addWrites","getWrite","i","length","record","removeWrite","_this","idx","findIndex","s","writeToRemove","splice","removedWriteWasVisible","removedWriteOverlapsWithOtherWrites","currentWrite","recordContainsPath_","contains","resetTree_","forEach","childName","child","getCompleteWriteData","getCompleteNode","calcCompleteEventCache","treePath","completeServerCache","writeIdsToExclude","includeHiddenWrites","shadowingNode","subMerge","childCompoundWrite","isEmpty","hasCompleteWrite","Path","layeredCache","ChildrenNode","EMPTY_NODE","apply","merge","filter","write","indexOf","mergeAtPath","layerTree_","calcCompleteEventChildren","completeServerChildren","completeChildren","topLevelSet","isLeafNode","forEachChild","PRIORITY_INDEX","childSnap","updateImmediateChild","merge_1","childNode","node","getCompleteChildren","namedNode","name","calcEventCacheAfterServerOverwrite","childPath","existingEventSnap","existingServerSnap","childMerge","getChild","calcCompleteChild","childKey","isCompleteForChild","getNode","getImmediateChild","shadowingWrite","calcIndexedSlice","completeServerData","startPost","count","reverse","index","toIterate","withIndex","nodes","cmp","getCompare","iter","getReverseIteratorFrom","getIteratorFrom","next","getNext","writeRecord","findKey","DefaultFilter_","writes","treeRoot","compoundWrite","writePath","relativePath","safeGet","getFront","deepNode","popFront","assertionError","writeTree","treePath_","writeTree_","existingServerCache"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util_1 = require(\"@firebase/util\");\nvar util_2 = require(\"@firebase/util\");\nvar Path_1 = require(\"./util/Path\");\nvar CompoundWrite_1 = require(\"./CompoundWrite\");\nvar PriorityIndex_1 = require(\"./snap/indexes/PriorityIndex\");\nvar ChildrenNode_1 = require(\"./snap/ChildrenNode\");\n/**\n * WriteTree tracks all pending user-initiated writes and has methods to calculate the result of merging them\n * with underlying server data (to create \"event cache\" data).  Pending writes are added with addOverwrite()\n * and addMerge(), and removed with removeWrite().\n *\n * @constructor\n */\nvar WriteTree = /** @class */ (function () {\n    function WriteTree() {\n        /**\n         * A tree tracking the result of applying all visible writes.  This does not include transactions with\n         * applyLocally=false or writes that are completely shadowed by other writes.\n         *\n         * @type {!CompoundWrite}\n         * @private\n         */\n        this.visibleWrites_ = CompoundWrite_1.CompoundWrite.Empty;\n        /**\n         * A list of all pending writes, regardless of visibility and shadowed-ness.  Used to calculate arbitrary\n         * sets of the changed data, such as hidden writes (from transactions) or changes with certain writes excluded (also\n         * used by transactions).\n         *\n         * @type {!Array.<!WriteRecord>}\n         * @private\n         */\n        this.allWrites_ = [];\n        this.lastWriteId_ = -1;\n    }\n    /**\n     * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\n     *\n     * @param {!Path} path\n     * @return {!WriteTreeRef}\n     */\n    WriteTree.prototype.childWrites = function (path) {\n        return new WriteTreeRef(path, this);\n    };\n    /**\n     * Record a new overwrite from user code.\n     *\n     * @param {!Path} path\n     * @param {!Node} snap\n     * @param {!number} writeId\n     * @param {boolean=} visible This is set to false by some transactions. It should be excluded from event caches\n     */\n    WriteTree.prototype.addOverwrite = function (path, snap, writeId, visible) {\n        util_2.assert(writeId > this.lastWriteId_, 'Stacking an older write on top of newer ones');\n        if (visible === undefined) {\n            visible = true;\n        }\n        this.allWrites_.push({\n            path: path,\n            snap: snap,\n            writeId: writeId,\n            visible: visible\n        });\n        if (visible) {\n            this.visibleWrites_ = this.visibleWrites_.addWrite(path, snap);\n        }\n        this.lastWriteId_ = writeId;\n    };\n    /**\n     * Record a new merge from user code.\n     *\n     * @param {!Path} path\n     * @param {!Object.<string, !Node>} changedChildren\n     * @param {!number} writeId\n     */\n    WriteTree.prototype.addMerge = function (path, changedChildren, writeId) {\n        util_2.assert(writeId > this.lastWriteId_, 'Stacking an older merge on top of newer ones');\n        this.allWrites_.push({\n            path: path,\n            children: changedChildren,\n            writeId: writeId,\n            visible: true\n        });\n        this.visibleWrites_ = this.visibleWrites_.addWrites(path, changedChildren);\n        this.lastWriteId_ = writeId;\n    };\n    /**\n     * @param {!number} writeId\n     * @return {?WriteRecord}\n     */\n    WriteTree.prototype.getWrite = function (writeId) {\n        for (var i = 0; i < this.allWrites_.length; i++) {\n            var record = this.allWrites_[i];\n            if (record.writeId === writeId) {\n                return record;\n            }\n        }\n        return null;\n    };\n    /**\n     * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\n     * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\n     *\n     * @param {!number} writeId\n     * @return {boolean} true if the write may have been visible (meaning we'll need to reevaluate / raise\n     * events as a result).\n     */\n    WriteTree.prototype.removeWrite = function (writeId) {\n        // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\n        // out of order.\n        //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\n        //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\n        var _this = this;\n        var idx = this.allWrites_.findIndex(function (s) {\n            return s.writeId === writeId;\n        });\n        util_2.assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\n        var writeToRemove = this.allWrites_[idx];\n        this.allWrites_.splice(idx, 1);\n        var removedWriteWasVisible = writeToRemove.visible;\n        var removedWriteOverlapsWithOtherWrites = false;\n        var i = this.allWrites_.length - 1;\n        while (removedWriteWasVisible && i >= 0) {\n            var currentWrite = this.allWrites_[i];\n            if (currentWrite.visible) {\n                if (i >= idx &&\n                    this.recordContainsPath_(currentWrite, writeToRemove.path)) {\n                    // The removed write was completely shadowed by a subsequent write.\n                    removedWriteWasVisible = false;\n                }\n                else if (writeToRemove.path.contains(currentWrite.path)) {\n                    // Either we're covering some writes or they're covering part of us (depending on which came first).\n                    removedWriteOverlapsWithOtherWrites = true;\n                }\n            }\n            i--;\n        }\n        if (!removedWriteWasVisible) {\n            return false;\n        }\n        else if (removedWriteOverlapsWithOtherWrites) {\n            // There's some shadowing going on. Just rebuild the visible writes from scratch.\n            this.resetTree_();\n            return true;\n        }\n        else {\n            // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\n            if (writeToRemove.snap) {\n                this.visibleWrites_ = this.visibleWrites_.removeWrite(writeToRemove.path);\n            }\n            else {\n                var children = writeToRemove.children;\n                util_1.forEach(children, function (childName) {\n                    _this.visibleWrites_ = _this.visibleWrites_.removeWrite(writeToRemove.path.child(childName));\n                });\n            }\n            return true;\n        }\n    };\n    /**\n     * Return a complete snapshot for the given path if there's visible write data at that path, else null.\n     * No server data is considered.\n     *\n     * @param {!Path} path\n     * @return {?Node}\n     */\n    WriteTree.prototype.getCompleteWriteData = function (path) {\n        return this.visibleWrites_.getCompleteNode(path);\n    };\n    /**\n     * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\n     * writes), attempt to calculate a complete snapshot for the given path\n     *\n     * @param {!Path} treePath\n     * @param {?Node} completeServerCache\n     * @param {Array.<number>=} writeIdsToExclude An optional set to be excluded\n     * @param {boolean=} includeHiddenWrites Defaults to false, whether or not to layer on writes with visible set to false\n     * @return {?Node}\n     */\n    WriteTree.prototype.calcCompleteEventCache = function (treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\n        if (!writeIdsToExclude && !includeHiddenWrites) {\n            var shadowingNode = this.visibleWrites_.getCompleteNode(treePath);\n            if (shadowingNode != null) {\n                return shadowingNode;\n            }\n            else {\n                var subMerge = this.visibleWrites_.childCompoundWrite(treePath);\n                if (subMerge.isEmpty()) {\n                    return completeServerCache;\n                }\n                else if (completeServerCache == null &&\n                    !subMerge.hasCompleteWrite(Path_1.Path.Empty)) {\n                    // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\n                    return null;\n                }\n                else {\n                    var layeredCache = completeServerCache || ChildrenNode_1.ChildrenNode.EMPTY_NODE;\n                    return subMerge.apply(layeredCache);\n                }\n            }\n        }\n        else {\n            var merge = this.visibleWrites_.childCompoundWrite(treePath);\n            if (!includeHiddenWrites && merge.isEmpty()) {\n                return completeServerCache;\n            }\n            else {\n                // If the server cache is null, and we don't have a complete cache, we need to return null\n                if (!includeHiddenWrites &&\n                    completeServerCache == null &&\n                    !merge.hasCompleteWrite(Path_1.Path.Empty)) {\n                    return null;\n                }\n                else {\n                    var filter = function (write) {\n                        return ((write.visible || includeHiddenWrites) &&\n                            (!writeIdsToExclude ||\n                                !~writeIdsToExclude.indexOf(write.writeId)) &&\n                            (write.path.contains(treePath) || treePath.contains(write.path)));\n                    };\n                    var mergeAtPath = WriteTree.layerTree_(this.allWrites_, filter, treePath);\n                    var layeredCache = completeServerCache || ChildrenNode_1.ChildrenNode.EMPTY_NODE;\n                    return mergeAtPath.apply(layeredCache);\n                }\n            }\n        }\n    };\n    /**\n     * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\n     * Used when creating new views, to pre-fill their complete event children snapshot.\n     *\n     * @param {!Path} treePath\n     * @param {?ChildrenNode} completeServerChildren\n     * @return {!ChildrenNode}\n     */\n    WriteTree.prototype.calcCompleteEventChildren = function (treePath, completeServerChildren) {\n        var completeChildren = ChildrenNode_1.ChildrenNode.EMPTY_NODE;\n        var topLevelSet = this.visibleWrites_.getCompleteNode(treePath);\n        if (topLevelSet) {\n            if (!topLevelSet.isLeafNode()) {\n                // we're shadowing everything. Return the children.\n                topLevelSet.forEachChild(PriorityIndex_1.PRIORITY_INDEX, function (childName, childSnap) {\n                    completeChildren = completeChildren.updateImmediateChild(childName, childSnap);\n                });\n            }\n            return completeChildren;\n        }\n        else if (completeServerChildren) {\n            // Layer any children we have on top of this\n            // We know we don't have a top-level set, so just enumerate existing children\n            var merge_1 = this.visibleWrites_.childCompoundWrite(treePath);\n            completeServerChildren.forEachChild(PriorityIndex_1.PRIORITY_INDEX, function (childName, childNode) {\n                var node = merge_1\n                    .childCompoundWrite(new Path_1.Path(childName))\n                    .apply(childNode);\n                completeChildren = completeChildren.updateImmediateChild(childName, node);\n            });\n            // Add any complete children we have from the set\n            merge_1.getCompleteChildren().forEach(function (namedNode) {\n                completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\n            });\n            return completeChildren;\n        }\n        else {\n            // We don't have anything to layer on top of. Layer on any children we have\n            // Note that we can return an empty snap if we have a defined delete\n            var merge = this.visibleWrites_.childCompoundWrite(treePath);\n            merge.getCompleteChildren().forEach(function (namedNode) {\n                completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\n            });\n            return completeChildren;\n        }\n    };\n    /**\n     * Given that the underlying server data has updated, determine what, if anything, needs to be\n     * applied to the event cache.\n     *\n     * Possibilities:\n     *\n     * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n     *\n     * 2. Some write is completely shadowing. No events to be raised\n     *\n     * 3. Is partially shadowed. Events\n     *\n     * Either existingEventSnap or existingServerSnap must exist\n     *\n     * @param {!Path} treePath\n     * @param {!Path} childPath\n     * @param {?Node} existingEventSnap\n     * @param {?Node} existingServerSnap\n     * @return {?Node}\n     */\n    WriteTree.prototype.calcEventCacheAfterServerOverwrite = function (treePath, childPath, existingEventSnap, existingServerSnap) {\n        util_2.assert(existingEventSnap || existingServerSnap, 'Either existingEventSnap or existingServerSnap must exist');\n        var path = treePath.child(childPath);\n        if (this.visibleWrites_.hasCompleteWrite(path)) {\n            // At this point we can probably guarantee that we're in case 2, meaning no events\n            // May need to check visibility while doing the findRootMostValueAndPath call\n            return null;\n        }\n        else {\n            // No complete shadowing. We're either partially shadowing or not shadowing at all.\n            var childMerge = this.visibleWrites_.childCompoundWrite(path);\n            if (childMerge.isEmpty()) {\n                // We're not shadowing at all. Case 1\n                return existingServerSnap.getChild(childPath);\n            }\n            else {\n                // This could be more efficient if the serverNode + updates doesn't change the eventSnap\n                // However this is tricky to find out, since user updates don't necessary change the server\n                // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\n                // adds nodes, but doesn't change any existing writes. It is therefore not enough to\n                // only check if the updates change the serverNode.\n                // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\n                return childMerge.apply(existingServerSnap.getChild(childPath));\n            }\n        }\n    };\n    /**\n     * Returns a complete child for a given server snap after applying all user writes or null if there is no\n     * complete child for this ChildKey.\n     *\n     * @param {!Path} treePath\n     * @param {!string} childKey\n     * @param {!CacheNode} existingServerSnap\n     * @return {?Node}\n     */\n    WriteTree.prototype.calcCompleteChild = function (treePath, childKey, existingServerSnap) {\n        var path = treePath.child(childKey);\n        var shadowingNode = this.visibleWrites_.getCompleteNode(path);\n        if (shadowingNode != null) {\n            return shadowingNode;\n        }\n        else {\n            if (existingServerSnap.isCompleteForChild(childKey)) {\n                var childMerge = this.visibleWrites_.childCompoundWrite(path);\n                return childMerge.apply(existingServerSnap.getNode().getImmediateChild(childKey));\n            }\n            else {\n                return null;\n            }\n        }\n    };\n    /**\n     * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n     * a higher path, this will return the child of that write relative to the write and this path.\n     * Returns null if there is no write at this path.\n     *\n     * @param {!Path} path\n     * @return {?Node}\n     */\n    WriteTree.prototype.shadowingWrite = function (path) {\n        return this.visibleWrites_.getCompleteNode(path);\n    };\n    /**\n     * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n     * the window, but may now be in the window.\n     *\n     * @param {!Path} treePath\n     * @param {?Node} completeServerData\n     * @param {!NamedNode} startPost\n     * @param {!number} count\n     * @param {boolean} reverse\n     * @param {!Index} index\n     * @return {!Array.<!NamedNode>}\n     */\n    WriteTree.prototype.calcIndexedSlice = function (treePath, completeServerData, startPost, count, reverse, index) {\n        var toIterate;\n        var merge = this.visibleWrites_.childCompoundWrite(treePath);\n        var shadowingNode = merge.getCompleteNode(Path_1.Path.Empty);\n        if (shadowingNode != null) {\n            toIterate = shadowingNode;\n        }\n        else if (completeServerData != null) {\n            toIterate = merge.apply(completeServerData);\n        }\n        else {\n            // no children to iterate on\n            return [];\n        }\n        toIterate = toIterate.withIndex(index);\n        if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\n            var nodes = [];\n            var cmp = index.getCompare();\n            var iter = reverse\n                ? toIterate.getReverseIteratorFrom(startPost, index)\n                : toIterate.getIteratorFrom(startPost, index);\n            var next = iter.getNext();\n            while (next && nodes.length < count) {\n                if (cmp(next, startPost) !== 0) {\n                    nodes.push(next);\n                }\n                next = iter.getNext();\n            }\n            return nodes;\n        }\n        else {\n            return [];\n        }\n    };\n    /**\n     * @param {!WriteRecord} writeRecord\n     * @param {!Path} path\n     * @return {boolean}\n     * @private\n     */\n    WriteTree.prototype.recordContainsPath_ = function (writeRecord, path) {\n        if (writeRecord.snap) {\n            return writeRecord.path.contains(path);\n        }\n        else {\n            // findKey can return undefined, so use !! to coerce to boolean\n            return !!util_1.findKey(writeRecord.children, function (childSnap, childName) {\n                return writeRecord.path.child(childName).contains(path);\n            });\n        }\n    };\n    /**\n     * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\n     * @private\n     */\n    WriteTree.prototype.resetTree_ = function () {\n        this.visibleWrites_ = WriteTree.layerTree_(this.allWrites_, WriteTree.DefaultFilter_, Path_1.Path.Empty);\n        if (this.allWrites_.length > 0) {\n            this.lastWriteId_ = this.allWrites_[this.allWrites_.length - 1].writeId;\n        }\n        else {\n            this.lastWriteId_ = -1;\n        }\n    };\n    /**\n     * The default filter used when constructing the tree. Keep everything that's visible.\n     *\n     * @param {!WriteRecord} write\n     * @return {boolean}\n     * @private\n     */\n    WriteTree.DefaultFilter_ = function (write) {\n        return write.visible;\n    };\n    /**\n     * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\n     * event data at that path.\n     *\n     * @param {!Array.<!WriteRecord>} writes\n     * @param {!function(!WriteRecord):boolean} filter\n     * @param {!Path} treeRoot\n     * @return {!CompoundWrite}\n     * @private\n     */\n    WriteTree.layerTree_ = function (writes, filter, treeRoot) {\n        var compoundWrite = CompoundWrite_1.CompoundWrite.Empty;\n        for (var i = 0; i < writes.length; ++i) {\n            var write = writes[i];\n            // Theory, a later set will either:\n            // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\n            // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\n            if (filter(write)) {\n                var writePath = write.path;\n                var relativePath = void 0;\n                if (write.snap) {\n                    if (treeRoot.contains(writePath)) {\n                        relativePath = Path_1.Path.relativePath(treeRoot, writePath);\n                        compoundWrite = compoundWrite.addWrite(relativePath, write.snap);\n                    }\n                    else if (writePath.contains(treeRoot)) {\n                        relativePath = Path_1.Path.relativePath(writePath, treeRoot);\n                        compoundWrite = compoundWrite.addWrite(Path_1.Path.Empty, write.snap.getChild(relativePath));\n                    }\n                    else {\n                        // There is no overlap between root path and write path, ignore write\n                    }\n                }\n                else if (write.children) {\n                    if (treeRoot.contains(writePath)) {\n                        relativePath = Path_1.Path.relativePath(treeRoot, writePath);\n                        compoundWrite = compoundWrite.addWrites(relativePath, write.children);\n                    }\n                    else if (writePath.contains(treeRoot)) {\n                        relativePath = Path_1.Path.relativePath(writePath, treeRoot);\n                        if (relativePath.isEmpty()) {\n                            compoundWrite = compoundWrite.addWrites(Path_1.Path.Empty, write.children);\n                        }\n                        else {\n                            var child = util_1.safeGet(write.children, relativePath.getFront());\n                            if (child) {\n                                // There exists a child in this node that matches the root path\n                                var deepNode = child.getChild(relativePath.popFront());\n                                compoundWrite = compoundWrite.addWrite(Path_1.Path.Empty, deepNode);\n                            }\n                        }\n                    }\n                    else {\n                        // There is no overlap between root path and write path, ignore write\n                    }\n                }\n                else {\n                    throw util_2.assertionError('WriteRecord should have .snap or .children');\n                }\n            }\n        }\n        return compoundWrite;\n    };\n    return WriteTree;\n}());\nexports.WriteTree = WriteTree;\n/**\n * A WriteTreeRef wraps a WriteTree and a path, for convenient access to a particular subtree.  All of the methods\n * just proxy to the underlying WriteTree.\n *\n * @constructor\n */\nvar WriteTreeRef = /** @class */ (function () {\n    /**\n     * @param {!Path} path\n     * @param {!WriteTree} writeTree\n     */\n    function WriteTreeRef(path, writeTree) {\n        this.treePath_ = path;\n        this.writeTree_ = writeTree;\n    }\n    /**\n     * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\n     * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\n     * can lead to a more expensive calculation.\n     *\n     * @param {?Node} completeServerCache\n     * @param {Array.<number>=} writeIdsToExclude Optional writes to exclude.\n     * @param {boolean=} includeHiddenWrites Defaults to false, whether or not to layer on writes with visible set to false\n     * @return {?Node}\n     */\n    WriteTreeRef.prototype.calcCompleteEventCache = function (completeServerCache, writeIdsToExclude, includeHiddenWrites) {\n        return this.writeTree_.calcCompleteEventCache(this.treePath_, completeServerCache, writeIdsToExclude, includeHiddenWrites);\n    };\n    /**\n     * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\n     * mix of the given server data and write data.\n     *\n     * @param {?ChildrenNode} completeServerChildren\n     * @return {!ChildrenNode}\n     */\n    WriteTreeRef.prototype.calcCompleteEventChildren = function (completeServerChildren) {\n        return this.writeTree_.calcCompleteEventChildren(this.treePath_, completeServerChildren);\n    };\n    /**\n     * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\n     * if anything, needs to be applied to the event cache.\n     *\n     * Possibilities:\n     *\n     * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n     *\n     * 2. Some write is completely shadowing. No events to be raised\n     *\n     * 3. Is partially shadowed. Events should be raised\n     *\n     * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\n     *\n     * @param {!Path} path\n     * @param {?Node} existingEventSnap\n     * @param {?Node} existingServerSnap\n     * @return {?Node}\n     */\n    WriteTreeRef.prototype.calcEventCacheAfterServerOverwrite = function (path, existingEventSnap, existingServerSnap) {\n        return this.writeTree_.calcEventCacheAfterServerOverwrite(this.treePath_, path, existingEventSnap, existingServerSnap);\n    };\n    /**\n     * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n     * a higher path, this will return the child of that write relative to the write and this path.\n     * Returns null if there is no write at this path.\n     *\n     * @param {!Path} path\n     * @return {?Node}\n     */\n    WriteTreeRef.prototype.shadowingWrite = function (path) {\n        return this.writeTree_.shadowingWrite(this.treePath_.child(path));\n    };\n    /**\n     * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n     * the window, but may now be in the window\n     *\n     * @param {?Node} completeServerData\n     * @param {!NamedNode} startPost\n     * @param {!number} count\n     * @param {boolean} reverse\n     * @param {!Index} index\n     * @return {!Array.<!NamedNode>}\n     */\n    WriteTreeRef.prototype.calcIndexedSlice = function (completeServerData, startPost, count, reverse, index) {\n        return this.writeTree_.calcIndexedSlice(this.treePath_, completeServerData, startPost, count, reverse, index);\n    };\n    /**\n     * Returns a complete child for a given server snap after applying all user writes or null if there is no\n     * complete child for this ChildKey.\n     *\n     * @param {!string} childKey\n     * @param {!CacheNode} existingServerCache\n     * @return {?Node}\n     */\n    WriteTreeRef.prototype.calcCompleteChild = function (childKey, existingServerCache) {\n        return this.writeTree_.calcCompleteChild(this.treePath_, childKey, existingServerCache);\n    };\n    /**\n     * Return a WriteTreeRef for a child.\n     *\n     * @param {string} childName\n     * @return {!WriteTreeRef}\n     */\n    WriteTreeRef.prototype.child = function (childName) {\n        return new WriteTreeRef(this.treePath_.child(childName), this.writeTree_);\n    };\n    return WriteTreeRef;\n}());\nexports.WriteTreeRef = WriteTreeRef;\n\n//# sourceMappingURL=WriteTree.js.map\n"]}]