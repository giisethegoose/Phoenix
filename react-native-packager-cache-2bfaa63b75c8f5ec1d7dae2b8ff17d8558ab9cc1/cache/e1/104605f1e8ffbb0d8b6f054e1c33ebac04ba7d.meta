["712613bc017be7ece854f35dedb97d0ca5dca11f","d478f507d44ab7c97f7f0e75065ed73aaf0f6fb8",["@firebase/util"],[99],{"version":3,"sources":["/home/giise/candidtwo/node_modules/@firebase/database/dist/cjs/src/core/util/NextPushId.js"],"names":["Object","defineProperty","exports","value","util_1","require","nextPushId","PUSH_CHARS","lastPushTime","lastRandChars","now","duplicateTime","i","timeStampChars","Array","charAt","Math","floor","assert","id","join","random","length"],"mappings":"AAAA;;AAgBAA,OAAOC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C,EAAEC,OAAO,IAAT,EAA7C;AACA,IAAIC,SAASC,OAAT,kBAAJ;;AAeAH,QAAQI,UAAR,GAAsB,YAAY;AAE9B,QAAIC,aAAa,kEAAjB;;AAGA,QAAIC,eAAe,CAAnB;;AAKA,QAAIC,gBAAgB,EAApB;AACA,WAAO,UAAUC,GAAV,EAAe;AAClB,YAAIC,gBAAgBD,QAAQF,YAA5B;AACAA,uBAAeE,GAAf;AACA,YAAIE,CAAJ;AACA,YAAIC,iBAAiB,IAAIC,KAAJ,CAAU,CAAV,CAArB;AACA,aAAKF,IAAI,CAAT,EAAYA,KAAK,CAAjB,EAAoBA,GAApB,EAAyB;AACrBC,2BAAeD,CAAf,IAAoBL,WAAWQ,MAAX,CAAkBL,MAAM,EAAxB,CAApB;;AAGAA,kBAAMM,KAAKC,KAAL,CAAWP,MAAM,EAAjB,CAAN;AACH;AACDN,eAAOc,MAAP,CAAcR,QAAQ,CAAtB,EAAyB,0BAAzB;AACA,YAAIS,KAAKN,eAAeO,IAAf,CAAoB,EAApB,CAAT;AACA,YAAI,CAACT,aAAL,EAAoB;AAChB,iBAAKC,IAAI,CAAT,EAAYA,IAAI,EAAhB,EAAoBA,GAApB,EAAyB;AACrBH,8BAAcG,CAAd,IAAmBI,KAAKC,KAAL,CAAWD,KAAKK,MAAL,KAAgB,EAA3B,CAAnB;AACH;AACJ,SAJD,MAKK;AAGD,iBAAKT,IAAI,EAAT,EAAaA,KAAK,CAAL,IAAUH,cAAcG,CAAd,MAAqB,EAA5C,EAAgDA,GAAhD,EAAqD;AACjDH,8BAAcG,CAAd,IAAmB,CAAnB;AACH;AACDH,0BAAcG,CAAd;AACH;AACD,aAAKA,IAAI,CAAT,EAAYA,IAAI,EAAhB,EAAoBA,GAApB,EAAyB;AACrBO,kBAAMZ,WAAWQ,MAAX,CAAkBN,cAAcG,CAAd,CAAlB,CAAN;AACH;AACDR,eAAOc,MAAP,CAAcC,GAAGG,MAAH,KAAc,EAA5B,EAAgC,kCAAhC;AACA,eAAOH,EAAP;AACH,KA/BD;AAgCH,CA3CoB,EAArB","sourcesContent":["\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util_1 = require(\"@firebase/util\");\n/**\n * Fancy ID generator that creates 20-character string identifiers with the\n * following properties:\n *\n * 1. They're based on timestamp so that they sort *after* any existing ids.\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\n *    collide with other clients' IDs.\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\n *    that will sort properly).\n * 4. They're monotonically increasing. Even if you generate more than one in\n *    the same timestamp, the latter ones will sort after the former ones. We do\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\n *    in the case of a timestamp collision).\n */\nexports.nextPushId = (function () {\n    // Modeled after base64 web-safe chars, but ordered by ASCII.\n    var PUSH_CHARS = '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\n    // Timestamp of last push, used to prevent local collisions if you push twice\n    // in one ms.\n    var lastPushTime = 0;\n    // We generate 72-bits of randomness which get turned into 12 characters and\n    // appended to the timestamp to prevent collisions with other clients. We\n    // store the last characters we generated because in the event of a collision,\n    // we'll use those same characters except \"incremented\" by one.\n    var lastRandChars = [];\n    return function (now) {\n        var duplicateTime = now === lastPushTime;\n        lastPushTime = now;\n        var i;\n        var timeStampChars = new Array(8);\n        for (i = 7; i >= 0; i--) {\n            timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\n            // NOTE: Can't use << here because javascript will convert to int and lose\n            // the upper bits.\n            now = Math.floor(now / 64);\n        }\n        util_1.assert(now === 0, 'Cannot push at time == 0');\n        var id = timeStampChars.join('');\n        if (!duplicateTime) {\n            for (i = 0; i < 12; i++) {\n                lastRandChars[i] = Math.floor(Math.random() * 64);\n            }\n        }\n        else {\n            // If the timestamp hasn't changed since last push, use the same random\n            // number, except incremented by 1.\n            for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\n                lastRandChars[i] = 0;\n            }\n            lastRandChars[i]++;\n        }\n        for (i = 0; i < 12; i++) {\n            id += PUSH_CHARS.charAt(lastRandChars[i]);\n        }\n        util_1.assert(id.length === 20, 'nextPushId: Length should be 20.');\n        return id;\n    };\n})();\n\n//# sourceMappingURL=NextPushId.js.map\n"]}]