["6f9241ced8601c2fd2e00e0dd4aacce22892b3ab","9c22fc23c987141e9bce2f4353ee2e1772199480",["./util/ImmutableTree","./util/Path","@firebase/util","./snap/Node","./snap/indexes/PriorityIndex"],[108,154,191,231,277,331],{"version":3,"sources":["/home/giise/candidtwo/node_modules/@firebase/database/dist/cjs/src/core/CompoundWrite.js"],"names":["Object","defineProperty","exports","value","ImmutableTree_1","require","Path_1","util_1","Node_1","PriorityIndex_1","util_2","CompoundWrite","writeTree_","prototype","addWrite","path","node","isEmpty","ImmutableTree","rootmost","findRootMostValueAndPath","rootMostPath","relativePath","Path","updateChild","set","subtree","newWriteTree","setTree","addWrites","updates","newWrite","forEach","childKey","child","removeWrite","Empty","hasCompleteWrite","getCompleteNode","get","getChild","getCompleteChildren","children","isLeafNode","forEachChild","PRIORITY_INDEX","childName","childNode","push","NamedNode","inorderTraversal","childTree","childCompoundWrite","shadowingNode","apply","applySubtreeWrite_","writeTree","priorityWrite_1","assert"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ImmutableTree_1 = require(\"./util/ImmutableTree\");\nvar Path_1 = require(\"./util/Path\");\nvar util_1 = require(\"@firebase/util\");\nvar Node_1 = require(\"./snap/Node\");\nvar PriorityIndex_1 = require(\"./snap/indexes/PriorityIndex\");\nvar util_2 = require(\"@firebase/util\");\n/**\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\n * to reflect the write added.\n *\n * @constructor\n * @param {!ImmutableTree.<!Node>} writeTree\n */\nvar CompoundWrite = /** @class */ (function () {\n    function CompoundWrite(writeTree_) {\n        this.writeTree_ = writeTree_;\n    }\n    /**\n     * @param {!Path} path\n     * @param {!Node} node\n     * @return {!CompoundWrite}\n     */\n    CompoundWrite.prototype.addWrite = function (path, node) {\n        if (path.isEmpty()) {\n            return new CompoundWrite(new ImmutableTree_1.ImmutableTree(node));\n        }\n        else {\n            var rootmost = this.writeTree_.findRootMostValueAndPath(path);\n            if (rootmost != null) {\n                var rootMostPath = rootmost.path;\n                var value = rootmost.value;\n                var relativePath = Path_1.Path.relativePath(rootMostPath, path);\n                value = value.updateChild(relativePath, node);\n                return new CompoundWrite(this.writeTree_.set(rootMostPath, value));\n            }\n            else {\n                var subtree = new ImmutableTree_1.ImmutableTree(node);\n                var newWriteTree = this.writeTree_.setTree(path, subtree);\n                return new CompoundWrite(newWriteTree);\n            }\n        }\n    };\n    /**\n     * @param {!Path} path\n     * @param {!Object.<string, !Node>} updates\n     * @return {!CompoundWrite}\n     */\n    CompoundWrite.prototype.addWrites = function (path, updates) {\n        var newWrite = this;\n        util_1.forEach(updates, function (childKey, node) {\n            newWrite = newWrite.addWrite(path.child(childKey), node);\n        });\n        return newWrite;\n    };\n    /**\n     * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\n     * location, which must be removed by calling this method with that path.\n     *\n     * @param {!Path} path The path at which a write and all deeper writes should be removed\n     * @return {!CompoundWrite} The new CompoundWrite with the removed path\n     */\n    CompoundWrite.prototype.removeWrite = function (path) {\n        if (path.isEmpty()) {\n            return CompoundWrite.Empty;\n        }\n        else {\n            var newWriteTree = this.writeTree_.setTree(path, ImmutableTree_1.ImmutableTree.Empty);\n            return new CompoundWrite(newWriteTree);\n        }\n    };\n    /**\n     * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\n     * considered \"complete\".\n     *\n     * @param {!Path} path The path to check for\n     * @return {boolean} Whether there is a complete write at that path\n     */\n    CompoundWrite.prototype.hasCompleteWrite = function (path) {\n        return this.getCompleteNode(path) != null;\n    };\n    /**\n     * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\n     * writes from deeper paths, but will return child nodes from a more shallow path.\n     *\n     * @param {!Path} path The path to get a complete write\n     * @return {?Node} The node if complete at that path, or null otherwise.\n     */\n    CompoundWrite.prototype.getCompleteNode = function (path) {\n        var rootmost = this.writeTree_.findRootMostValueAndPath(path);\n        if (rootmost != null) {\n            return this.writeTree_\n                .get(rootmost.path)\n                .getChild(Path_1.Path.relativePath(rootmost.path, path));\n        }\n        else {\n            return null;\n        }\n    };\n    /**\n     * Returns all children that are guaranteed to be a complete overwrite.\n     *\n     * @return {!Array.<NamedNode>} A list of all complete children.\n     */\n    CompoundWrite.prototype.getCompleteChildren = function () {\n        var children = [];\n        var node = this.writeTree_.value;\n        if (node != null) {\n            // If it's a leaf node, it has no children; so nothing to do.\n            if (!node.isLeafNode()) {\n                node.forEachChild(PriorityIndex_1.PRIORITY_INDEX, function (childName, childNode) {\n                    children.push(new Node_1.NamedNode(childName, childNode));\n                });\n            }\n        }\n        else {\n            this.writeTree_.children.inorderTraversal(function (childName, childTree) {\n                if (childTree.value != null) {\n                    children.push(new Node_1.NamedNode(childName, childTree.value));\n                }\n            });\n        }\n        return children;\n    };\n    /**\n     * @param {!Path} path\n     * @return {!CompoundWrite}\n     */\n    CompoundWrite.prototype.childCompoundWrite = function (path) {\n        if (path.isEmpty()) {\n            return this;\n        }\n        else {\n            var shadowingNode = this.getCompleteNode(path);\n            if (shadowingNode != null) {\n                return new CompoundWrite(new ImmutableTree_1.ImmutableTree(shadowingNode));\n            }\n            else {\n                return new CompoundWrite(this.writeTree_.subtree(path));\n            }\n        }\n    };\n    /**\n     * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\n     * @return {boolean} Whether this CompoundWrite is empty\n     */\n    CompoundWrite.prototype.isEmpty = function () {\n        return this.writeTree_.isEmpty();\n    };\n    /**\n     * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\n     * node\n     * @param {!Node} node The node to apply this CompoundWrite to\n     * @return {!Node} The node with all writes applied\n     */\n    CompoundWrite.prototype.apply = function (node) {\n        return CompoundWrite.applySubtreeWrite_(Path_1.Path.Empty, this.writeTree_, node);\n    };\n    /**\n     * @type {!CompoundWrite}\n     */\n    CompoundWrite.Empty = new CompoundWrite(new ImmutableTree_1.ImmutableTree(null));\n    /**\n     * @param {!Path} relativePath\n     * @param {!ImmutableTree.<!Node>} writeTree\n     * @param {!Node} node\n     * @return {!Node}\n     * @private\n     */\n    CompoundWrite.applySubtreeWrite_ = function (relativePath, writeTree, node) {\n        if (writeTree.value != null) {\n            // Since there a write is always a leaf, we're done here\n            return node.updateChild(relativePath, writeTree.value);\n        }\n        else {\n            var priorityWrite_1 = null;\n            writeTree.children.inorderTraversal(function (childKey, childTree) {\n                if (childKey === '.priority') {\n                    // Apply priorities at the end so we don't update priorities for either empty nodes or forget\n                    // to apply priorities to empty nodes that are later filled\n                    util_2.assert(childTree.value !== null, 'Priority writes must always be leaf nodes');\n                    priorityWrite_1 = childTree.value;\n                }\n                else {\n                    node = CompoundWrite.applySubtreeWrite_(relativePath.child(childKey), childTree, node);\n                }\n            });\n            // If there was a priority write, we only apply it if the node is not empty\n            if (!node.getChild(relativePath).isEmpty() && priorityWrite_1 !== null) {\n                node = node.updateChild(relativePath.child('.priority'), priorityWrite_1);\n            }\n            return node;\n        }\n    };\n    return CompoundWrite;\n}());\nexports.CompoundWrite = CompoundWrite;\n\n//# sourceMappingURL=CompoundWrite.js.map\n"]}]