["a7b14362287b5a26156b48d1fb48877681d99052","ad151a45e6c2d6cea7f6ed2e6ba8d2edf9773f30",["../core/RepoInfo","../core/PersistentConnection","../core/RepoManager","../realtime/Connection"],[103,161,222,273],{"version":3,"sources":["/home/giise/candidtwo/node_modules/@firebase/database/dist/cjs/src/api/test_access.js"],"names":["Object","defineProperty","exports","value","RepoInfo_1","require","PersistentConnection_1","RepoManager_1","Connection_1","DataConnection","PersistentConnection","prototype","simpleListen","pathString","onComplete","sendRequest","p","echo","data","onEcho","d","RealTimeConnection","Connection","hijackHash","newHash","oldPut","put","opt_onComplete","opt_hash","undefined","call","ConnectionTarget","RepoInfo","queryIdentifier","query","listens","firebaseRef","repo","persistentConnection_","listens_","forceRestClient","RepoManager","getInstance"],"mappings":"AAAA;;AAgBAA,OAAOC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C,EAAEC,OAAO,IAAT,EAA7C;AACA,IAAIC,aAAaC,QAAQ,kBAAR,CAAjB;AACA,IAAIC,yBAAyBD,QAAQ,8BAAR,CAA7B;AACA,IAAIE,gBAAgBF,QAAQ,qBAAR,CAApB;AACA,IAAIG,eAAeH,QAAQ,wBAAR,CAAnB;AACAH,QAAQO,cAAR,GAAyBH,uBAAuBI,oBAAhD;;AAKAJ,uBAAuBI,oBAAvB,CAA4CC,SAA5C,CAAsDC,YAAtD,GAAqE,UAAUC,UAAV,EAAsBC,UAAtB,EAAkC;AACnG,SAAKC,WAAL,CAAiB,GAAjB,EAAsB,EAAEC,GAAGH,UAAL,EAAtB,EAAyCC,UAAzC;AACH,CAFD;;AAOAR,uBAAuBI,oBAAvB,CAA4CC,SAA5C,CAAsDM,IAAtD,GAA6D,UAAUC,IAAV,EAAgBC,MAAhB,EAAwB;AACjF,SAAKJ,WAAL,CAAiB,MAAjB,EAAyB,EAAEK,GAAGF,IAAL,EAAzB,EAAsCC,MAAtC;AACH,CAFD;;AAIAjB,QAAQmB,kBAAR,GAA6Bb,aAAac,UAA1C;;AAKApB,QAAQqB,UAAR,GAAqB,UAAUC,OAAV,EAAmB;AACpC,QAAIC,SAASnB,uBAAuBI,oBAAvB,CAA4CC,SAA5C,CAAsDe,GAAnE;AACApB,2BAAuBI,oBAAvB,CAA4CC,SAA5C,CAAsDe,GAAtD,GAA4D,UAAUb,UAAV,EAAsBK,IAAtB,EAA4BS,cAA5B,EAA4CC,QAA5C,EAAsD;AAC9G,YAAIA,aAAaC,SAAjB,EAA4B;AACxBD,uBAAWJ,SAAX;AACH;AACDC,eAAOK,IAAP,CAAY,IAAZ,EAAkBjB,UAAlB,EAA8BK,IAA9B,EAAoCS,cAApC,EAAoDC,QAApD;AACH,KALD;AAMA,WAAO,YAAY;AACftB,+BAAuBI,oBAAvB,CAA4CC,SAA5C,CAAsDe,GAAtD,GAA4DD,MAA5D;AACH,KAFD;AAGH,CAXD;;AAeAvB,QAAQ6B,gBAAR,GAA2B3B,WAAW4B,QAAtC;;AAKA9B,QAAQ+B,eAAR,GAA0B,UAAUC,KAAV,EAAiB;AACvC,WAAOA,MAAMD,eAAN,EAAP;AACH,CAFD;;AAOA/B,QAAQiC,OAAR,GAAkB,UAAUC,WAAV,EAAuB;AACrC,WAAOA,YAAYC,IAAZ,CAAiBC,qBAAjB,CAAuCC,QAA9C;AACH,CAFD;;AAQArC,QAAQsC,eAAR,GAA0B,UAAUA,eAAV,EAA2B;AACjDjC,kBAAckC,WAAd,CAA0BC,WAA1B,GAAwCF,eAAxC,CAAwDA,eAAxD;AACH,CAFD","sourcesContent":["\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar RepoInfo_1 = require(\"../core/RepoInfo\");\nvar PersistentConnection_1 = require(\"../core/PersistentConnection\");\nvar RepoManager_1 = require(\"../core/RepoManager\");\nvar Connection_1 = require(\"../realtime/Connection\");\nexports.DataConnection = PersistentConnection_1.PersistentConnection;\n/**\n * @param {!string} pathString\n * @param {function(*)} onComplete\n */\nPersistentConnection_1.PersistentConnection.prototype.simpleListen = function (pathString, onComplete) {\n    this.sendRequest('q', { p: pathString }, onComplete);\n};\n/**\n * @param {*} data\n * @param {function(*)} onEcho\n */\nPersistentConnection_1.PersistentConnection.prototype.echo = function (data, onEcho) {\n    this.sendRequest('echo', { d: data }, onEcho);\n};\n// RealTimeConnection properties that we use in tests.\nexports.RealTimeConnection = Connection_1.Connection;\n/**\n * @param {function(): string} newHash\n * @return {function()}\n */\nexports.hijackHash = function (newHash) {\n    var oldPut = PersistentConnection_1.PersistentConnection.prototype.put;\n    PersistentConnection_1.PersistentConnection.prototype.put = function (pathString, data, opt_onComplete, opt_hash) {\n        if (opt_hash !== undefined) {\n            opt_hash = newHash();\n        }\n        oldPut.call(this, pathString, data, opt_onComplete, opt_hash);\n    };\n    return function () {\n        PersistentConnection_1.PersistentConnection.prototype.put = oldPut;\n    };\n};\n/**\n * @type {function(new:RepoInfo, !string, boolean, !string, boolean): undefined}\n */\nexports.ConnectionTarget = RepoInfo_1.RepoInfo;\n/**\n * @param {!Query} query\n * @return {!string}\n */\nexports.queryIdentifier = function (query) {\n    return query.queryIdentifier();\n};\n/**\n * @param {!Query} firebaseRef\n * @return {!Object}\n */\nexports.listens = function (firebaseRef) {\n    return firebaseRef.repo.persistentConnection_.listens_;\n};\n/**\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\n *\n * @param {boolean} forceRestClient\n */\nexports.forceRestClient = function (forceRestClient) {\n    RepoManager_1.RepoManager.getInstance().forceRestClient(forceRestClient);\n};\n\n//# sourceMappingURL=test_access.js.map\n"]}]