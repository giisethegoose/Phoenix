["8c6e6cb57d8cfccdbf382e3868c82185d0f704c6","53114b35c3f94ac8c74887f2cfa0e4e2513947ee",["react","react-native","../SafeAreaView","../TouchableItem"],[87,183,229,352],{"version":3,"sources":["/home/giise/candidtwo/node_modules/react-navigation/src/views/Drawer/DrawerNavigatorItems.js"],"names":["React","DrawerNavigatorItems","navigation","state","navigate","items","activeItemKey","activeTintColor","activeBackgroundColor","inactiveTintColor","inactiveBackgroundColor","getLabel","renderIcon","onItemPress","itemsContainerForceInset","horizontal","top","itemsContainerStyle","itemStyle","labelStyle","iconContainerStyle","styles","container","map","route","index","focused","key","color","backgroundColor","scene","tintColor","icon","label","item","inactiveIcon","defaultProps","create","paddingVertical","flexDirection","alignItems","marginHorizontal","width","opacity","margin","fontWeight"],"mappings":"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","sourcesContent":["/* @flow */\n\nimport * as React from 'react';\nimport { View, Text, Platform, StyleSheet } from 'react-native';\n\nimport SafeAreaView from '../SafeAreaView';\nimport TouchableItem from '../TouchableItem';\n\nimport type {\n  NavigationScreenProp,\n  NavigationState,\n  NavigationRoute,\n  ViewStyleProp,\n  TextStyleProp,\n} from '../../TypeDefinition';\nimport type { DrawerScene, DrawerItem } from './DrawerView.js';\n\ntype Props = {\n  navigation: NavigationScreenProp<NavigationState>,\n  items: Array<NavigationRoute>,\n  activeItemKey?: string,\n  activeTintColor?: string,\n  activeBackgroundColor?: string,\n  inactiveTintColor?: string,\n  inactiveBackgroundColor?: string,\n  getLabel: (scene: DrawerScene) => ?(React.Node | string),\n  renderIcon: (scene: DrawerScene) => ?React.Node,\n  onItemPress: (info: DrawerItem) => void,\n  itemsContainerForceInset?: Object,\n  itemsContainerStyle?: ViewStyleProp,\n  itemStyle?: ViewStyleProp,\n  labelStyle?: TextStyleProp,\n  iconContainerStyle?: ViewStyleProp,\n};\n\n/**\n * Component that renders the navigation list in the drawer.\n */\nconst DrawerNavigatorItems = ({\n  navigation: { state, navigate },\n  items,\n  activeItemKey,\n  activeTintColor,\n  activeBackgroundColor,\n  inactiveTintColor,\n  inactiveBackgroundColor,\n  getLabel,\n  renderIcon,\n  onItemPress,\n  itemsContainerForceInset = { horizontal: 'never', top: 'always' },\n  itemsContainerStyle,\n  itemStyle,\n  labelStyle,\n  iconContainerStyle,\n}: Props) => (\n  <SafeAreaView forceInset={itemsContainerForceInset}>\n    <View style={[styles.container, itemsContainerStyle]}>\n      {items.map((route: NavigationRoute, index: number) => {\n        const focused = activeItemKey === route.key;\n        const color = focused ? activeTintColor : inactiveTintColor;\n        const backgroundColor = focused\n          ? activeBackgroundColor\n          : inactiveBackgroundColor;\n        const scene = { route, index, focused, tintColor: color };\n        const icon = renderIcon(scene);\n        const label = getLabel(scene);\n        return (\n          <TouchableItem\n            key={route.key}\n            onPress={() => {\n              onItemPress({ route, focused });\n            }}\n            delayPressIn={0}\n          >\n            <SafeAreaView\n              style={{ backgroundColor }}\n              forceInset={{ horizontal: 'always' }}\n            >\n              <View style={[styles.item, itemStyle]}>\n                {icon ? (\n                  <View\n                    style={[\n                      styles.icon,\n                      focused ? null : styles.inactiveIcon,\n                      iconContainerStyle,\n                    ]}\n                  >\n                    {icon}\n                  </View>\n                ) : null}\n                {typeof label === 'string' ? (\n                  <Text style={[styles.label, { color }, labelStyle]}>\n                    {label}\n                  </Text>\n                ) : (\n                  label\n                )}\n              </View>\n            </SafeAreaView>\n          </TouchableItem>\n        );\n      })}\n    </View>\n  </SafeAreaView>\n);\n\n/* Material design specs - https://material.io/guidelines/patterns/navigation-drawer.html#navigation-drawer-specs */\nDrawerNavigatorItems.defaultProps = {\n  activeTintColor: '#2196f3',\n  activeBackgroundColor: 'rgba(0, 0, 0, .04)',\n  inactiveTintColor: 'rgba(0, 0, 0, .87)',\n  inactiveBackgroundColor: 'transparent',\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingVertical: 4,\n  },\n  item: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  icon: {\n    marginHorizontal: 16,\n    width: 24,\n    alignItems: 'center',\n  },\n  inactiveIcon: {\n    /*\n     * Icons have 0.54 opacity according to guidelines\n     * 100/87 * 54 ~= 62\n     */\n    opacity: 0.62,\n  },\n  label: {\n    margin: 16,\n    fontWeight: 'bold',\n  },\n});\n\nexport default DrawerNavigatorItems;\n"]}]