["6d2b1ba41c40d85a9e8768f9e04cc6f2e0e1ee44","1597d8c5859ca7479bff4f76f50175b2bb35c08c",["./_assignValue","./_copyObject","./_createAssigner","./isArrayLike","./_isPrototype","./keys"],[26,70,117,165,209,247],{"version":3,"sources":["/home/giise/candidtwo/node_modules/lodash/assign.js"],"names":["assignValue","require","copyObject","createAssigner","isArrayLike","isPrototype","keys","objectProto","Object","prototype","hasOwnProperty","assign","object","source","key","call","module","exports"],"mappings":"AAAA,IAAIA,cAAcC,QAAQ,gBAAR,CAAlB;AAAA,IACIC,aAAaD,QAAQ,eAAR,CADjB;AAAA,IAEIE,iBAAiBF,QAAQ,mBAAR,CAFrB;AAAA,IAGIG,cAAcH,QAAQ,eAAR,CAHlB;AAAA,IAIII,cAAcJ,QAAQ,gBAAR,CAJlB;AAAA,IAKIK,OAAOL,QAAQ,QAAR,CALX;;AAQA,IAAIM,cAAcC,OAAOC,SAAzB;;AAGA,IAAIC,iBAAiBH,YAAYG,cAAjC;;AAkCA,IAAIC,SAASR,eAAe,UAASS,MAAT,EAAiBC,MAAjB,EAAyB;AACnD,MAAIR,YAAYQ,MAAZ,KAAuBT,YAAYS,MAAZ,CAA3B,EAAgD;AAC9CX,eAAWW,MAAX,EAAmBP,KAAKO,MAAL,CAAnB,EAAiCD,MAAjC;AACA;AACD;AACD,OAAK,IAAIE,GAAT,IAAgBD,MAAhB,EAAwB;AACtB,QAAIH,eAAeK,IAAf,CAAoBF,MAApB,EAA4BC,GAA5B,CAAJ,EAAsC;AACpCd,kBAAYY,MAAZ,EAAoBE,GAApB,EAAyBD,OAAOC,GAAP,CAAzB;AACD;AACF;AACF,CAVY,CAAb;;AAYAE,OAAOC,OAAP,GAAiBN,MAAjB","sourcesContent":["var assignValue = require('./_assignValue'),\n    copyObject = require('./_copyObject'),\n    createAssigner = require('./_createAssigner'),\n    isArrayLike = require('./isArrayLike'),\n    isPrototype = require('./_isPrototype'),\n    keys = require('./keys');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Assigns own enumerable string keyed properties of source objects to the\n * destination object. Source objects are applied from left to right.\n * Subsequent sources overwrite property assignments of previous sources.\n *\n * **Note:** This method mutates `object` and is loosely based on\n * [`Object.assign`](https://mdn.io/Object/assign).\n *\n * @static\n * @memberOf _\n * @since 0.10.0\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n * @see _.assignIn\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * function Bar() {\n *   this.c = 3;\n * }\n *\n * Foo.prototype.b = 2;\n * Bar.prototype.d = 4;\n *\n * _.assign({ 'a': 0 }, new Foo, new Bar);\n * // => { 'a': 1, 'c': 3 }\n */\nvar assign = createAssigner(function(object, source) {\n  if (isPrototype(source) || isArrayLike(source)) {\n    copyObject(source, keys(source), object);\n    return;\n  }\n  for (var key in source) {\n    if (hasOwnProperty.call(source, key)) {\n      assignValue(object, key, source[key]);\n    }\n  }\n});\n\nmodule.exports = assign;\n"]}]