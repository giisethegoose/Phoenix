["f3dc003615c5f2beb6e6954b60ddd700982f2151","67d2b5bdae27ef4d8ce1a3ea2f7a0220d66be085",["react","react-native-drawer-layout-polyfill","../../addNavigationHelpers","./DrawerSidebar"],[682,786,962,1100],{"version":3,"sources":["/home/giise/candidtwo/node_modules/react-navigation/src/views/Drawer/DrawerView.js"],"names":["React","DrawerView","_handleDrawerOpen","navigation","props","state","routes","index","routeName","navigate","_handleDrawerClose","_updateScreenNavigation","navigationState","find","route","_screenNavigationProp","dispatch","_getNavigationState","_renderNavigationView","screenProps","router","contentComponent","contentOptions","style","nextProps","_drawer","openDrawer","drawerShown","closeDrawer","DrawerScreen","getComponentForRouteName","screenNavigation","config","getScreenOptions","c","drawerLockMode","drawerBackgroundColor","drawerWidth","useNativeAnimations","drawerPosition","positions","Right","Left","PureComponent"],"mappings":"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","sourcesContent":["/* @flow */\n\nimport * as React from 'react';\nimport DrawerLayout from 'react-native-drawer-layout-polyfill';\n\nimport addNavigationHelpers from '../../addNavigationHelpers';\nimport DrawerSidebar from './DrawerSidebar';\n\nimport type {\n  NavigationScreenProp,\n  NavigationRoute,\n  NavigationRouter,\n  NavigationState,\n  NavigationDrawerScreenOptions,\n  ViewStyleProp,\n  NavigationTabAction,\n  NavigationStateRoute,\n} from '../../TypeDefinition';\n\nexport type DrawerScene = {\n  route: NavigationRoute,\n  focused: boolean,\n  index: number,\n  tintColor?: string,\n};\n\nexport type DrawerItem = {\n  route: NavigationRoute,\n  focused: boolean,\n};\n\nexport type DrawerViewConfig = {\n  drawerLockMode?: 'unlocked' | 'locked-closed' | 'locked-open',\n  drawerWidth?: number,\n  drawerPosition?: 'left' | 'right',\n  contentComponent?: React.ComponentType<*>,\n  contentOptions?: {},\n  style?: ViewStyleProp,\n  useNativeAnimations?: boolean,\n  drawerBackgroundColor?: string,\n  screenProps?: {},\n};\n\nexport type DrawerViewPropsExceptRouter = DrawerViewConfig & {\n  navigation: NavigationScreenProp<NavigationState>,\n};\n\nexport type DrawerViewProps = DrawerViewPropsExceptRouter & {\n  router: NavigationRouter<\n    NavigationState,\n    NavigationTabAction,\n    NavigationDrawerScreenOptions\n  >,\n};\n\n/**\n * Component that renders the drawer.\n */\nexport default class DrawerView<T: NavigationRoute> extends React.PureComponent<\n  DrawerViewProps\n> {\n  componentWillMount() {\n    this._updateScreenNavigation(this.props.navigation);\n  }\n\n  componentWillReceiveProps(nextProps: DrawerViewProps) {\n    if (\n      this.props.navigation.state.index !== nextProps.navigation.state.index\n    ) {\n      const { routes, index } = nextProps.navigation.state;\n      if (routes[index].routeName === 'DrawerOpen') {\n        this._drawer.openDrawer();\n      } else if (routes[index].routeName === 'DrawerToggle') {\n        if (this._drawer.state.drawerShown) {\n          this.props.navigation.navigate('DrawerClose');\n        } else {\n          this.props.navigation.navigate('DrawerOpen');\n        }\n      } else {\n        this._drawer.closeDrawer();\n      }\n    }\n    this._updateScreenNavigation(nextProps.navigation);\n  }\n\n  _screenNavigationProp: NavigationScreenProp<NavigationStateRoute>;\n\n  _handleDrawerOpen = () => {\n    const { navigation } = this.props;\n    const { routes, index } = navigation.state;\n    if (routes[index].routeName !== 'DrawerOpen') {\n      this.props.navigation.navigate('DrawerOpen');\n    }\n  };\n\n  _handleDrawerClose = () => {\n    const { navigation } = this.props;\n    const { routes, index } = navigation.state;\n    if (routes[index].routeName !== 'DrawerClose') {\n      this.props.navigation.navigate('DrawerClose');\n    }\n  };\n\n  _updateScreenNavigation = (\n    navigation: NavigationScreenProp<NavigationState>\n  ) => {\n    // $FlowFixMe there's no way type the specific shape of the nav state\n    const navigationState: NavigationStateRoute = navigation.state.routes.find(\n      (route: *) => route.routeName === 'DrawerClose'\n    );\n    if (\n      this._screenNavigationProp &&\n      this._screenNavigationProp.state === navigationState\n    ) {\n      return;\n    }\n    this._screenNavigationProp = addNavigationHelpers({\n      dispatch: navigation.dispatch,\n      state: navigationState,\n    });\n  };\n\n  _getNavigationState = (navigation: NavigationScreenProp<NavigationState>) => {\n    const navigationState = navigation.state.routes.find(\n      (route: *) => route.routeName === 'DrawerClose'\n    );\n    return navigationState;\n  };\n\n  _renderNavigationView = () => (\n    <DrawerSidebar\n      screenProps={this.props.screenProps}\n      navigation={this._screenNavigationProp}\n      router={this.props.router}\n      contentComponent={this.props.contentComponent}\n      contentOptions={this.props.contentOptions}\n      style={this.props.style}\n    />\n  );\n\n  _drawer: any;\n\n  render() {\n    const DrawerScreen = this.props.router.getComponentForRouteName(\n      'DrawerClose'\n    );\n\n    const screenNavigation = addNavigationHelpers({\n      state: this._screenNavigationProp.state,\n      dispatch: this._screenNavigationProp.dispatch,\n    });\n\n    const config = this.props.router.getScreenOptions(\n      screenNavigation,\n      this.props.screenProps\n    );\n\n    return (\n      <DrawerLayout\n        ref={(c: *) => {\n          this._drawer = c;\n        }}\n        drawerLockMode={\n          (this.props.screenProps && this.props.screenProps.drawerLockMode) ||\n          (config && config.drawerLockMode)\n        }\n        drawerBackgroundColor={this.props.drawerBackgroundColor}\n        drawerWidth={this.props.drawerWidth}\n        onDrawerOpen={this._handleDrawerOpen}\n        onDrawerClose={this._handleDrawerClose}\n        useNativeAnimations={this.props.useNativeAnimations}\n        renderNavigationView={this._renderNavigationView}\n        drawerPosition={\n          this.props.drawerPosition === 'right'\n            ? DrawerLayout.positions.Right\n            : DrawerLayout.positions.Left\n        }\n      >\n        <DrawerScreen\n          screenProps={this.props.screenProps}\n          navigation={this._screenNavigationProp}\n        />\n      </DrawerLayout>\n    );\n  }\n}\n"]}]